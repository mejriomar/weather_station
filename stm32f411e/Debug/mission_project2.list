
mission_project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b02c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800b1d0  0800b1d0  0000c1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b720  0800b720  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b720  0800b720  0000c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b728  0800b728  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b728  0800b728  0000c728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b72c  0800b72c  0000c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b730  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d4  0800b904  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800b904  0000d490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb33  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298e  00000000  00000000  0001cd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0001f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e4  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c7c  00000000  00000000  00020d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d25  00000000  00000000  00039a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096866  00000000  00000000  0004b725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1f8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a7c  00000000  00000000  000e1fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000e6a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1b4 	.word	0x0800b1b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b1b4 	.word	0x0800b1b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 ba09 	b.w	80010cc <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9be 	b.w	80010cc <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	468e      	mov	lr, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4617      	mov	r7, r2
 8000de8:	d962      	bls.n	8000eb0 <__udivmoddi4+0xdc>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	b14e      	cbz	r6, 8000e04 <__udivmoddi4+0x30>
 8000df0:	f1c6 0320 	rsb	r3, r6, #32
 8000df4:	fa01 f806 	lsl.w	r8, r1, r6
 8000df8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dfc:	40b7      	lsls	r7, r6
 8000dfe:	ea43 0808 	orr.w	r8, r3, r8
 8000e02:	40b4      	lsls	r4, r6
 8000e04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e08:	fa1f fc87 	uxth.w	ip, r7
 8000e0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e28:	f080 80ea 	bcs.w	8001000 <__udivmoddi4+0x22c>
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f240 80e7 	bls.w	8001000 <__udivmoddi4+0x22c>
 8000e32:	3902      	subs	r1, #2
 8000e34:	443b      	add	r3, r7
 8000e36:	1a9a      	subs	r2, r3, r2
 8000e38:	b2a3      	uxth	r3, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e4a:	459c      	cmp	ip, r3
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x8e>
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e54:	f080 80d6 	bcs.w	8001004 <__udivmoddi4+0x230>
 8000e58:	459c      	cmp	ip, r3
 8000e5a:	f240 80d3 	bls.w	8001004 <__udivmoddi4+0x230>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3802      	subs	r0, #2
 8000e62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e66:	eba3 030c 	sub.w	r3, r3, ip
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11d      	cbz	r5, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40f3      	lsrs	r3, r6
 8000e70:	2200      	movs	r2, #0
 8000e72:	e9c5 3200 	strd	r3, r2, [r5]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d905      	bls.n	8000e8a <__udivmoddi4+0xb6>
 8000e7e:	b10d      	cbz	r5, 8000e84 <__udivmoddi4+0xb0>
 8000e80:	e9c5 0100 	strd	r0, r1, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4608      	mov	r0, r1
 8000e88:	e7f5      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000e8a:	fab3 f183 	clz	r1, r3
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	d146      	bne.n	8000f20 <__udivmoddi4+0x14c>
 8000e92:	4573      	cmp	r3, lr
 8000e94:	d302      	bcc.n	8000e9c <__udivmoddi4+0xc8>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	f200 8105 	bhi.w	80010a6 <__udivmoddi4+0x2d2>
 8000e9c:	1a84      	subs	r4, r0, r2
 8000e9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d0e5      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000eae:	e7e2      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	f000 8090 	beq.w	8000fd6 <__udivmoddi4+0x202>
 8000eb6:	fab2 f682 	clz	r6, r2
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	f040 80a4 	bne.w	8001008 <__udivmoddi4+0x234>
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec8:	b280      	uxth	r0, r0
 8000eca:	b2bc      	uxth	r4, r7
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ed2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eda:	fb04 f20c 	mul.w	r2, r4, ip
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x11e>
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x11c>
 8000eea:	429a      	cmp	r2, r3
 8000eec:	f200 80e0 	bhi.w	80010b0 <__udivmoddi4+0x2dc>
 8000ef0:	46c4      	mov	ip, r8
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ef8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000efc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f00:	fb02 f404 	mul.w	r4, r2, r4
 8000f04:	429c      	cmp	r4, r3
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x144>
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x142>
 8000f10:	429c      	cmp	r4, r3
 8000f12:	f200 80ca 	bhi.w	80010aa <__udivmoddi4+0x2d6>
 8000f16:	4602      	mov	r2, r0
 8000f18:	1b1b      	subs	r3, r3, r4
 8000f1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f1e:	e7a5      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f20:	f1c1 0620 	rsb	r6, r1, #32
 8000f24:	408b      	lsls	r3, r1
 8000f26:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2a:	431f      	orrs	r7, r3
 8000f2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f30:	fa20 f306 	lsr.w	r3, r0, r6
 8000f34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	fa1f fc87 	uxth.w	ip, r7
 8000f46:	fbbe f0f9 	udiv	r0, lr, r9
 8000f4a:	0c1c      	lsrs	r4, r3, #16
 8000f4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5e:	d909      	bls.n	8000f74 <__udivmoddi4+0x1a0>
 8000f60:	193c      	adds	r4, r7, r4
 8000f62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f66:	f080 809c 	bcs.w	80010a2 <__udivmoddi4+0x2ce>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f240 8099 	bls.w	80010a2 <__udivmoddi4+0x2ce>
 8000f70:	3802      	subs	r0, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	fa1f fe83 	uxth.w	lr, r3
 8000f7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f80:	fb09 4413 	mls	r4, r9, r3, r4
 8000f84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f8c:	45a4      	cmp	ip, r4
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x1ce>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f96:	f080 8082 	bcs.w	800109e <__udivmoddi4+0x2ca>
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d97f      	bls.n	800109e <__udivmoddi4+0x2ca>
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	443c      	add	r4, r7
 8000fa2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fa6:	eba4 040c 	sub.w	r4, r4, ip
 8000faa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fae:	4564      	cmp	r4, ip
 8000fb0:	4673      	mov	r3, lr
 8000fb2:	46e1      	mov	r9, ip
 8000fb4:	d362      	bcc.n	800107c <__udivmoddi4+0x2a8>
 8000fb6:	d05f      	beq.n	8001078 <__udivmoddi4+0x2a4>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x1fe>
 8000fba:	ebb8 0203 	subs.w	r2, r8, r3
 8000fbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000fc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	40cc      	lsrs	r4, r1
 8000fce:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	e74f      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000fd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fda:	0c01      	lsrs	r1, r0, #16
 8000fdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fe0:	b280      	uxth	r0, r0
 8000fe2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4638      	mov	r0, r7
 8000fea:	463c      	mov	r4, r7
 8000fec:	46b8      	mov	r8, r7
 8000fee:	46be      	mov	lr, r7
 8000ff0:	2620      	movs	r6, #32
 8000ff2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ff6:	eba2 0208 	sub.w	r2, r2, r8
 8000ffa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ffe:	e766      	b.n	8000ece <__udivmoddi4+0xfa>
 8001000:	4601      	mov	r1, r0
 8001002:	e718      	b.n	8000e36 <__udivmoddi4+0x62>
 8001004:	4610      	mov	r0, r2
 8001006:	e72c      	b.n	8000e62 <__udivmoddi4+0x8e>
 8001008:	f1c6 0220 	rsb	r2, r6, #32
 800100c:	fa2e f302 	lsr.w	r3, lr, r2
 8001010:	40b7      	lsls	r7, r6
 8001012:	40b1      	lsls	r1, r6
 8001014:	fa20 f202 	lsr.w	r2, r0, r2
 8001018:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800101c:	430a      	orrs	r2, r1
 800101e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001022:	b2bc      	uxth	r4, r7
 8001024:	fb0e 3318 	mls	r3, lr, r8, r3
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800102e:	fb08 f904 	mul.w	r9, r8, r4
 8001032:	40b0      	lsls	r0, r6
 8001034:	4589      	cmp	r9, r1
 8001036:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800103a:	b280      	uxth	r0, r0
 800103c:	d93e      	bls.n	80010bc <__udivmoddi4+0x2e8>
 800103e:	1879      	adds	r1, r7, r1
 8001040:	f108 3cff 	add.w	ip, r8, #4294967295
 8001044:	d201      	bcs.n	800104a <__udivmoddi4+0x276>
 8001046:	4589      	cmp	r9, r1
 8001048:	d81f      	bhi.n	800108a <__udivmoddi4+0x2b6>
 800104a:	eba1 0109 	sub.w	r1, r1, r9
 800104e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001052:	fb09 f804 	mul.w	r8, r9, r4
 8001056:	fb0e 1119 	mls	r1, lr, r9, r1
 800105a:	b292      	uxth	r2, r2
 800105c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001060:	4542      	cmp	r2, r8
 8001062:	d229      	bcs.n	80010b8 <__udivmoddi4+0x2e4>
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	f109 31ff 	add.w	r1, r9, #4294967295
 800106a:	d2c4      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 800106c:	4542      	cmp	r2, r8
 800106e:	d2c2      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 8001070:	f1a9 0102 	sub.w	r1, r9, #2
 8001074:	443a      	add	r2, r7
 8001076:	e7be      	b.n	8000ff6 <__udivmoddi4+0x222>
 8001078:	45f0      	cmp	r8, lr
 800107a:	d29d      	bcs.n	8000fb8 <__udivmoddi4+0x1e4>
 800107c:	ebbe 0302 	subs.w	r3, lr, r2
 8001080:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001084:	3801      	subs	r0, #1
 8001086:	46e1      	mov	r9, ip
 8001088:	e796      	b.n	8000fb8 <__udivmoddi4+0x1e4>
 800108a:	eba7 0909 	sub.w	r9, r7, r9
 800108e:	4449      	add	r1, r9
 8001090:	f1a8 0c02 	sub.w	ip, r8, #2
 8001094:	fbb1 f9fe 	udiv	r9, r1, lr
 8001098:	fb09 f804 	mul.w	r8, r9, r4
 800109c:	e7db      	b.n	8001056 <__udivmoddi4+0x282>
 800109e:	4673      	mov	r3, lr
 80010a0:	e77f      	b.n	8000fa2 <__udivmoddi4+0x1ce>
 80010a2:	4650      	mov	r0, sl
 80010a4:	e766      	b.n	8000f74 <__udivmoddi4+0x1a0>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e6fd      	b.n	8000ea6 <__udivmoddi4+0xd2>
 80010aa:	443b      	add	r3, r7
 80010ac:	3a02      	subs	r2, #2
 80010ae:	e733      	b.n	8000f18 <__udivmoddi4+0x144>
 80010b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b4:	443b      	add	r3, r7
 80010b6:	e71c      	b.n	8000ef2 <__udivmoddi4+0x11e>
 80010b8:	4649      	mov	r1, r9
 80010ba:	e79c      	b.n	8000ff6 <__udivmoddi4+0x222>
 80010bc:	eba1 0109 	sub.w	r1, r1, r9
 80010c0:	46c4      	mov	ip, r8
 80010c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c6:	fb09 f804 	mul.w	r8, r9, r4
 80010ca:	e7c4      	b.n	8001056 <__udivmoddi4+0x282>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010d6:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <MX_ADC1_Init+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001102:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <MX_ADC1_Init+0x6c>)
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_ADC1_Init+0x64>)
 800110e:	2203      	movs	r2, #3
 8001110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_ADC1_Init+0x64>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001122:	f001 fe15 	bl	8002d50 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 800112c:	f001 fb8a 	bl	8002844 <Error_Handler>
  // }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200001f0 	.word	0x200001f0
 8001138:	40012000 	.word	0x40012000
 800113c:	0f000001 	.word	0x0f000001

08001140 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_ADC_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d127      	bne.n	80011b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800119a:	2313      	movs	r3, #19
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_ADC_MspInit+0x84>)
 80011ae:	f002 fb65 	bl	800387c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	@ 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40012000 	.word	0x40012000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <get_adc_hundle>:
  }
}

/* USER CODE BEGIN 1 */
ADC_HandleTypeDef *get_adc_hundle(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return &hadc1;
 80011cc:	4b02      	ldr	r3, [pc, #8]	@ (80011d8 <get_adc_hundle+0x10>)
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	200001f0 	.word	0x200001f0

080011dc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2203      	movs	r2, #3
 8001200:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	715a      	strb	r2, [r3, #5]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af04      	add	r7, sp, #16
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	460b      	mov	r3, r1
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	b29a      	uxth	r2, r3
 8001232:	8af9      	ldrh	r1, [r7, #22]
 8001234:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2302      	movs	r3, #2
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	f003 f825 	bl	8004294 <HAL_I2C_Mem_Read>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10c      	bne.n	800126a <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001250:	7d7b      	ldrb	r3, [r7, #21]
 8001252:	b21b      	sxth	r3, r3
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7d3b      	ldrb	r3, [r7, #20]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
		return true;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <read_register16+0x58>
	} else
		return false;
 800126a:	2300      	movs	r3, #0

}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b08b      	sub	sp, #44	@ 0x2c
 8001278:	af04      	add	r7, sp, #16
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	461a      	mov	r2, r3
 8001280:	460b      	mov	r3, r1
 8001282:	72fb      	strb	r3, [r7, #11]
 8001284:	4613      	mov	r3, r2
 8001286:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b29a      	uxth	r2, r3
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	b29b      	uxth	r3, r3
 800129c:	8af9      	ldrh	r1, [r7, #22]
 800129e:	f241 3488 	movw	r4, #5000	@ 0x1388
 80012a2:	9402      	str	r4, [sp, #8]
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	f002 fff2 	bl	8004294 <HAL_I2C_Mem_Read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <read_data+0x46>
		return 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <read_data+0x48>
	else
		return 1;
 80012ba:	2301      	movs	r3, #1

}
 80012bc:	4618      	mov	r0, r3
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}

080012c4 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	461a      	mov	r2, r3
 80012d0:	2188      	movs	r1, #136	@ 0x88
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff9e 	bl	8001214 <read_register16>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06f      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3302      	adds	r3, #2
 80012e2:	461a      	mov	r2, r3
 80012e4:	218a      	movs	r1, #138	@ 0x8a
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff94 	bl	8001214 <read_register16>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d065      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3304      	adds	r3, #4
 80012f6:	461a      	mov	r2, r3
 80012f8:	218c      	movs	r1, #140	@ 0x8c
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff8a 	bl	8001214 <read_register16>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d05b      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3306      	adds	r3, #6
 800130a:	461a      	mov	r2, r3
 800130c:	218e      	movs	r1, #142	@ 0x8e
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff80 	bl	8001214 <read_register16>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d051      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3308      	adds	r3, #8
 800131e:	461a      	mov	r2, r3
 8001320:	2190      	movs	r1, #144	@ 0x90
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff76 	bl	8001214 <read_register16>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d047      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	330a      	adds	r3, #10
 8001332:	461a      	mov	r2, r3
 8001334:	2192      	movs	r1, #146	@ 0x92
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff6c 	bl	8001214 <read_register16>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03d      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	330c      	adds	r3, #12
 8001346:	461a      	mov	r2, r3
 8001348:	2194      	movs	r1, #148	@ 0x94
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff62 	bl	8001214 <read_register16>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d033      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	330e      	adds	r3, #14
 800135a:	461a      	mov	r2, r3
 800135c:	2196      	movs	r1, #150	@ 0x96
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff58 	bl	8001214 <read_register16>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d029      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3310      	adds	r3, #16
 800136e:	461a      	mov	r2, r3
 8001370:	2198      	movs	r1, #152	@ 0x98
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff4e 	bl	8001214 <read_register16>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d01f      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3312      	adds	r3, #18
 8001382:	461a      	mov	r2, r3
 8001384:	219a      	movs	r1, #154	@ 0x9a
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff44 	bl	8001214 <read_register16>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3314      	adds	r3, #20
 8001396:	461a      	mov	r2, r3
 8001398:	219c      	movs	r1, #156	@ 0x9c
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff3a 	bl	8001214 <read_register16>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013aa:	461a      	mov	r2, r3
 80013ac:	219e      	movs	r1, #158	@ 0x9e
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff30 	bl	8001214 <read_register16>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <read_calibration_data+0xfa>

		return true;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <read_calibration_data+0xfc>
	}

	return false;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f103 0218 	add.w	r2, r3, #24
 80013d6:	2301      	movs	r3, #1
 80013d8:	21a1      	movs	r1, #161	@ 0xa1
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff4a 	bl	8001274 <read_data>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d14c      	bne.n	8001480 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	331a      	adds	r3, #26
 80013ea:	461a      	mov	r2, r3
 80013ec:	21e1      	movs	r1, #225	@ 0xe1
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff10 	bl	8001214 <read_register16>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d042      	beq.n	8001480 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f103 021c 	add.w	r2, r3, #28
 8001400:	2301      	movs	r3, #1
 8001402:	21e3      	movs	r1, #227	@ 0xe3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff35 	bl	8001274 <read_data>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d137      	bne.n	8001480 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8001410:	f107 030e 	add.w	r3, r7, #14
 8001414:	461a      	mov	r2, r3
 8001416:	21e4      	movs	r1, #228	@ 0xe4
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fefb 	bl	8001214 <read_register16>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d02d      	beq.n	8001480 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	461a      	mov	r2, r3
 800142a:	21e5      	movs	r1, #229	@ 0xe5
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fef1 	bl	8001214 <read_register16>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800143e:	2301      	movs	r3, #1
 8001440:	21e7      	movs	r1, #231	@ 0xe7
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff16 	bl	8001274 <read_data>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	b21b      	sxth	r3, r3
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	b21b      	sxth	r3, r3
 8001456:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800145a:	b21a      	sxth	r2, r3
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	121b      	asrs	r3, r3, #8
 8001460:	b21b      	sxth	r3, r3
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001470:	89bb      	ldrh	r3, [r7, #12]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	b29b      	uxth	r3, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	841a      	strh	r2, [r3, #32]

		return true;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <read_hum_calibration_data+0xba>
	}

	return false;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800148a:	b580      	push	{r7, lr}
 800148c:	b088      	sub	sp, #32
 800148e:	af04      	add	r7, sp, #16
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	70fb      	strb	r3, [r7, #3]
 8001496:	4613      	mov	r3, r2
 8001498:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	89f9      	ldrh	r1, [r7, #14]
 80014ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	1cbb      	adds	r3, r7, #2
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	f002 fdf0 	bl	80040a0 <HAL_I2C_Mem_Write>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <write_register8+0x40>
		return false;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <write_register8+0x42>
	else
		return true;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014e2:	2b76      	cmp	r3, #118	@ 0x76
 80014e4:	d005      	beq.n	80014f2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014ea:	2b77      	cmp	r3, #119	@ 0x77
 80014ec:	d001      	beq.n	80014f2 <bmp280_init+0x1e>

		return false;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e09d      	b.n	800162e <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80014f8:	2301      	movs	r3, #1
 80014fa:	21d0      	movs	r1, #208	@ 0xd0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff feb9 	bl	8001274 <read_data>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <bmp280_init+0x38>
		return false;
 8001508:	2300      	movs	r3, #0
 800150a:	e090      	b.n	800162e <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001512:	2b58      	cmp	r3, #88	@ 0x58
 8001514:	d006      	beq.n	8001524 <bmp280_init+0x50>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800151c:	2b60      	cmp	r3, #96	@ 0x60
 800151e:	d001      	beq.n	8001524 <bmp280_init+0x50>

		return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e084      	b.n	800162e <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001524:	22b6      	movs	r2, #182	@ 0xb6
 8001526:	21e0      	movs	r1, #224	@ 0xe0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffae 	bl	800148a <write_register8>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <bmp280_init+0x64>
		return false;
 8001534:	2300      	movs	r3, #0
 8001536:	e07a      	b.n	800162e <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	2301      	movs	r3, #1
 800153e:	21f3      	movs	r1, #243	@ 0xf3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fe97 	bl	8001274 <read_data>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f5      	bne.n	8001538 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800154c:	7b3b      	ldrb	r3, [r7, #12]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff feb4 	bl	80012c4 <read_calibration_data>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d100      	bne.n	800156a <bmp280_init+0x96>
 8001568:	e001      	b.n	800156e <bmp280_init+0x9a>
		return false;
 800156a:	2300      	movs	r3, #0
 800156c:	e05f      	b.n	800162e <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001574:	2b60      	cmp	r3, #96	@ 0x60
 8001576:	d10a      	bne.n	800158e <bmp280_init+0xba>
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff25 	bl	80013c8 <read_hum_calibration_data>
 800157e:	4603      	mov	r3, r0
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <bmp280_init+0xba>
		return false;
 800158a:	2300      	movs	r3, #0
 800158c:	e04f      	b.n	800162e <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	795b      	ldrb	r3, [r3, #5]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	b25a      	sxtb	r2, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	b25b      	sxtb	r3, r3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	461a      	mov	r2, r3
 80015ac:	21f5      	movs	r1, #245	@ 0xf5
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff6b 	bl	800148a <write_register8>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <bmp280_init+0xea>
		return false;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e037      	b.n	800162e <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d102      	bne.n	80015cc <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	015b      	lsls	r3, r3, #5
 80015d4:	b25a      	sxtb	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015ee:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80015f6:	2b60      	cmp	r3, #96	@ 0x60
 80015f8:	d10d      	bne.n	8001616 <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	791b      	ldrb	r3, [r3, #4]
 80015fe:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	461a      	mov	r2, r3
 8001604:	21f2      	movs	r1, #242	@ 0xf2
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff3f 	bl	800148a <write_register8>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <bmp280_init+0x142>
			return false;
 8001612:	2300      	movs	r3, #0
 8001614:	e00b      	b.n	800162e <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	461a      	mov	r2, r3
 800161a:	21f4      	movs	r1, #244	@ 0xf4
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff34 	bl	800148a <write_register8>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <bmp280_init+0x158>
		return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e000      	b.n	800162e <bmp280_init+0x15a>
	}

	return true;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	10da      	asrs	r2, r3, #3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001654:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001658:	12db      	asrs	r3, r3, #11
 800165a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	111b      	asrs	r3, r3, #4
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	8812      	ldrh	r2, [r2, #0]
 8001664:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	1112      	asrs	r2, r2, #4
 800166a:	68f9      	ldr	r1, [r7, #12]
 800166c:	8809      	ldrh	r1, [r1, #0]
 800166e:	1a52      	subs	r2, r2, r1
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001680:	139b      	asrs	r3, r3, #14
 8001682:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	441a      	add	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3380      	adds	r3, #128	@ 0x80
 800169a:	121b      	asrs	r3, r3, #8
}
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80016a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ac:	b0cc      	sub	sp, #304	@ 0x130
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80016b4:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80016b8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80016bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016c0:	17da      	asrs	r2, r3, #31
 80016c2:	461c      	mov	r4, r3
 80016c4:	4615      	mov	r5, r2
 80016c6:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80016ca:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016ce:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80016d2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016da:	fb03 f102 	mul.w	r1, r3, r2
 80016de:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	18ca      	adds	r2, r1, r3
 80016ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016f0:	fba3 8903 	umull	r8, r9, r3, r3
 80016f4:	eb02 0309 	add.w	r3, r2, r9
 80016f8:	4699      	mov	r9, r3
 80016fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001702:	b21b      	sxth	r3, r3
 8001704:	17da      	asrs	r2, r3, #31
 8001706:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800170a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800170e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001712:	4603      	mov	r3, r0
 8001714:	fb03 f209 	mul.w	r2, r3, r9
 8001718:	460b      	mov	r3, r1
 800171a:	fb08 f303 	mul.w	r3, r8, r3
 800171e:	4413      	add	r3, r2
 8001720:	4602      	mov	r2, r0
 8001722:	fba8 1202 	umull	r1, r2, r8, r2
 8001726:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800172a:	460a      	mov	r2, r1
 800172c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001730:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800173a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800173e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001742:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800174a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800174e:	b21b      	sxth	r3, r3
 8001750:	17da      	asrs	r2, r3, #31
 8001752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001756:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800175a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800175e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001762:	462a      	mov	r2, r5
 8001764:	fb02 f203 	mul.w	r2, r2, r3
 8001768:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800176c:	4621      	mov	r1, r4
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	441a      	add	r2, r3
 8001774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001778:	4621      	mov	r1, r4
 800177a:	fba3 1301 	umull	r1, r3, r3, r1
 800177e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001782:	460b      	mov	r3, r1
 8001784:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800178c:	18d3      	adds	r3, r2, r3
 800178e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800179e:	462b      	mov	r3, r5
 80017a0:	0459      	lsls	r1, r3, #17
 80017a2:	4623      	mov	r3, r4
 80017a4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80017a8:	4623      	mov	r3, r4
 80017aa:	0458      	lsls	r0, r3, #17
 80017ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b0:	1814      	adds	r4, r2, r0
 80017b2:	643c      	str	r4, [r7, #64]	@ 0x40
 80017b4:	414b      	adcs	r3, r1
 80017b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80017bc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80017c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	17da      	asrs	r2, r3, #31
 80017cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80017d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80017d4:	f04f 0000 	mov.w	r0, #0
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017e0:	00d9      	lsls	r1, r3, #3
 80017e2:	2000      	movs	r0, #0
 80017e4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017e8:	1814      	adds	r4, r2, r0
 80017ea:	63bc      	str	r4, [r7, #56]	@ 0x38
 80017ec:	414b      	adcs	r3, r1
 80017ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017f0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80017f4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017f8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001800:	fb03 f102 	mul.w	r1, r3, r2
 8001804:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001808:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	18ca      	adds	r2, r1, r3
 8001812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001816:	fba3 1303 	umull	r1, r3, r3, r3
 800181a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800181e:	460b      	mov	r3, r1
 8001820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001828:	18d3      	adds	r3, r2, r3
 800182a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800182e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001832:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001836:	b21b      	sxth	r3, r3
 8001838:	17da      	asrs	r2, r3, #31
 800183a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800183e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001842:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001846:	462b      	mov	r3, r5
 8001848:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800184c:	4642      	mov	r2, r8
 800184e:	fb02 f203 	mul.w	r2, r2, r3
 8001852:	464b      	mov	r3, r9
 8001854:	4621      	mov	r1, r4
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	4622      	mov	r2, r4
 800185e:	4641      	mov	r1, r8
 8001860:	fba2 1201 	umull	r1, r2, r2, r1
 8001864:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001868:	460a      	mov	r2, r1
 800186a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800186e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001872:	4413      	add	r3, r2
 8001874:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001878:	f04f 0000 	mov.w	r0, #0
 800187c:	f04f 0100 	mov.w	r1, #0
 8001880:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001884:	4623      	mov	r3, r4
 8001886:	0a18      	lsrs	r0, r3, #8
 8001888:	462b      	mov	r3, r5
 800188a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800188e:	462b      	mov	r3, r5
 8001890:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800189a:	b21b      	sxth	r3, r3
 800189c:	17da      	asrs	r2, r3, #31
 800189e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018a2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018aa:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80018ae:	464a      	mov	r2, r9
 80018b0:	fb02 f203 	mul.w	r2, r2, r3
 80018b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018b8:	4644      	mov	r4, r8
 80018ba:	fb04 f303 	mul.w	r3, r4, r3
 80018be:	441a      	add	r2, r3
 80018c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018c4:	4644      	mov	r4, r8
 80018c6:	fba3 4304 	umull	r4, r3, r3, r4
 80018ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018ce:	4623      	mov	r3, r4
 80018d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80018d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80018ea:	464c      	mov	r4, r9
 80018ec:	0323      	lsls	r3, r4, #12
 80018ee:	4644      	mov	r4, r8
 80018f0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018f4:	4644      	mov	r4, r8
 80018f6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018f8:	1884      	adds	r4, r0, r2
 80018fa:	633c      	str	r4, [r7, #48]	@ 0x30
 80018fc:	eb41 0303 	adc.w	r3, r1, r3
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
 8001902:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001906:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800190a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800190e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001912:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001916:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800191a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191e:	88db      	ldrh	r3, [r3, #6]
 8001920:	b29b      	uxth	r3, r3
 8001922:	2200      	movs	r2, #0
 8001924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001928:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800192c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001930:	462b      	mov	r3, r5
 8001932:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001936:	4642      	mov	r2, r8
 8001938:	fb02 f203 	mul.w	r2, r2, r3
 800193c:	464b      	mov	r3, r9
 800193e:	4621      	mov	r1, r4
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	4622      	mov	r2, r4
 8001948:	4641      	mov	r1, r8
 800194a:	fba2 1201 	umull	r1, r2, r2, r1
 800194e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001952:	460a      	mov	r2, r1
 8001954:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001958:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800195c:	4413      	add	r3, r2
 800195e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800196e:	4629      	mov	r1, r5
 8001970:	104a      	asrs	r2, r1, #1
 8001972:	4629      	mov	r1, r5
 8001974:	17cb      	asrs	r3, r1, #31
 8001976:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800197a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800197e:	4313      	orrs	r3, r2
 8001980:	d101      	bne.n	8001986 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001982:	2300      	movs	r3, #0
 8001984:	e148      	b.n	8001c18 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001986:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800198a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001994:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001998:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800199c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019a0:	105b      	asrs	r3, r3, #1
 80019a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80019a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019aa:	07db      	lsls	r3, r3, #31
 80019ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019b0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019b4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80019b8:	4621      	mov	r1, r4
 80019ba:	1a89      	subs	r1, r1, r2
 80019bc:	67b9      	str	r1, [r7, #120]	@ 0x78
 80019be:	4629      	mov	r1, r5
 80019c0:	eb61 0303 	sbc.w	r3, r1, r3
 80019c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80019ca:	4622      	mov	r2, r4
 80019cc:	462b      	mov	r3, r5
 80019ce:	1891      	adds	r1, r2, r2
 80019d0:	6239      	str	r1, [r7, #32]
 80019d2:	415b      	adcs	r3, r3
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019da:	4621      	mov	r1, r4
 80019dc:	1851      	adds	r1, r2, r1
 80019de:	61b9      	str	r1, [r7, #24]
 80019e0:	4629      	mov	r1, r5
 80019e2:	414b      	adcs	r3, r1
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019f2:	4649      	mov	r1, r9
 80019f4:	018b      	lsls	r3, r1, #6
 80019f6:	4641      	mov	r1, r8
 80019f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fc:	4641      	mov	r1, r8
 80019fe:	018a      	lsls	r2, r1, #6
 8001a00:	4641      	mov	r1, r8
 8001a02:	1889      	adds	r1, r1, r2
 8001a04:	6139      	str	r1, [r7, #16]
 8001a06:	4649      	mov	r1, r9
 8001a08:	eb43 0101 	adc.w	r1, r3, r1
 8001a0c:	6179      	str	r1, [r7, #20]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	008b      	lsls	r3, r1, #2
 8001a1e:	4641      	mov	r1, r8
 8001a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a24:	4641      	mov	r1, r8
 8001a26:	008a      	lsls	r2, r1, #2
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4622      	mov	r2, r4
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	460b      	mov	r3, r1
 8001a36:	462a      	mov	r2, r5
 8001a38:	eb42 0303 	adc.w	r3, r2, r3
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	008b      	lsls	r3, r1, #2
 8001a4e:	4641      	mov	r1, r8
 8001a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a54:	4641      	mov	r1, r8
 8001a56:	008a      	lsls	r2, r1, #2
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4622      	mov	r2, r4
 8001a60:	189b      	adds	r3, r3, r2
 8001a62:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a64:	462b      	mov	r3, r5
 8001a66:	460a      	mov	r2, r1
 8001a68:	eb42 0303 	adc.w	r3, r2, r3
 8001a6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a6e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a72:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a76:	f7ff f90f 	bl	8000c98 <__aeabi_ldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a86:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	17da      	asrs	r2, r3, #31
 8001a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a96:	f04f 0000 	mov.w	r0, #0
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	0b50      	lsrs	r0, r2, #13
 8001aa0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001aa4:	1359      	asrs	r1, r3, #13
 8001aa6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001aaa:	462b      	mov	r3, r5
 8001aac:	fb00 f203 	mul.w	r2, r0, r3
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	fb03 f301 	mul.w	r3, r3, r1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4622      	mov	r2, r4
 8001aba:	fba2 1200 	umull	r1, r2, r2, r0
 8001abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001ac8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001acc:	4413      	add	r3, r2
 8001ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001ad2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0b50      	lsrs	r0, r2, #13
 8001ae0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ae4:	1359      	asrs	r1, r3, #13
 8001ae6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001aea:	462b      	mov	r3, r5
 8001aec:	fb00 f203 	mul.w	r2, r0, r3
 8001af0:	4623      	mov	r3, r4
 8001af2:	fb03 f301 	mul.w	r3, r3, r1
 8001af6:	4413      	add	r3, r2
 8001af8:	4622      	mov	r2, r4
 8001afa:	fba2 1200 	umull	r1, r2, r2, r0
 8001afe:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001b02:	460a      	mov	r2, r1
 8001b04:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b1e:	4621      	mov	r1, r4
 8001b20:	0e4a      	lsrs	r2, r1, #25
 8001b22:	4629      	mov	r1, r5
 8001b24:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b28:	4629      	mov	r1, r5
 8001b2a:	164b      	asrs	r3, r1, #25
 8001b2c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b34:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	17da      	asrs	r2, r3, #31
 8001b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b48:	462a      	mov	r2, r5
 8001b4a:	fb02 f203 	mul.w	r2, r2, r3
 8001b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b52:	4621      	mov	r1, r4
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b5e:	4621      	mov	r1, r4
 8001b60:	fba2 1201 	umull	r1, r2, r2, r1
 8001b64:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b68:	460a      	mov	r2, r1
 8001b6a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b6e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b72:	4413      	add	r3, r2
 8001b74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b84:	4621      	mov	r1, r4
 8001b86:	0cca      	lsrs	r2, r1, #19
 8001b88:	4629      	mov	r1, r5
 8001b8a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b8e:	4629      	mov	r1, r5
 8001b90:	14cb      	asrs	r3, r1, #19
 8001b92:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b96:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b9a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b9e:	1884      	adds	r4, r0, r2
 8001ba0:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001ba2:	eb41 0303 	adc.w	r3, r1, r3
 8001ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ba8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bac:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	1889      	adds	r1, r1, r2
 8001bb4:	6539      	str	r1, [r7, #80]	@ 0x50
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	eb43 0101 	adc.w	r1, r3, r1
 8001bbc:	6579      	str	r1, [r7, #84]	@ 0x54
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001bca:	4623      	mov	r3, r4
 8001bcc:	0a18      	lsrs	r0, r3, #8
 8001bce:	462b      	mov	r3, r5
 8001bd0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	1219      	asrs	r1, r3, #8
 8001bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bdc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001be6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001bf4:	464c      	mov	r4, r9
 8001bf6:	0123      	lsls	r3, r4, #4
 8001bf8:	4644      	mov	r4, r8
 8001bfa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bfe:	4644      	mov	r4, r8
 8001c00:	0122      	lsls	r2, r4, #4
 8001c02:	1884      	adds	r4, r0, r2
 8001c04:	603c      	str	r4, [r7, #0]
 8001c06:	eb41 0303 	adc.w	r3, r1, r3
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c10:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001c14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c24 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c36:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	039a      	lsls	r2, r3, #14
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c42:	051b      	lsls	r3, r3, #20
 8001c44:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c5a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c62:	4611      	mov	r1, r2
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	fb01 f202 	mul.w	r2, r1, r2
 8001c6a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	7f09      	ldrb	r1, [r1, #28]
 8001c70:	4608      	mov	r0, r1
 8001c72:	6979      	ldr	r1, [r7, #20]
 8001c74:	fb00 f101 	mul.w	r1, r0, r1
 8001c78:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c7a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c7e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c82:	1292      	asrs	r2, r2, #10
 8001c84:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c8e:	fb01 f202 	mul.w	r2, r1, r2
 8001c92:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c96:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	13db      	asrs	r3, r3, #15
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	13d2      	asrs	r2, r2, #15
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	7e12      	ldrb	r2, [r2, #24]
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cc2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001cca:	bfa8      	it	ge
 8001ccc:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001cd0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	131b      	asrs	r3, r3, #12
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08c      	sub	sp, #48	@ 0x30
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cf6:	2b60      	cmp	r3, #96	@ 0x60
 8001cf8:	d007      	beq.n	8001d0a <bmp280_read_fixed+0x28>
		if (humidity)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <bmp280_read_fixed+0x32>
 8001d10:	2308      	movs	r3, #8
 8001d12:	e000      	b.n	8001d16 <bmp280_read_fixed+0x34>
 8001d14:	2306      	movs	r3, #6
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f107 0218 	add.w	r2, r7, #24
 8001d20:	21f7      	movs	r1, #247	@ 0xf7
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff faa6 	bl	8001274 <read_data>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <bmp280_read_fixed+0x50>
		return false;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e038      	b.n	8001da4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001d32:	7e3b      	ldrb	r3, [r7, #24]
 8001d34:	031a      	lsls	r2, r3, #12
 8001d36:	7e7b      	ldrb	r3, [r7, #25]
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	7eba      	ldrb	r2, [r7, #26]
 8001d3e:	0912      	lsrs	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	4313      	orrs	r3, r2
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001d46:	7efb      	ldrb	r3, [r7, #27]
 8001d48:	031a      	lsls	r2, r3, #12
 8001d4a:	7f3b      	ldrb	r3, [r7, #28]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	7f7a      	ldrb	r2, [r7, #29]
 8001d52:	0912      	lsrs	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	4313      	orrs	r3, r2
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fc67 	bl	8001636 <compensate_temperature>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	461a      	mov	r2, r3
 8001d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fc97 	bl	80016a8 <compensate_pressure>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d86:	7fbb      	ldrb	r3, [r7, #30]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	7ffa      	ldrb	r2, [r7, #31]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	461a      	mov	r2, r3
 8001d94:	6a39      	ldr	r1, [r7, #32]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff ff44 	bl	8001c24 <compensate_humidity>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3730      	adds	r7, #48	@ 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <bmp280_read_float+0x1a>
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	e000      	b.n	8001dc8 <bmp280_read_float+0x1c>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f107 0218 	add.w	r2, r7, #24
 8001dcc:	f107 011c 	add.w	r1, r7, #28
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff ff86 	bl	8001ce2 <bmp280_read_fixed>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d028      	beq.n	8001e2e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e38 <bmp280_read_float+0x8c>
 8001dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dfe:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e3c <bmp280_read_float+0x90>
 8001e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001e40 <bmp280_read_float+0x94>
 8001e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <bmp280_read_float+0x84>
	}

	return false;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	42c80000 	.word	0x42c80000
 8001e3c:	43800000 	.word	0x43800000
 8001e40:	44800000 	.word	0x44800000

08001e44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
 8001e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a31      	ldr	r2, [pc, #196]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8001ed0:	4816      	ldr	r0, [pc, #88]	@ (8001f2c <MX_GPIO_Init+0xe8>)
 8001ed2:	f001 fe57 	bl	8003b84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eda:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4811      	ldr	r0, [pc, #68]	@ (8001f30 <MX_GPIO_Init+0xec>)
 8001eec:	f001 fcc6 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001ef0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001ef4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4808      	ldr	r0, [pc, #32]	@ (8001f2c <MX_GPIO_Init+0xe8>)
 8001f0a:	f001 fcb7 	bl	800387c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	2006      	movs	r0, #6
 8001f14:	f001 fbe9 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f18:	2006      	movs	r0, #6
 8001f1a:	f001 fc02 	bl	8003722 <HAL_NVIC_EnableIRQ>

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40020000 	.word	0x40020000

08001f34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f3a:	4a13      	ldr	r2, [pc, #76]	@ (8001f88 <MX_I2C1_Init+0x54>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <MX_I2C1_Init+0x58>)
 8001f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f72:	f001 fe53 	bl	8003c1c <HAL_I2C_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f7c:	f000 fc62 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000238 	.word	0x20000238
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	000186a0 	.word	0x000186a0

08001f90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	@ 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	@ (8002014 <HAL_I2C_MspInit+0x84>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12b      	bne.n	800200a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a17      	ldr	r2, [pc, #92]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fce:	23c0      	movs	r3, #192	@ 0xc0
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd2:	2312      	movs	r3, #18
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480c      	ldr	r0, [pc, #48]	@ (800201c <HAL_I2C_MspInit+0x8c>)
 8001fea:	f001 fc47 	bl	800387c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800200a:	bf00      	nop
 800200c:	3728      	adds	r7, #40	@ 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40005400 	.word	0x40005400
 8002018:	40023800 	.word	0x40023800
 800201c:	40020400 	.word	0x40020400

08002020 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
int32_t lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
	  int32_t status = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f023 030f 	bic.w	r3, r3, #15
 8002036:	74fb      	strb	r3, [r7, #19]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	74bb      	strb	r3, [r7, #18]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	f043 030c 	orr.w	r3, r3, #12
 8002044:	b2db      	uxtb	r3, r3
 8002046:	733b      	strb	r3, [r7, #12]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	b2db      	uxtb	r3, r3
 8002050:	737b      	strb	r3, [r7, #13]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8002052:	7cbb      	ldrb	r3, [r7, #18]
 8002054:	f043 030c 	orr.w	r3, r3, #12
 8002058:	b2db      	uxtb	r3, r3
 800205a:	73bb      	strb	r3, [r7, #14]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 800205c:	7cbb      	ldrb	r3, [r7, #18]
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	b2db      	uxtb	r3, r3
 8002064:	73fb      	strb	r3, [r7, #15]

    if(HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	791b      	ldrb	r3, [r3, #4]
 800206e:	4619      	mov	r1, r3
 8002070:	f107 020c 	add.w	r2, r7, #12
 8002074:	2364      	movs	r3, #100	@ 0x64
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2304      	movs	r3, #4
 800207a:	f001 ff13 	bl	8003ea4 <HAL_I2C_Master_Transmit>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <lcd_send_cmd+0x6a>
		{
			status = -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	617b      	str	r3, [r7, #20]
		}
		return status;
 800208a:	697b      	ldr	r3, [r7, #20]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
int32_t lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
		int32_t status = 0; 
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f023 030f 	bic.w	r3, r3, #15
 80020aa:	74fb      	strb	r3, [r7, #19]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	74bb      	strb	r3, [r7, #18]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	f043 030d 	orr.w	r3, r3, #13
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	733b      	strb	r3, [r7, #12]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	f043 0309 	orr.w	r3, r3, #9
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	737b      	strb	r3, [r7, #13]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80020c6:	7cbb      	ldrb	r3, [r7, #18]
 80020c8:	f043 030d 	orr.w	r3, r3, #13
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	73bb      	strb	r3, [r7, #14]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80020d0:	7cbb      	ldrb	r3, [r7, #18]
 80020d2:	f043 0309 	orr.w	r3, r3, #9
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	73fb      	strb	r3, [r7, #15]

    if(HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	791b      	ldrb	r3, [r3, #4]
 80020e2:	4619      	mov	r1, r3
 80020e4:	f107 020c 	add.w	r2, r7, #12
 80020e8:	2364      	movs	r3, #100	@ 0x64
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2304      	movs	r3, #4
 80020ee:	f001 fed9 	bl	8003ea4 <HAL_I2C_Master_Transmit>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <lcd_send_data+0x6a>
		{
			status = -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	617b      	str	r3, [r7, #20]
		}
		return status;
 80020fe:	697b      	ldr	r3, [r7, #20]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8002110:	2180      	movs	r1, #128	@ 0x80
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff84 	bl	8002020 <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e006      	b.n	800212c <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 800211e:	2120      	movs	r1, #32
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ffb7 	bl	8002094 <lcd_send_data>
    for (int i = 0; i < 70; i++)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3301      	adds	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b45      	cmp	r3, #69	@ 0x45
 8002130:	ddf5      	ble.n	800211e <lcd_clear+0x16>
    }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
    if (row == 0)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	e003      	b.n	8002160 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800215e:	60bb      	str	r3, [r7, #8]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4619      	mov	r1, r3
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff ff5a 	bl	8002020 <lcd_send_cmd>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 800217c:	2032      	movs	r0, #50	@ 0x32
 800217e:	f000 fdc3 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8002182:	2130      	movs	r1, #48	@ 0x30
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff4b 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(5);
 800218a:	2005      	movs	r0, #5
 800218c:	f000 fdbc 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8002190:	2130      	movs	r1, #48	@ 0x30
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff44 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 8002198:	2001      	movs	r0, #1
 800219a:	f000 fdb5 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800219e:	2130      	movs	r1, #48	@ 0x30
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff3d 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(10);
 80021a6:	200a      	movs	r0, #10
 80021a8:	f000 fdae 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80021ac:	2120      	movs	r1, #32
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff36 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f000 fda7 	bl	8002d08 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80021ba:	2128      	movs	r1, #40	@ 0x28
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff2f 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fda0 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80021c8:	2108      	movs	r1, #8
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff28 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f000 fd99 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 80021d6:	2101      	movs	r1, #1
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff21 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(2);
 80021de:	2002      	movs	r0, #2
 80021e0:	f000 fd92 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 80021e4:	2106      	movs	r1, #6
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff1a 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 fd8b 	bl	8002d08 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 80021f2:	210c      	movs	r1, #12
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff13 	bl	8002020 <lcd_send_cmd>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 800220c:	e007      	b.n	800221e <lcd_puts+0x1c>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	603a      	str	r2, [r7, #0]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff3b 	bl	8002094 <lcd_send_data>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f3      	bne.n	800220e <lcd_puts+0xc>
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <LCD_PrintfAt>:
 * @param  y: y position
 * @param  format : formated string
 * @retval None
 */
void LCD_PrintfAt(I2C_LCD_HandleTypeDef *lcd,uint8_t x, uint8_t y, const char *format, ...)
{
 8002230:	b408      	push	{r3}
 8002232:	b580      	push	{r7, lr}
 8002234:	b08d      	sub	sp, #52	@ 0x34
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
 800223e:	4613      	mov	r3, r2
 8002240:	70bb      	strb	r3, [r7, #2]
    char str[32];  // buffer de sortie
    va_list args;

    va_start(args, format);
 8002242:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002246:	60fb      	str	r3, [r7, #12]
    vsnprintf(str, sizeof(str), format, args);  // formatage
 8002248:	f107 0010 	add.w	r0, r7, #16
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002250:	2120      	movs	r1, #32
 8002252:	f005 fc3f 	bl	8007ad4 <vsniprintf>
    va_end(args);

    lcd_gotoxy(lcd, x, y);       // positionnement
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	78ba      	ldrb	r2, [r7, #2]
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff6d 	bl	800213c <lcd_gotoxy>
    lcd_puts(lcd, str);          // affichage
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffca 	bl	8002202 <lcd_puts>
}
 800226e:	bf00      	nop
 8002270:	3734      	adds	r7, #52	@ 0x34
 8002272:	46bd      	mov	sp, r7
 8002274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002278:	b001      	add	sp, #4
 800227a:	4770      	bx	lr

0800227c <__io_putchar>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002284:	1d39      	adds	r1, r7, #4
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	2201      	movs	r2, #1
 800228c:	4803      	ldr	r0, [pc, #12]	@ (800229c <__io_putchar+0x20>)
 800228e:	f003 fb51 	bl	8005934 <HAL_UART_Transmit>
    return ch;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200002f8 	.word	0x200002f8

080022a0 <init_lcds>:

void init_lcds(void) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	lcd1.hi2c = &hi2c1;     // hi2c1 is your I2C handler
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <init_lcds+0x1c>)
 80022a6:	4a06      	ldr	r2, [pc, #24]	@ (80022c0 <init_lcds+0x20>)
 80022a8:	601a      	str	r2, [r3, #0]
	lcd1.address = 0x27 << 1;    // I2C address for the first LCD
 80022aa:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <init_lcds+0x1c>)
 80022ac:	224e      	movs	r2, #78	@ 0x4e
 80022ae:	711a      	strb	r2, [r3, #4]
	lcd_init(&lcd1);        // Initialize the first LCD
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <init_lcds+0x1c>)
 80022b2:	f7ff ff5f 	bl	8002174 <lcd_init>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000028c 	.word	0x2000028c
 80022c0:	20000238 	.word	0x20000238

080022c4 <adc_read_channel>:

uint32_t adc_read_channel(uint32_t chanel)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /*get the adc hundel*/
  ADC_HandleTypeDef *hadc1 = get_adc_hundle();
 80022cc:	f7fe ff7c 	bl	80011c8 <get_adc_hundle>
 80022d0:	61b8      	str	r0, [r7, #24]
  uint32_t adc_value;

  /*select channel manualy without scan mode*/
  ADC_ChannelConfTypeDef sConfig = {0};
 80022d2:	f107 0308 	add.w	r3, r7, #8
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  sConfig.Channel = chanel;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(hadc1, &sConfig) != HAL_OK)
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	69b8      	ldr	r0, [r7, #24]
 80022f4:	f000 fef0 	bl	80030d8 <HAL_ADC_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <adc_read_channel+0x3e>
  {
    Error_Handler();
 80022fe:	f000 faa1 	bl	8002844 <Error_Handler>
  }

  /*start the adc*/
  if (HAL_ADC_Start(hadc1) != HAL_OK)
 8002302:	69b8      	ldr	r0, [r7, #24]
 8002304:	f000 fd68 	bl	8002dd8 <HAL_ADC_Start>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <adc_read_channel+0x4e>
  {
    Error_Handler();
 800230e:	f000 fa99 	bl	8002844 <Error_Handler>
  }
	if (HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY) == HAL_OK)
 8002312:	f04f 31ff 	mov.w	r1, #4294967295
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	f000 fe45 	bl	8002fa6 <HAL_ADC_PollForConversion>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d104      	bne.n	800232c <adc_read_channel+0x68>
	{
	  adc_value = HAL_ADC_GetValue(hadc1);  // Read value
 8002322:	69b8      	ldr	r0, [r7, #24]
 8002324:	f000 feca 	bl	80030bc <HAL_ADC_GetValue>
 8002328:	61f8      	str	r0, [r7, #28]
 800232a:	e001      	b.n	8002330 <adc_read_channel+0x6c>
	  // For debugging, you can output this via UART or LED logic
	}
  else
  {
    Error_Handler();
 800232c:	f000 fa8a 	bl	8002844 <Error_Handler>
  }
  HAL_ADC_Stop(hadc1);
 8002330:	69b8      	ldr	r0, [r7, #24]
 8002332:	f000 fe05 	bl	8002f40 <HAL_ADC_Stop>
  return adc_value;
 8002336:	69fb      	ldr	r3, [r7, #28]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <is_gaz_f>:
const char* is_gaz_f(uint8_t gaz)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
    if (gaz == 0)
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <is_gaz_f+0x14>
    {
        return "No gaz detected";
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <is_gaz_f+0x24>)
 8002352:	e000      	b.n	8002356 <is_gaz_f+0x16>
    }
    else
    {
        return "Gaz detected";
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <is_gaz_f+0x28>)
    }
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	0800b1d0 	.word	0x0800b1d0
 8002368:	0800b1e0 	.word	0x0800b1e0

0800236c <is_flame_f>:

const char* is_flame_f(uint8_t flame)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
    if (flame == 0)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <is_flame_f+0x14>
    {
        return "No flame detected";
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <is_flame_f+0x24>)
 800237e:	e000      	b.n	8002382 <is_flame_f+0x16>
    }
    else
    {
        return "Flame detected";
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <is_flame_f+0x28>)
    }
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	0800b1f0 	.word	0x0800b1f0
 8002394:	0800b204 	.word	0x0800b204

08002398 <HAL_GPIO_EXTI_Callback>:
uint8_t lcd_select = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
	lcd_select++;
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_GPIO_EXTI_Callback+0x24>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <HAL_GPIO_EXTI_Callback+0x24>)
 80023ac:	701a      	strb	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000294 	.word	0x20000294

080023c0 <EXTILine0_Config>:

static void EXTILine0_Config(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <EXTILine0_Config+0x54>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a11      	ldr	r2, [pc, #68]	@ (8002414 <EXTILine0_Config+0x54>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <EXTILine0_Config+0x54>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]

  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80023e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 80023ec:	2301      	movs	r3, #1
 80023ee:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	4808      	ldr	r0, [pc, #32]	@ (8002418 <EXTILine0_Config+0x58>)
 80023f6:	f001 fa41 	bl	800387c <HAL_GPIO_Init>

  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2102      	movs	r1, #2
 80023fe:	2006      	movs	r0, #6
 8002400:	f001 f973 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002404:	2006      	movs	r0, #6
 8002406:	f001 f98c 	bl	8003722 <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000

0800241c <HAL_UART_RxCpltCallback>:
uint8_t  uart_rx_buffer[RX_BUF_SIZE];     // buffer de reconstruction
uint8_t  rx_index = 0;
uint32_t co2 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1c      	ldr	r2, [pc, #112]	@ (800249c <HAL_UART_RxCpltCallback+0x80>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d131      	bne.n	8002492 <HAL_UART_RxCpltCallback+0x76>
    {
        // Stocke l'octet et avance l'index
        uart_rx_buffer[rx_index++] = uart_byte;
 800242e:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <HAL_UART_RxCpltCallback+0x84>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	b2d1      	uxtb	r1, r2
 8002436:	4a1a      	ldr	r2, [pc, #104]	@ (80024a0 <HAL_UART_RxCpltCallback+0x84>)
 8002438:	7011      	strb	r1, [r2, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_UART_RxCpltCallback+0x88>)
 800243e:	7819      	ldrb	r1, [r3, #0]
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_UART_RxCpltCallback+0x8c>)
 8002442:	5499      	strb	r1, [r3, r2]

        // Si fin de trame (\n) ou buffer plein :
        if (uart_byte == '\n' || rx_index >= RX_BUF_SIZE-1)
 8002444:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <HAL_UART_RxCpltCallback+0x88>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b0a      	cmp	r3, #10
 800244a:	d003      	beq.n	8002454 <HAL_UART_RxCpltCallback+0x38>
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_UART_RxCpltCallback+0x84>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b0e      	cmp	r3, #14
 8002452:	d919      	bls.n	8002488 <HAL_UART_RxCpltCallback+0x6c>
        {
            uart_rx_buffer[rx_index] = '\0';   // termine la chaîne
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_UART_RxCpltCallback+0x84>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_UART_RxCpltCallback+0x8c>)
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]
            co2 = atoi((char*)uart_rx_buffer); // convertit
 8002460:	4811      	ldr	r0, [pc, #68]	@ (80024a8 <HAL_UART_RxCpltCallback+0x8c>)
 8002462:	f004 fa83 	bl	800696c <atoi>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_UART_RxCpltCallback+0x90>)
 800246c:	601a      	str	r2, [r3, #0]

            // vidage pour prochaine réception
            rx_index = 0;
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <HAL_UART_RxCpltCallback+0x84>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buffer, 0, RX_BUF_SIZE);
 8002474:	2210      	movs	r2, #16
 8002476:	2100      	movs	r1, #0
 8002478:	480b      	ldr	r0, [pc, #44]	@ (80024a8 <HAL_UART_RxCpltCallback+0x8c>)
 800247a:	f005 fbcd 	bl	8007c18 <memset>

            // indication visuelle
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800247e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002482:	480b      	ldr	r0, [pc, #44]	@ (80024b0 <HAL_UART_RxCpltCallback+0x94>)
 8002484:	f001 fb97 	bl	8003bb6 <HAL_GPIO_TogglePin>
        }

        // Relance toujours la réception d’1 octet
        HAL_UART_Receive_IT(&huart2, &uart_byte, 1);
 8002488:	2201      	movs	r2, #1
 800248a:	4906      	ldr	r1, [pc, #24]	@ (80024a4 <HAL_UART_RxCpltCallback+0x88>)
 800248c:	4809      	ldr	r0, [pc, #36]	@ (80024b4 <HAL_UART_RxCpltCallback+0x98>)
 800248e:	f003 fadc 	bl	8005a4a <HAL_UART_Receive_IT>
    }
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40004400 	.word	0x40004400
 80024a0:	200002a8 	.word	0x200002a8
 80024a4:	20000295 	.word	0x20000295
 80024a8:	20000298 	.word	0x20000298
 80024ac:	200002ac 	.word	0x200002ac
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	200002f8 	.word	0x200002f8

080024b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024bc:	b08a      	sub	sp, #40	@ 0x28
 80024be:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c0:	f000 fbb0 	bl	8002c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c4:	f000 f956 	bl	8002774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c8:	f7ff fcbc 	bl	8001e44 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024cc:	f7fe fe00 	bl	80010d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80024d0:	f000 fb04 	bl	8002adc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024d4:	f7ff fd2e 	bl	8001f34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_lcds();
 80024d8:	f7ff fee2 	bl	80022a0 <init_lcds>
  lcd_clear(&lcd1);
 80024dc:	488c      	ldr	r0, [pc, #560]	@ (8002710 <main+0x258>)
 80024de:	f7ff fe13 	bl	8002108 <lcd_clear>

  uint32_t gaz_adc_value = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t flame_adc_value = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
	bmp280_init_default_params(&bmp280.params);
 80024ea:	488a      	ldr	r0, [pc, #552]	@ (8002714 <main+0x25c>)
 80024ec:	f7fe fe76 	bl	80011dc <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80024f0:	4b89      	ldr	r3, [pc, #548]	@ (8002718 <main+0x260>)
 80024f2:	2276      	movs	r2, #118	@ 0x76
 80024f4:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280.i2c = &hi2c1;
 80024f6:	4b88      	ldr	r3, [pc, #544]	@ (8002718 <main+0x260>)
 80024f8:	4a88      	ldr	r2, [pc, #544]	@ (800271c <main+0x264>)
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28

  	if (!bmp280_init(&bmp280, &bmp280.params))
 80024fc:	4985      	ldr	r1, [pc, #532]	@ (8002714 <main+0x25c>)
 80024fe:	4886      	ldr	r0, [pc, #536]	@ (8002718 <main+0x260>)
 8002500:	f7fe ffe8 	bl	80014d4 <bmp280_init>
 8002504:	4603      	mov	r3, r0
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <main+0x64>
  	{
  		Error_Handler();
 8002510:	f000 f998 	bl	8002844 <Error_Handler>
		HAL_Delay(2000);
 8002514:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002518:	f000 fbf6 	bl	8002d08 <HAL_Delay>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 800251c:	4b7e      	ldr	r3, [pc, #504]	@ (8002718 <main+0x260>)
 800251e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002522:	2b60      	cmp	r3, #96	@ 0x60
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	71fb      	strb	r3, [r7, #7]

	printf("BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <main+0x7e>
 8002532:	4b7b      	ldr	r3, [pc, #492]	@ (8002720 <main+0x268>)
 8002534:	e000      	b.n	8002538 <main+0x80>
 8002536:	4b7b      	ldr	r3, [pc, #492]	@ (8002724 <main+0x26c>)
 8002538:	4619      	mov	r1, r3
 800253a:	487b      	ldr	r0, [pc, #492]	@ (8002728 <main+0x270>)
 800253c:	f005 f9c6 	bl	80078cc <iprintf>
	EXTILine0_Config();
 8002540:	f7ff ff3e 	bl	80023c0 <EXTILine0_Config>
	// Lancement de la 1ʳᵉ réception 1 octet
	HAL_UART_Receive_IT(&huart2, &uart_byte, 1);
 8002544:	2201      	movs	r2, #1
 8002546:	4979      	ldr	r1, [pc, #484]	@ (800272c <main+0x274>)
 8002548:	4879      	ldr	r0, [pc, #484]	@ (8002730 <main+0x278>)
 800254a:	f003 fa7e 	bl	8005a4a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  
  gaz_adc_value = adc_read_channel(ADC_CHANNEL_4);
 800254e:	2004      	movs	r0, #4
 8002550:	f7ff feb8 	bl	80022c4 <adc_read_channel>
 8002554:	60f8      	str	r0, [r7, #12]
  flame_adc_value = adc_read_channel(ADC_CHANNEL_1);
 8002556:	2001      	movs	r0, #1
 8002558:	f7ff feb4 	bl	80022c4 <adc_read_channel>
 800255c:	60b8      	str	r0, [r7, #8]

	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 800255e:	e006      	b.n	800256e <main+0xb6>
	{
		printf("Temperature/pressure reading failed\n");
 8002560:	4874      	ldr	r0, [pc, #464]	@ (8002734 <main+0x27c>)
 8002562:	f005 fa1b 	bl	800799c <puts>
		HAL_Delay(2000);
 8002566:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800256a:	f000 fbcd 	bl	8002d08 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 800256e:	4b72      	ldr	r3, [pc, #456]	@ (8002738 <main+0x280>)
 8002570:	4a72      	ldr	r2, [pc, #456]	@ (800273c <main+0x284>)
 8002572:	4973      	ldr	r1, [pc, #460]	@ (8002740 <main+0x288>)
 8002574:	4868      	ldr	r0, [pc, #416]	@ (8002718 <main+0x260>)
 8002576:	f7ff fc19 	bl	8001dac <bmp280_read_float>
 800257a:	4603      	mov	r3, r0
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ec      	bne.n	8002560 <main+0xa8>
	}
	if(gaz_adc_value > 1000)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800258c:	d909      	bls.n	80025a2 <main+0xea>
	{

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800258e:	2201      	movs	r2, #1
 8002590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002594:	486b      	ldr	r0, [pc, #428]	@ (8002744 <main+0x28c>)
 8002596:	f001 faf5 	bl	8003b84 <HAL_GPIO_WritePin>
		is_gaz = 1;
 800259a:	4b6b      	ldr	r3, [pc, #428]	@ (8002748 <main+0x290>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	e008      	b.n	80025b4 <main+0xfc>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025a8:	4866      	ldr	r0, [pc, #408]	@ (8002744 <main+0x28c>)
 80025aa:	f001 faeb 	bl	8003b84 <HAL_GPIO_WritePin>
		is_gaz = 0;
 80025ae:	4b66      	ldr	r3, [pc, #408]	@ (8002748 <main+0x290>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
	}

	if(flame_adc_value < 1000)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ba:	d209      	bcs.n	80025d0 <main+0x118>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025c2:	4860      	ldr	r0, [pc, #384]	@ (8002744 <main+0x28c>)
 80025c4:	f001 fade 	bl	8003b84 <HAL_GPIO_WritePin>
		is_flame = 1;
 80025c8:	4b60      	ldr	r3, [pc, #384]	@ (800274c <main+0x294>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e008      	b.n	80025e2 <main+0x12a>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025d6:	485b      	ldr	r0, [pc, #364]	@ (8002744 <main+0x28c>)
 80025d8:	f001 fad4 	bl	8003b84 <HAL_GPIO_WritePin>
		is_flame = 0;
 80025dc:	4b5b      	ldr	r3, [pc, #364]	@ (800274c <main+0x294>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
	}

	switch (lcd_select)
 80025e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002750 <main+0x298>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d043      	beq.n	8002672 <main+0x1ba>
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	dc58      	bgt.n	80026a0 <main+0x1e8>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d026      	beq.n	8002640 <main+0x188>
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d154      	bne.n	80026a0 <main+0x1e8>
	{
	    case 1:
			LCD_PrintfAt(&lcd1,0, 0,"pres %.2f hpa",pressure/100);
 80025f6:	4b51      	ldr	r3, [pc, #324]	@ (800273c <main+0x284>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002754 <main+0x29c>
 8002600:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002604:	ee16 0a90 	vmov	r0, s13
 8002608:	f7fd ffa6 	bl	8000558 <__aeabi_f2d>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	e9cd 2300 	strd	r2, r3, [sp]
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <main+0x2a0>)
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	483d      	ldr	r0, [pc, #244]	@ (8002710 <main+0x258>)
 800261c:	f7ff fe08 	bl	8002230 <LCD_PrintfAt>
			LCD_PrintfAt(&lcd1,0, 1,"temp %.2f C",temperature);
 8002620:	4b47      	ldr	r3, [pc, #284]	@ (8002740 <main+0x288>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff97 	bl	8000558 <__aeabi_f2d>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	e9cd 2300 	strd	r2, r3, [sp]
 8002632:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <main+0x2a4>)
 8002634:	2201      	movs	r2, #1
 8002636:	2100      	movs	r1, #0
 8002638:	4835      	ldr	r0, [pc, #212]	@ (8002710 <main+0x258>)
 800263a:	f7ff fdf9 	bl	8002230 <LCD_PrintfAt>
	        break;
 800263e:	e032      	b.n	80026a6 <main+0x1ee>
	    case 0:
			LCD_PrintfAt(&lcd1,0, 0,"hum %.2f\%",humidity);
 8002640:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <main+0x280>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff87 	bl	8000558 <__aeabi_f2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9cd 2300 	strd	r2, r3, [sp]
 8002652:	4b43      	ldr	r3, [pc, #268]	@ (8002760 <main+0x2a8>)
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	482d      	ldr	r0, [pc, #180]	@ (8002710 <main+0x258>)
 800265a:	f7ff fde9 	bl	8002230 <LCD_PrintfAt>
			LCD_PrintfAt(&lcd1,0, 1,"CO2 %d ppm",co2);
 800265e:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <main+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4b40      	ldr	r3, [pc, #256]	@ (8002768 <main+0x2b0>)
 8002666:	2201      	movs	r2, #1
 8002668:	2100      	movs	r1, #0
 800266a:	4829      	ldr	r0, [pc, #164]	@ (8002710 <main+0x258>)
 800266c:	f7ff fde0 	bl	8002230 <LCD_PrintfAt>
	        break;
 8002670:	e019      	b.n	80026a6 <main+0x1ee>
	    case 2:
			LCD_PrintfAt(&lcd1,0, 0,is_gaz_f(is_gaz));
 8002672:	4b35      	ldr	r3, [pc, #212]	@ (8002748 <main+0x290>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fe62 	bl	8002340 <is_gaz_f>
 800267c:	4603      	mov	r3, r0
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	4823      	ldr	r0, [pc, #140]	@ (8002710 <main+0x258>)
 8002684:	f7ff fdd4 	bl	8002230 <LCD_PrintfAt>
			LCD_PrintfAt(&lcd1,0, 1,is_flame_f(is_flame));
 8002688:	4b30      	ldr	r3, [pc, #192]	@ (800274c <main+0x294>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fe6d 	bl	800236c <is_flame_f>
 8002692:	4603      	mov	r3, r0
 8002694:	2201      	movs	r2, #1
 8002696:	2100      	movs	r1, #0
 8002698:	481d      	ldr	r0, [pc, #116]	@ (8002710 <main+0x258>)
 800269a:	f7ff fdc9 	bl	8002230 <LCD_PrintfAt>
	        break;
 800269e:	e002      	b.n	80026a6 <main+0x1ee>

	    default:
	    	lcd_select = 0;
 80026a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <main+0x298>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
	}


   printf("{\"pressure\": %.2f, \"temperature\": %.2f, \"humidity\": %.2f, \"gaz\": %u, \"flame\": %u}\n",
 80026a6:	4b25      	ldr	r3, [pc, #148]	@ (800273c <main+0x284>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff54 	bl	8000558 <__aeabi_f2d>
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	4b2d      	ldr	r3, [pc, #180]	@ (800276c <main+0x2b4>)
 80026b6:	f7fe f8d1 	bl	800085c <__aeabi_ddiv>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4690      	mov	r8, r2
 80026c0:	4699      	mov	r9, r3
 80026c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <main+0x288>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff46 	bl	8000558 <__aeabi_f2d>
 80026cc:	4604      	mov	r4, r0
 80026ce:	460d      	mov	r5, r1
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <main+0x280>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff3f 	bl	8000558 <__aeabi_f2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	491a      	ldr	r1, [pc, #104]	@ (8002748 <main+0x290>)
 80026e0:	7809      	ldrb	r1, [r1, #0]
 80026e2:	4608      	mov	r0, r1
 80026e4:	4919      	ldr	r1, [pc, #100]	@ (800274c <main+0x294>)
 80026e6:	7809      	ldrb	r1, [r1, #0]
 80026e8:	9105      	str	r1, [sp, #20]
 80026ea:	9004      	str	r0, [sp, #16]
 80026ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026f0:	e9cd 4500 	strd	r4, r5, [sp]
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	481d      	ldr	r0, [pc, #116]	@ (8002770 <main+0x2b8>)
 80026fa:	f005 f8e7 	bl	80078cc <iprintf>
	       pressure/100.0, temperature, humidity, is_gaz, is_flame);

	HAL_Delay(1000);
 80026fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002702:	f000 fb01 	bl	8002d08 <HAL_Delay>
	lcd_clear(&lcd1);
 8002706:	4802      	ldr	r0, [pc, #8]	@ (8002710 <main+0x258>)
 8002708:	f7ff fcfe 	bl	8002108 <lcd_clear>
  gaz_adc_value = adc_read_channel(ADC_CHANNEL_4);
 800270c:	e71f      	b.n	800254e <main+0x96>
 800270e:	bf00      	nop
 8002710:	2000028c 	.word	0x2000028c
 8002714:	200002dc 	.word	0x200002dc
 8002718:	200002b0 	.word	0x200002b0
 800271c:	20000238 	.word	0x20000238
 8002720:	0800b214 	.word	0x0800b214
 8002724:	0800b21c 	.word	0x0800b21c
 8002728:	0800b224 	.word	0x0800b224
 800272c:	20000295 	.word	0x20000295
 8002730:	200002f8 	.word	0x200002f8
 8002734:	0800b238 	.word	0x0800b238
 8002738:	200002ec 	.word	0x200002ec
 800273c:	200002e4 	.word	0x200002e4
 8002740:	200002e8 	.word	0x200002e8
 8002744:	40020c00 	.word	0x40020c00
 8002748:	200002f0 	.word	0x200002f0
 800274c:	200002f1 	.word	0x200002f1
 8002750:	20000294 	.word	0x20000294
 8002754:	42c80000 	.word	0x42c80000
 8002758:	0800b25c 	.word	0x0800b25c
 800275c:	0800b26c 	.word	0x0800b26c
 8002760:	0800b278 	.word	0x0800b278
 8002764:	200002ac 	.word	0x200002ac
 8002768:	0800b284 	.word	0x0800b284
 800276c:	40590000 	.word	0x40590000
 8002770:	0800b290 	.word	0x0800b290

08002774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b094      	sub	sp, #80	@ 0x50
 8002778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800277a:	f107 0320 	add.w	r3, r7, #32
 800277e:	2230      	movs	r2, #48	@ 0x30
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f005 fa48 	bl	8007c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	4b27      	ldr	r3, [pc, #156]	@ (800283c <SystemClock_Config+0xc8>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4a26      	ldr	r2, [pc, #152]	@ (800283c <SystemClock_Config+0xc8>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a8:	4b24      	ldr	r3, [pc, #144]	@ (800283c <SystemClock_Config+0xc8>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b4:	2300      	movs	r3, #0
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <SystemClock_Config+0xcc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <SystemClock_Config+0xcc>)
 80027be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <SystemClock_Config+0xcc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027d8:	2310      	movs	r3, #16
 80027da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027dc:	2302      	movs	r3, #2
 80027de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027e0:	2300      	movs	r3, #0
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027e4:	2308      	movs	r3, #8
 80027e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80027e8:	2332      	movs	r3, #50	@ 0x32
 80027ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027ec:	2304      	movs	r3, #4
 80027ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80027f0:	2308      	movs	r3, #8
 80027f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f4:	f107 0320 	add.w	r3, r7, #32
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 fbb3 	bl	8004f64 <HAL_RCC_OscConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002804:	f000 f81e 	bl	8002844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002808:	230f      	movs	r3, #15
 800280a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800280c:	2302      	movs	r3, #2
 800280e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002814:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fe15 	bl	8005454 <HAL_RCC_ClockConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002830:	f000 f808 	bl	8002844 <Error_Handler>
  }
}
 8002834:	bf00      	nop
 8002836:	3750      	adds	r7, #80	@ 0x50
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	40007000 	.word	0x40007000

08002844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800284e:	4802      	ldr	r0, [pc, #8]	@ (8002858 <Error_Handler+0x14>)
 8002850:	f001 f998 	bl	8003b84 <HAL_GPIO_WritePin>
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <Error_Handler+0x10>
 8002858:	40020c00 	.word	0x40020c00

0800285c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_MspInit+0x4c>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	4a0f      	ldr	r2, [pc, #60]	@ (80028a8 <HAL_MspInit+0x4c>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002870:	6453      	str	r3, [r2, #68]	@ 0x44
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_MspInit+0x4c>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_MspInit+0x4c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	4a08      	ldr	r2, [pc, #32]	@ (80028a8 <HAL_MspInit+0x4c>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	@ 0x40
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_MspInit+0x4c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800289a:	2007      	movs	r0, #7
 800289c:	f000 ff1a 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800

080028ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <NMI_Handler+0x4>

080028b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <MemManage_Handler+0x4>

080028c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <BusFault_Handler+0x4>

080028cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <UsageFault_Handler+0x4>

080028d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002902:	f000 f9e1 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}

0800290a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800290e:	2001      	movs	r0, #1
 8002910:	f001 f96c 	bl	8003bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800291c:	4802      	ldr	r0, [pc, #8]	@ (8002928 <USART2_IRQHandler+0x10>)
 800291e:	f003 f8b9 	bl	8005a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200002f8 	.word	0x200002f8

0800292c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_kill>:

int _kill(int pid, int sig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002946:	f005 f9b9 	bl	8007cbc <__errno>
 800294a:	4603      	mov	r3, r0
 800294c:	2216      	movs	r2, #22
 800294e:	601a      	str	r2, [r3, #0]
  return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_exit>:

void _exit (int status)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffe7 	bl	800293c <_kill>
  while (1) {}    /* Make sure we hang here */
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <_exit+0x12>

08002972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e00a      	b.n	800299a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002984:	f3af 8000 	nop.w
 8002988:	4601      	mov	r1, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	60ba      	str	r2, [r7, #8]
 8002990:	b2ca      	uxtb	r2, r1
 8002992:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	dbf0      	blt.n	8002984 <_read+0x12>
  }

  return len;
 80029a2:	687b      	ldr	r3, [r7, #4]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	e009      	b.n	80029d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	60ba      	str	r2, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fc58 	bl	800227c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3301      	adds	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dbf1      	blt.n	80029be <_write+0x12>
  }
  return len;
 80029da:	687b      	ldr	r3, [r7, #4]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_close>:

int _close(int file)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a0c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_isatty>:

int _isatty(int file)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a54:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <_sbrk+0x5c>)
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <_sbrk+0x60>)
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a60:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a68:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <_sbrk+0x64>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <_sbrk+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a7c:	f005 f91e 	bl	8007cbc <__errno>
 8002a80:	4603      	mov	r3, r0
 8002a82:	220c      	movs	r2, #12
 8002a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e009      	b.n	8002aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a92:	4b07      	ldr	r3, [pc, #28]	@ (8002ab0 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <_sbrk+0x64>)
 8002a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20020000 	.word	0x20020000
 8002aac:	00000400 	.word	0x00000400
 8002ab0:	200002f4 	.word	0x200002f4
 8002ab4:	20000490 	.word	0x20000490

08002ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <SystemInit+0x20>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	4a05      	ldr	r2, [pc, #20]	@ (8002ad8 <SystemInit+0x20>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <MX_USART2_UART_Init+0x50>)
 8002ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ae6:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b02:	220c      	movs	r2, #12
 8002b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b12:	4805      	ldr	r0, [pc, #20]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b14:	f002 febe 	bl	8005894 <HAL_UART_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b1e:	f7ff fe91 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200002f8 	.word	0x200002f8
 8002b2c:	40004400 	.word	0x40004400

08002b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc4 <HAL_UART_MspInit+0x94>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d133      	bne.n	8002bba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b62:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	4a14      	ldr	r2, [pc, #80]	@ (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4809      	ldr	r0, [pc, #36]	@ (8002bcc <HAL_UART_MspInit+0x9c>)
 8002ba6:	f000 fe69 	bl	800387c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2103      	movs	r1, #3
 8002bae:	2026      	movs	r0, #38	@ 0x26
 8002bb0:	f000 fd9b 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bb4:	2026      	movs	r0, #38	@ 0x26
 8002bb6:	f000 fdb4 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3728      	adds	r7, #40	@ 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd4:	480d      	ldr	r0, [pc, #52]	@ (8002c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bd6:	490e      	ldr	r1, [pc, #56]	@ (8002c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bec:	4c0b      	ldr	r4, [pc, #44]	@ (8002c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bfa:	f7ff ff5d 	bl	8002ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bfe:	f005 f863 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c02:	f7ff fc59 	bl	80024b8 <main>
  bx  lr    
 8002c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c10:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c14:	0800b730 	.word	0x0800b730
  ldr r2, =_sbss
 8002c18:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c1c:	20000490 	.word	0x20000490

08002c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c20:	e7fe      	b.n	8002c20 <ADC_IRQHandler>
	...

08002c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c28:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <HAL_Init+0x40>)
 8002c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c34:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <HAL_Init+0x40>)
 8002c3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <HAL_Init+0x40>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fd41 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f000 f808 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fe00 	bl	800285c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fd59 	bl	800373e <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f000 fd21 	bl	80036ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	@ (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	20000340 	.word	0x20000340

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000340 	.word	0x20000340

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000008 	.word	0x20000008

08002d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e033      	b.n	8002dce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe f9e6 	bl	8001140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d96:	f023 0302 	bic.w	r3, r3, #2
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 faca 	bl	800333c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dbe:	e001      	b.n	8002dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_Start+0x1a>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e097      	b.n	8002f22 <HAL_ADC_Start+0x14a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d018      	beq.n	8002e3a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e18:	4b45      	ldr	r3, [pc, #276]	@ (8002f30 <HAL_ADC_Start+0x158>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a45      	ldr	r2, [pc, #276]	@ (8002f34 <HAL_ADC_Start+0x15c>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9a      	lsrs	r2, r3, #18
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e2c:	e002      	b.n	8002e34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d15f      	bne.n	8002f08 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e86:	d106      	bne.n	8002e96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8c:	f023 0206 	bic.w	r2, r3, #6
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea4:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <HAL_ADC_Start+0x160>)
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d129      	bne.n	8002f20 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	e020      	b.n	8002f20 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a16      	ldr	r2, [pc, #88]	@ (8002f3c <HAL_ADC_Start+0x164>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d11b      	bne.n	8002f20 <HAL_ADC_Start+0x148>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d114      	bne.n	8002f20 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	e00b      	b.n	8002f20 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	f043 0210 	orr.w	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000
 8002f34:	431bde83 	.word	0x431bde83
 8002f38:	40012300 	.word	0x40012300
 8002f3c:	40012000 	.word	0x40012000

08002f40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Stop+0x16>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e021      	b.n	8002f9a <HAL_ADC_Stop+0x5a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d113      	bne.n	8002fec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd2:	d10b      	bne.n	8002fec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e063      	b.n	80030b4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fec:	f7ff fe80 	bl	8002cf0 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ff2:	e021      	b.n	8003038 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d01d      	beq.n	8003038 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_ADC_PollForConversion+0x6c>
 8003002:	f7ff fe75 	bl	8002cf0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d212      	bcs.n	8003038 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d00b      	beq.n	8003038 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e03d      	b.n	80030b4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d1d6      	bne.n	8002ff4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f06f 0212 	mvn.w	r2, #18
 800304e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d123      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11f      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d111      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e113      	b.n	800331c <HAL_ADC_ConfigChannel+0x244>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b09      	cmp	r3, #9
 8003102:	d925      	bls.n	8003150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	3b1e      	subs	r3, #30
 800311a:	2207      	movs	r2, #7
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43da      	mvns	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	400a      	ands	r2, r1
 8003128:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68d9      	ldr	r1, [r3, #12]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	4618      	mov	r0, r3
 800313c:	4603      	mov	r3, r0
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4403      	add	r3, r0
 8003142:	3b1e      	subs	r3, #30
 8003144:	409a      	lsls	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	e022      	b.n	8003196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6919      	ldr	r1, [r3, #16]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	2207      	movs	r2, #7
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	400a      	ands	r2, r1
 8003172:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6919      	ldr	r1, [r3, #16]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	4618      	mov	r0, r3
 8003186:	4603      	mov	r3, r0
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4403      	add	r3, r0
 800318c:	409a      	lsls	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d824      	bhi.n	80031e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b05      	subs	r3, #5
 80031b0:	221f      	movs	r2, #31
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	400a      	ands	r2, r1
 80031be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4618      	mov	r0, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b05      	subs	r3, #5
 80031da:	fa00 f203 	lsl.w	r2, r0, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80031e6:	e04c      	b.n	8003282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d824      	bhi.n	800323a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	3b23      	subs	r3, #35	@ 0x23
 8003202:	221f      	movs	r2, #31
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43da      	mvns	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	400a      	ands	r2, r1
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	4618      	mov	r0, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	3b23      	subs	r3, #35	@ 0x23
 800322c:	fa00 f203 	lsl.w	r2, r0, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
 8003238:	e023      	b.n	8003282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	3b41      	subs	r3, #65	@ 0x41
 800324c:	221f      	movs	r2, #31
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	400a      	ands	r2, r1
 800325a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	4618      	mov	r0, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b41      	subs	r3, #65	@ 0x41
 8003276:	fa00 f203 	lsl.w	r2, r0, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003282:	4b29      	ldr	r3, [pc, #164]	@ (8003328 <HAL_ADC_ConfigChannel+0x250>)
 8003284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a28      	ldr	r2, [pc, #160]	@ (800332c <HAL_ADC_ConfigChannel+0x254>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10f      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b12      	cmp	r3, #18
 8003296:	d10b      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	@ (800332c <HAL_ADC_ConfigChannel+0x254>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d12b      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x23a>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <HAL_ADC_ConfigChannel+0x258>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x1f4>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b11      	cmp	r3, #17
 80032ca:	d122      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a11      	ldr	r2, [pc, #68]	@ (8003330 <HAL_ADC_ConfigChannel+0x258>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d111      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <HAL_ADC_ConfigChannel+0x25c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a11      	ldr	r2, [pc, #68]	@ (8003338 <HAL_ADC_ConfigChannel+0x260>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9a      	lsrs	r2, r3, #18
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003304:	e002      	b.n	800330c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3b01      	subs	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f9      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012300 	.word	0x40012300
 800332c:	40012000 	.word	0x40012000
 8003330:	10000012 	.word	0x10000012
 8003334:	20000000 	.word	0x20000000
 8003338:	431bde83 	.word	0x431bde83

0800333c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003344:	4b79      	ldr	r3, [pc, #484]	@ (800352c <ADC_Init+0x1f0>)
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	021a      	lsls	r2, r3, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6899      	ldr	r1, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	4a58      	ldr	r2, [pc, #352]	@ (8003530 <ADC_Init+0x1f4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d022      	beq.n	800341a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6899      	ldr	r1, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6899      	ldr	r1, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e00f      	b.n	800343a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003438:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0202 	bic.w	r2, r2, #2
 8003448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7e1b      	ldrb	r3, [r3, #24]
 8003454:	005a      	lsls	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003476:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	3b01      	subs	r3, #1
 8003494:	035a      	lsls	r2, r3, #13
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	e007      	b.n	80034b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	051a      	lsls	r2, r3, #20
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034f2:	025a      	lsls	r2, r3, #9
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6899      	ldr	r1, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	029a      	lsls	r2, r3, #10
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40012300 	.word	0x40012300
 8003530:	0f000001 	.word	0x0f000001

08003534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003544:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003550:	4013      	ands	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800355c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003566:	4a04      	ldr	r2, [pc, #16]	@ (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	60d3      	str	r3, [r2, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <__NVIC_GetPriorityGrouping+0x18>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 0307 	and.w	r3, r3, #7
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db0b      	blt.n	80035c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4907      	ldr	r1, [pc, #28]	@ (80035d0 <__NVIC_EnableIRQ+0x38>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2001      	movs	r0, #1
 80035ba:	fa00 f202 	lsl.w	r2, r0, r2
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	@ (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	@ (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	@ 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	@ 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a0:	d301      	bcc.n	80036a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00f      	b.n	80036c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <SysTick_Config+0x40>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ae:	210f      	movs	r1, #15
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	f7ff ff8e 	bl	80035d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <SysTick_Config+0x40>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036be:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <SysTick_Config+0x40>)
 80036c0:	2207      	movs	r2, #7
 80036c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	e000e010 	.word	0xe000e010

080036d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff29 	bl	8003534 <__NVIC_SetPriorityGrouping>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036fc:	f7ff ff3e 	bl	800357c <__NVIC_GetPriorityGrouping>
 8003700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7ff ff8e 	bl	8003628 <NVIC_EncodePriority>
 800370c:	4602      	mov	r2, r0
 800370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff5d 	bl	80035d4 <__NVIC_SetPriority>
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff31 	bl	8003598 <__NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffa2 	bl	8003690 <SysTick_Config>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003762:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff fac4 	bl	8002cf0 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d008      	beq.n	8003788 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2280      	movs	r2, #128	@ 0x80
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e052      	b.n	800382e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0216 	bic.w	r2, r2, #22
 8003796:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <HAL_DMA_Abort+0x62>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0208 	bic.w	r2, r2, #8
 80037c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d8:	e013      	b.n	8003802 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037da:	f7ff fa89 	bl	8002cf0 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	d90c      	bls.n	8003802 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e015      	b.n	800382e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e4      	bne.n	80037da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	223f      	movs	r2, #63	@ 0x3f
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d004      	beq.n	8003854 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2280      	movs	r2, #128	@ 0x80
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e00c      	b.n	800386e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2205      	movs	r2, #5
 8003858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e159      	b.n	8003b4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8148 	bne.w	8003b46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d005      	beq.n	80038ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d017      	beq.n	800396c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d123      	bne.n	80039c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a2 	beq.w	8003b46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b57      	ldr	r3, [pc, #348]	@ (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	4a56      	ldr	r2, [pc, #344]	@ (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a12:	4b54      	ldr	r3, [pc, #336]	@ (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1e:	4a52      	ldr	r2, [pc, #328]	@ (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a49      	ldr	r2, [pc, #292]	@ (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d019      	beq.n	8003a7e <HAL_GPIO_Init+0x202>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a48      	ldr	r2, [pc, #288]	@ (8003b70 <HAL_GPIO_Init+0x2f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x1fe>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a47      	ldr	r2, [pc, #284]	@ (8003b74 <HAL_GPIO_Init+0x2f8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00d      	beq.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a46      	ldr	r2, [pc, #280]	@ (8003b78 <HAL_GPIO_Init+0x2fc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <HAL_GPIO_Init+0x1f6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a45      	ldr	r2, [pc, #276]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_GPIO_Init+0x1f2>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	e008      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a6e:	2307      	movs	r3, #7
 8003a70:	e006      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e004      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	f002 0203 	and.w	r2, r2, #3
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	4093      	lsls	r3, r2
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a90:	4935      	ldr	r1, [pc, #212]	@ (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9e:	4b38      	ldr	r3, [pc, #224]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aec:	4a24      	ldr	r2, [pc, #144]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af2:	4b23      	ldr	r3, [pc, #140]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b16:	4a1a      	ldr	r2, [pc, #104]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b40:	4a0f      	ldr	r2, [pc, #60]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	f67f aea2 	bls.w	8003898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3724      	adds	r7, #36	@ 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	40020800 	.word	0x40020800
 8003b78:	40020c00 	.word	0x40020c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
 8003b90:	4613      	mov	r3, r2
 8003b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b94:	787b      	ldrb	r3, [r7, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ba0:	e003      	b.n	8003baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	041a      	lsls	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	619a      	str	r2, [r3, #24]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bc8:	887a      	ldrh	r2, [r7, #2]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	041a      	lsls	r2, r3, #16
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	887b      	ldrh	r3, [r7, #2]
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bf6:	4b08      	ldr	r3, [pc, #32]	@ (8003c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c02:	4a05      	ldr	r2, [pc, #20]	@ (8003c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fbc4 	bl	8002398 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40013c00 	.word	0x40013c00

08003c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e12b      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fe f9a4 	bl	8001f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	@ 0x24
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c80:	f001 fde0 	bl	8005844 <HAL_RCC_GetPCLK1Freq>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a81      	ldr	r2, [pc, #516]	@ (8003e90 <HAL_I2C_Init+0x274>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d807      	bhi.n	8003ca0 <HAL_I2C_Init+0x84>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a80      	ldr	r2, [pc, #512]	@ (8003e94 <HAL_I2C_Init+0x278>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bf94      	ite	ls
 8003c98:	2301      	movls	r3, #1
 8003c9a:	2300      	movhi	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e006      	b.n	8003cae <HAL_I2C_Init+0x92>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a7d      	ldr	r2, [pc, #500]	@ (8003e98 <HAL_I2C_Init+0x27c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	bf94      	ite	ls
 8003ca8:	2301      	movls	r3, #1
 8003caa:	2300      	movhi	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0e7      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a78      	ldr	r2, [pc, #480]	@ (8003e9c <HAL_I2C_Init+0x280>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0c9b      	lsrs	r3, r3, #18
 8003cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e90 <HAL_I2C_Init+0x274>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d802      	bhi.n	8003cf0 <HAL_I2C_Init+0xd4>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3301      	adds	r3, #1
 8003cee:	e009      	b.n	8003d04 <HAL_I2C_Init+0xe8>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a69      	ldr	r2, [pc, #420]	@ (8003ea0 <HAL_I2C_Init+0x284>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	3301      	adds	r3, #1
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	495c      	ldr	r1, [pc, #368]	@ (8003e90 <HAL_I2C_Init+0x274>)
 8003d20:	428b      	cmp	r3, r1
 8003d22:	d819      	bhi.n	8003d58 <HAL_I2C_Init+0x13c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e59      	subs	r1, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d38:	400b      	ands	r3, r1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_I2C_Init+0x138>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e59      	subs	r1, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	e051      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e04f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <HAL_I2C_Init+0x168>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e012      	b.n	8003daa <HAL_I2C_Init+0x18e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Init+0x196>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_I2C_Init+0x1bc>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e58      	subs	r0, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dd6:	e00f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	6809      	ldr	r1, [r1, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6911      	ldr	r1, [r2, #16]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	000186a0 	.word	0x000186a0
 8003e94:	001e847f 	.word	0x001e847f
 8003e98:	003d08ff 	.word	0x003d08ff
 8003e9c:	431bde83 	.word	0x431bde83
 8003ea0:	10624dd3 	.word	0x10624dd3

08003ea4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	817b      	strh	r3, [r7, #10]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb8:	f7fe ff1a 	bl	8002cf0 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	f040 80e0 	bne.w	800408c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2319      	movs	r3, #25
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4970      	ldr	r1, [pc, #448]	@ (8004098 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fe0e 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0d3      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2C_Master_Transmit+0x50>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0cc      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d007      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2221      	movs	r2, #33	@ 0x21
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2210      	movs	r2, #16
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	893a      	ldrh	r2, [r7, #8]
 8003f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a50      	ldr	r2, [pc, #320]	@ (800409c <HAL_I2C_Master_Transmit+0x1f8>)
 8003f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f5c:	8979      	ldrh	r1, [r7, #10]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fbc8 	bl	80046f8 <I2C_MasterRequestWrite>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08d      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f88:	e066      	b.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fecc 	bl	8004d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e06b      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d11b      	bne.n	800402c <HAL_I2C_Master_Transmit+0x188>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	6a39      	ldr	r1, [r7, #32]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fec3 	bl	8004dbc <I2C_WaitOnBTFFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004052:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01a      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d194      	bne.n	8003f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	00100002 	.word	0x00100002
 800409c:	ffff0000 	.word	0xffff0000

080040a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ba:	f7fe fe19 	bl	8002cf0 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	f040 80d9 	bne.w	8004280 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2319      	movs	r3, #25
 80040d4:	2201      	movs	r2, #1
 80040d6:	496d      	ldr	r1, [pc, #436]	@ (800428c <HAL_I2C_Mem_Write+0x1ec>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fd0d 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0cc      	b.n	8004282 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_I2C_Mem_Write+0x56>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0c5      	b.n	8004282 <HAL_I2C_Mem_Write+0x1e2>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d007      	beq.n	800411c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800412a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2221      	movs	r2, #33	@ 0x21
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2240      	movs	r2, #64	@ 0x40
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800414c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a4d      	ldr	r2, [pc, #308]	@ (8004290 <HAL_I2C_Mem_Write+0x1f0>)
 800415c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800415e:	88f8      	ldrh	r0, [r7, #6]
 8004160:	893a      	ldrh	r2, [r7, #8]
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4603      	mov	r3, r0
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fb44 	bl	80047fc <I2C_RequestMemoryWrite>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d052      	beq.n	8004220 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e081      	b.n	8004282 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fdd2 	bl	8004d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	2b04      	cmp	r3, #4
 8004194:	d107      	bne.n	80041a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e06b      	b.n	8004282 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	781a      	ldrb	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d11b      	bne.n	8004220 <HAL_I2C_Mem_Write+0x180>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d017      	beq.n	8004220 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1aa      	bne.n	800417e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fdc5 	bl	8004dbc <I2C_WaitOnBTFFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00d      	beq.n	8004254 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	2b04      	cmp	r3, #4
 800423e:	d107      	bne.n	8004250 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e016      	b.n	8004282 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e000      	b.n	8004282 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
  }
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	00100002 	.word	0x00100002
 8004290:	ffff0000 	.word	0xffff0000

08004294 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08c      	sub	sp, #48	@ 0x30
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ae:	f7fe fd1f 	bl	8002cf0 <HAL_GetTick>
 80042b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b20      	cmp	r3, #32
 80042be:	f040 8214 	bne.w	80046ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	2319      	movs	r3, #25
 80042c8:	2201      	movs	r2, #1
 80042ca:	497b      	ldr	r1, [pc, #492]	@ (80044b8 <HAL_I2C_Mem_Read+0x224>)
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fc13 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
 80042da:	e207      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_I2C_Mem_Read+0x56>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e200      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d007      	beq.n	8004310 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800431e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2222      	movs	r2, #34	@ 0x22
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2240      	movs	r2, #64	@ 0x40
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004340:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a5b      	ldr	r2, [pc, #364]	@ (80044bc <HAL_I2C_Mem_Read+0x228>)
 8004350:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004352:	88f8      	ldrh	r0, [r7, #6]
 8004354:	893a      	ldrh	r2, [r7, #8]
 8004356:	8979      	ldrh	r1, [r7, #10]
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	4603      	mov	r3, r0
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fae0 	bl	8004928 <I2C_RequestMemoryRead>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e1bc      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	2b00      	cmp	r3, #0
 8004378:	d113      	bne.n	80043a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437a:	2300      	movs	r3, #0
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e190      	b.n	80046c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d11b      	bne.n	80043e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e170      	b.n	80046c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d11b      	bne.n	8004422 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	e150      	b.n	80046c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004438:	e144      	b.n	80046c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443e:	2b03      	cmp	r3, #3
 8004440:	f200 80f1 	bhi.w	8004626 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	2b01      	cmp	r3, #1
 800444a:	d123      	bne.n	8004494 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fcfb 	bl	8004e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e145      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004492:	e117      	b.n	80046c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004498:	2b02      	cmp	r3, #2
 800449a:	d14e      	bne.n	800453a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	2200      	movs	r2, #0
 80044a4:	4906      	ldr	r1, [pc, #24]	@ (80044c0 <HAL_I2C_Mem_Read+0x22c>)
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fb26 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e11a      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
 80044b6:	bf00      	nop
 80044b8:	00100002 	.word	0x00100002
 80044bc:	ffff0000 	.word	0xffff0000
 80044c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004538:	e0c4      	b.n	80046c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	2200      	movs	r2, #0
 8004542:	496c      	ldr	r1, [pc, #432]	@ (80046f4 <HAL_I2C_Mem_Read+0x460>)
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fad7 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0cb      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459c:	2200      	movs	r2, #0
 800459e:	4955      	ldr	r1, [pc, #340]	@ (80046f4 <HAL_I2C_Mem_Read+0x460>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 faa9 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09d      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004624:	e04e      	b.n	80046c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004628:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fc0e 	bl	8004e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e058      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d124      	bne.n	80046c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	2b03      	cmp	r3, #3
 8004680:	d107      	bne.n	8004692 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004690:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f aeb6 	bne.w	800443a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	00010004 	.word	0x00010004

080046f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	460b      	mov	r3, r1
 8004706:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d006      	beq.n	8004722 <I2C_MasterRequestWrite+0x2a>
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d003      	beq.n	8004722 <I2C_MasterRequestWrite+0x2a>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004720:	d108      	bne.n	8004734 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e00b      	b.n	800474c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004738:	2b12      	cmp	r3, #18
 800473a:	d107      	bne.n	800474c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f9cd 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004772:	d103      	bne.n	800477c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e035      	b.n	80047ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004788:	d108      	bne.n	800479c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004798:	611a      	str	r2, [r3, #16]
 800479a:	e01b      	b.n	80047d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800479c:	897b      	ldrh	r3, [r7, #10]
 800479e:	11db      	asrs	r3, r3, #7
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0306 	and.w	r3, r3, #6
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f063 030f 	orn	r3, r3, #15
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	490e      	ldr	r1, [pc, #56]	@ (80047f4 <I2C_MasterRequestWrite+0xfc>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa16 	bl	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e010      	b.n	80047ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047ca:	897b      	ldrh	r3, [r7, #10]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4907      	ldr	r1, [pc, #28]	@ (80047f8 <I2C_MasterRequestWrite+0x100>)
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fa06 	bl	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	00010008 	.word	0x00010008
 80047f8:	00010002 	.word	0x00010002

080047fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4603      	mov	r3, r0
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	460b      	mov	r3, r1
 8004810:	813b      	strh	r3, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004824:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	2200      	movs	r2, #0
 800482e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f960 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800484c:	d103      	bne.n	8004856 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004854:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e05f      	b.n	800491a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004868:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	6a3a      	ldr	r2, [r7, #32]
 800486e:	492d      	ldr	r1, [pc, #180]	@ (8004924 <I2C_RequestMemoryWrite+0x128>)
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f9bb 	bl	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e04c      	b.n	800491a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004898:	6a39      	ldr	r1, [r7, #32]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fa46 	bl	8004d2c <I2C_WaitOnTXEFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d107      	bne.n	80048be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e02b      	b.n	800491a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048c8:	893b      	ldrh	r3, [r7, #8]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	611a      	str	r2, [r3, #16]
 80048d2:	e021      	b.n	8004918 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048d4:	893b      	ldrh	r3, [r7, #8]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	b29b      	uxth	r3, r3
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e4:	6a39      	ldr	r1, [r7, #32]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fa20 	bl	8004d2c <I2C_WaitOnTXEFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d107      	bne.n	800490a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004908:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e005      	b.n	800491a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800490e:	893b      	ldrh	r3, [r7, #8]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	00010002 	.word	0x00010002

08004928 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4603      	mov	r3, r0
 8004938:	817b      	strh	r3, [r7, #10]
 800493a:	460b      	mov	r3, r1
 800493c:	813b      	strh	r3, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004950:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	2200      	movs	r2, #0
 800496a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8c2 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004988:	d103      	bne.n	8004992 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004990:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0aa      	b.n	8004aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	4952      	ldr	r1, [pc, #328]	@ (8004af4 <I2C_RequestMemoryRead+0x1cc>)
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f91d 	bl	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e097      	b.n	8004aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d4:	6a39      	ldr	r1, [r7, #32]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f9a8 	bl	8004d2c <I2C_WaitOnTXEFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d107      	bne.n	80049fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e076      	b.n	8004aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a04:	893b      	ldrh	r3, [r7, #8]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	e021      	b.n	8004a54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a20:	6a39      	ldr	r1, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f982 	bl	8004d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d107      	bne.n	8004a46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e050      	b.n	8004aec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4a:	893b      	ldrh	r3, [r7, #8]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a56:	6a39      	ldr	r1, [r7, #32]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f967 	bl	8004d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d107      	bne.n	8004a7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e035      	b.n	8004aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f82b 	bl	8004af8 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab6:	d103      	bne.n	8004ac0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004abe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e013      	b.n	8004aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	6a3a      	ldr	r2, [r7, #32]
 8004ad8:	4906      	ldr	r1, [pc, #24]	@ (8004af4 <I2C_RequestMemoryRead+0x1cc>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f886 	bl	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	00010002 	.word	0x00010002

08004af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b08:	e048      	b.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d044      	beq.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fe f8ed 	bl	8002cf0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d139      	bne.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10d      	bne.n	8004b4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	43da      	mvns	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	e00c      	b.n	8004b68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	43da      	mvns	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d116      	bne.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e023      	b.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10d      	bne.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	43da      	mvns	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	e00c      	b.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	43da      	mvns	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d093      	beq.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bfa:	e071      	b.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0a:	d123      	bne.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e067      	b.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d041      	beq.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5c:	f7fe f848 	bl	8002cf0 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d302      	bcc.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d136      	bne.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10c      	bne.n	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	43da      	mvns	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4013      	ands	r3, r2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf14      	ite	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	2300      	moveq	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	e00b      	b.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d016      	beq.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e021      	b.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d10c      	bne.n	8004d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e00b      	b.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f af6d 	bne.w	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d38:	e034      	b.n	8004da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f8e3 	bl	8004f06 <I2C_IsAcknowledgeFailed>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e034      	b.n	8004db4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d028      	beq.n	8004da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fd ffcd 	bl	8002cf0 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11d      	bne.n	8004da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d72:	2b80      	cmp	r3, #128	@ 0x80
 8004d74:	d016      	beq.n	8004da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e007      	b.n	8004db4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dae:	2b80      	cmp	r3, #128	@ 0x80
 8004db0:	d1c3      	bne.n	8004d3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dc8:	e034      	b.n	8004e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f89b 	bl	8004f06 <I2C_IsAcknowledgeFailed>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e034      	b.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d028      	beq.n	8004e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de2:	f7fd ff85 	bl	8002cf0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d11d      	bne.n	8004e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d016      	beq.n	8004e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e007      	b.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d1c3      	bne.n	8004dca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e58:	e049      	b.n	8004eee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d119      	bne.n	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0210 	mvn.w	r2, #16
 8004e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e030      	b.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9c:	f7fd ff28 	bl	8002cf0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11d      	bne.n	8004eee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebc:	2b40      	cmp	r3, #64	@ 0x40
 8004ebe:	d016      	beq.n	8004eee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e007      	b.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d1ae      	bne.n	8004e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1c:	d11b      	bne.n	8004f56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	f043 0204 	orr.w	r2, r3, #4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e267      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d075      	beq.n	800506e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f82:	4b88      	ldr	r3, [pc, #544]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f8e:	4b85      	ldr	r3, [pc, #532]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d112      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9a:	4b82      	ldr	r3, [pc, #520]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa8:	4b7e      	ldr	r3, [pc, #504]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05b      	beq.n	800506c <HAL_RCC_OscConfig+0x108>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d157      	bne.n	800506c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e242      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc8:	d106      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x74>
 8004fca:	4b76      	ldr	r3, [pc, #472]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a75      	ldr	r2, [pc, #468]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e01d      	b.n	8005014 <HAL_RCC_OscConfig+0xb0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x98>
 8004fe2:	4b70      	ldr	r3, [pc, #448]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6f      	ldr	r2, [pc, #444]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4b6d      	ldr	r3, [pc, #436]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6c      	ldr	r2, [pc, #432]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e00b      	b.n	8005014 <HAL_RCC_OscConfig+0xb0>
 8004ffc:	4b69      	ldr	r3, [pc, #420]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a68      	ldr	r2, [pc, #416]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4b66      	ldr	r3, [pc, #408]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a65      	ldr	r2, [pc, #404]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 800500e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d013      	beq.n	8005044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fd fe68 	bl	8002cf0 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fd fe64 	bl	8002cf0 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	@ 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e207      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	4b5b      	ldr	r3, [pc, #364]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0xc0>
 8005042:	e014      	b.n	800506e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd fe54 	bl	8002cf0 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fd fe50 	bl	8002cf0 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1f3      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505e:	4b51      	ldr	r3, [pc, #324]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0xe8>
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d063      	beq.n	8005142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800507a:	4b4a      	ldr	r3, [pc, #296]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005086:	4b47      	ldr	r3, [pc, #284]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800508e:	2b08      	cmp	r3, #8
 8005090:	d11c      	bne.n	80050cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005092:	4b44      	ldr	r3, [pc, #272]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d116      	bne.n	80050cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509e:	4b41      	ldr	r3, [pc, #260]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_RCC_OscConfig+0x152>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d001      	beq.n	80050b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e1c7      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b6:	4b3b      	ldr	r3, [pc, #236]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4937      	ldr	r1, [pc, #220]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ca:	e03a      	b.n	8005142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d020      	beq.n	8005116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d4:	4b34      	ldr	r3, [pc, #208]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050da:	f7fd fe09 	bl	8002cf0 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e2:	f7fd fe05 	bl	8002cf0 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e1a8      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f4:	4b2b      	ldr	r3, [pc, #172]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005100:	4b28      	ldr	r3, [pc, #160]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4925      	ldr	r1, [pc, #148]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]
 8005114:	e015      	b.n	8005142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005116:	4b24      	ldr	r3, [pc, #144]	@ (80051a8 <HAL_RCC_OscConfig+0x244>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fd fde8 	bl	8002cf0 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005124:	f7fd fde4 	bl	8002cf0 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e187      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005136:	4b1b      	ldr	r3, [pc, #108]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d036      	beq.n	80051bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005156:	4b15      	ldr	r3, [pc, #84]	@ (80051ac <HAL_RCC_OscConfig+0x248>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fd fdc8 	bl	8002cf0 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005164:	f7fd fdc4 	bl	8002cf0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e167      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005176:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <HAL_RCC_OscConfig+0x240>)
 8005178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x200>
 8005182:	e01b      	b.n	80051bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005184:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCC_OscConfig+0x248>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518a:	f7fd fdb1 	bl	8002cf0 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005190:	e00e      	b.n	80051b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005192:	f7fd fdad 	bl	8002cf0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d907      	bls.n	80051b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e150      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
 80051a4:	40023800 	.word	0x40023800
 80051a8:	42470000 	.word	0x42470000
 80051ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b0:	4b88      	ldr	r3, [pc, #544]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80051b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ea      	bne.n	8005192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8097 	beq.w	80052f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ca:	2300      	movs	r3, #0
 80051cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ce:	4b81      	ldr	r3, [pc, #516]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10f      	bne.n	80051fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	4b7d      	ldr	r3, [pc, #500]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	4a7c      	ldr	r2, [pc, #496]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ea:	4b7a      	ldr	r3, [pc, #488]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fa:	4b77      	ldr	r3, [pc, #476]	@ (80053d8 <HAL_RCC_OscConfig+0x474>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005206:	4b74      	ldr	r3, [pc, #464]	@ (80053d8 <HAL_RCC_OscConfig+0x474>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a73      	ldr	r2, [pc, #460]	@ (80053d8 <HAL_RCC_OscConfig+0x474>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005212:	f7fd fd6d 	bl	8002cf0 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521a:	f7fd fd69 	bl	8002cf0 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e10c      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	4b6a      	ldr	r3, [pc, #424]	@ (80053d8 <HAL_RCC_OscConfig+0x474>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d106      	bne.n	800524e <HAL_RCC_OscConfig+0x2ea>
 8005240:	4b64      	ldr	r3, [pc, #400]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005244:	4a63      	ldr	r2, [pc, #396]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	6713      	str	r3, [r2, #112]	@ 0x70
 800524c:	e01c      	b.n	8005288 <HAL_RCC_OscConfig+0x324>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b05      	cmp	r3, #5
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0x30c>
 8005256:	4b5f      	ldr	r3, [pc, #380]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525a:	4a5e      	ldr	r2, [pc, #376]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 800525c:	f043 0304 	orr.w	r3, r3, #4
 8005260:	6713      	str	r3, [r2, #112]	@ 0x70
 8005262:	4b5c      	ldr	r3, [pc, #368]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	4a5b      	ldr	r2, [pc, #364]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6713      	str	r3, [r2, #112]	@ 0x70
 800526e:	e00b      	b.n	8005288 <HAL_RCC_OscConfig+0x324>
 8005270:	4b58      	ldr	r3, [pc, #352]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005274:	4a57      	ldr	r2, [pc, #348]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005276:	f023 0301 	bic.w	r3, r3, #1
 800527a:	6713      	str	r3, [r2, #112]	@ 0x70
 800527c:	4b55      	ldr	r3, [pc, #340]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005280:	4a54      	ldr	r2, [pc, #336]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005282:	f023 0304 	bic.w	r3, r3, #4
 8005286:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fd fd2e 	bl	8002cf0 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005296:	e00a      	b.n	80052ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fd fd2a 	bl	8002cf0 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e0cb      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ae:	4b49      	ldr	r3, [pc, #292]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0ee      	beq.n	8005298 <HAL_RCC_OscConfig+0x334>
 80052ba:	e014      	b.n	80052e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052bc:	f7fd fd18 	bl	8002cf0 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c2:	e00a      	b.n	80052da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c4:	f7fd fd14 	bl	8002cf0 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0b5      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052da:	4b3e      	ldr	r3, [pc, #248]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1ee      	bne.n	80052c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ec:	4b39      	ldr	r3, [pc, #228]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	4a38      	ldr	r2, [pc, #224]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80052f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80a1 	beq.w	8005444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005302:	4b34      	ldr	r3, [pc, #208]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b08      	cmp	r3, #8
 800530c:	d05c      	beq.n	80053c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d141      	bne.n	800539a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	4b31      	ldr	r3, [pc, #196]	@ (80053dc <HAL_RCC_OscConfig+0x478>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fd fce8 	bl	8002cf0 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005324:	f7fd fce4 	bl	8002cf0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e087      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005336:	4b27      	ldr	r3, [pc, #156]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	019b      	lsls	r3, r3, #6
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	3b01      	subs	r3, #1
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	491b      	ldr	r1, [pc, #108]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 8005368:	4313      	orrs	r3, r2
 800536a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <HAL_RCC_OscConfig+0x478>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005372:	f7fd fcbd 	bl	8002cf0 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fd fcb9 	bl	8002cf0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e05c      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538c:	4b11      	ldr	r3, [pc, #68]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x416>
 8005398:	e054      	b.n	8005444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539a:	4b10      	ldr	r3, [pc, #64]	@ (80053dc <HAL_RCC_OscConfig+0x478>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fd fca6 	bl	8002cf0 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fd fca2 	bl	8002cf0 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e045      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <HAL_RCC_OscConfig+0x470>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x444>
 80053c6:	e03d      	b.n	8005444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d107      	bne.n	80053e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e038      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40007000 	.word	0x40007000
 80053dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <HAL_RCC_OscConfig+0x4ec>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d028      	beq.n	8005440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d121      	bne.n	8005440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d11a      	bne.n	8005440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005418:	4293      	cmp	r3, r2
 800541a:	d111      	bne.n	8005440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	085b      	lsrs	r3, r3, #1
 8005428:	3b01      	subs	r3, #1
 800542a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542c:	429a      	cmp	r2, r3
 800542e:	d107      	bne.n	8005440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800

08005454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0cc      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005468:	4b68      	ldr	r3, [pc, #416]	@ (800560c <HAL_RCC_ClockConfig+0x1b8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d90c      	bls.n	8005490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b65      	ldr	r3, [pc, #404]	@ (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b63      	ldr	r3, [pc, #396]	@ (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0b8      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a8:	4b59      	ldr	r3, [pc, #356]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a58      	ldr	r2, [pc, #352]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c0:	4b53      	ldr	r3, [pc, #332]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a52      	ldr	r2, [pc, #328]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054cc:	4b50      	ldr	r3, [pc, #320]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	494d      	ldr	r1, [pc, #308]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d044      	beq.n	8005574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	4b47      	ldr	r3, [pc, #284]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d119      	bne.n	8005532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e07f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d003      	beq.n	8005512 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550e:	2b03      	cmp	r3, #3
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005512:	4b3f      	ldr	r3, [pc, #252]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e06f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005522:	4b3b      	ldr	r3, [pc, #236]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e067      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005532:	4b37      	ldr	r3, [pc, #220]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f023 0203 	bic.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4934      	ldr	r1, [pc, #208]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005544:	f7fd fbd4 	bl	8002cf0 <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554a:	e00a      	b.n	8005562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554c:	f7fd fbd0 	bl	8002cf0 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e04f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	4b2b      	ldr	r3, [pc, #172]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 020c 	and.w	r2, r3, #12
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	429a      	cmp	r2, r3
 8005572:	d1eb      	bne.n	800554c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005574:	4b25      	ldr	r3, [pc, #148]	@ (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d20c      	bcs.n	800559c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005582:	4b22      	ldr	r3, [pc, #136]	@ (800560c <HAL_RCC_ClockConfig+0x1b8>)
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b20      	ldr	r3, [pc, #128]	@ (800560c <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e032      	b.n	8005602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a8:	4b19      	ldr	r3, [pc, #100]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4916      	ldr	r1, [pc, #88]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c6:	4b12      	ldr	r3, [pc, #72]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	490e      	ldr	r1, [pc, #56]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055da:	f000 f821 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80055de:	4602      	mov	r2, r0
 80055e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	490a      	ldr	r1, [pc, #40]	@ (8005614 <HAL_RCC_ClockConfig+0x1c0>)
 80055ec:	5ccb      	ldrb	r3, [r1, r3]
 80055ee:	fa22 f303 	lsr.w	r3, r2, r3
 80055f2:	4a09      	ldr	r2, [pc, #36]	@ (8005618 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <HAL_RCC_ClockConfig+0x1c8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd fb34 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40023c00 	.word	0x40023c00
 8005610:	40023800 	.word	0x40023800
 8005614:	0800b2e4 	.word	0x0800b2e4
 8005618:	20000000 	.word	0x20000000
 800561c:	20000004 	.word	0x20000004

08005620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005624:	b094      	sub	sp, #80	@ 0x50
 8005626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005638:	4b79      	ldr	r3, [pc, #484]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x200>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 030c 	and.w	r3, r3, #12
 8005640:	2b08      	cmp	r3, #8
 8005642:	d00d      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x40>
 8005644:	2b08      	cmp	r3, #8
 8005646:	f200 80e1 	bhi.w	800580c <HAL_RCC_GetSysClockFreq+0x1ec>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0x34>
 800564e:	2b04      	cmp	r3, #4
 8005650:	d003      	beq.n	800565a <HAL_RCC_GetSysClockFreq+0x3a>
 8005652:	e0db      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005654:	4b73      	ldr	r3, [pc, #460]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x204>)
 8005656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005658:	e0db      	b.n	8005812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800565a:	4b73      	ldr	r3, [pc, #460]	@ (8005828 <HAL_RCC_GetSysClockFreq+0x208>)
 800565c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800565e:	e0d8      	b.n	8005812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005660:	4b6f      	ldr	r3, [pc, #444]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x200>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800566a:	4b6d      	ldr	r3, [pc, #436]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x200>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d063      	beq.n	800573e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005676:	4b6a      	ldr	r3, [pc, #424]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x200>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	099b      	lsrs	r3, r3, #6
 800567c:	2200      	movs	r2, #0
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005680:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005688:	633b      	str	r3, [r7, #48]	@ 0x30
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	@ 0x34
 800568e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	f04f 0000 	mov.w	r0, #0
 800569a:	f04f 0100 	mov.w	r1, #0
 800569e:	0159      	lsls	r1, r3, #5
 80056a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056a4:	0150      	lsls	r0, r2, #5
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4621      	mov	r1, r4
 80056ac:	1a51      	subs	r1, r2, r1
 80056ae:	6139      	str	r1, [r7, #16]
 80056b0:	4629      	mov	r1, r5
 80056b2:	eb63 0301 	sbc.w	r3, r3, r1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c4:	4659      	mov	r1, fp
 80056c6:	018b      	lsls	r3, r1, #6
 80056c8:	4651      	mov	r1, sl
 80056ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ce:	4651      	mov	r1, sl
 80056d0:	018a      	lsls	r2, r1, #6
 80056d2:	4651      	mov	r1, sl
 80056d4:	ebb2 0801 	subs.w	r8, r2, r1
 80056d8:	4659      	mov	r1, fp
 80056da:	eb63 0901 	sbc.w	r9, r3, r1
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056f2:	4690      	mov	r8, r2
 80056f4:	4699      	mov	r9, r3
 80056f6:	4623      	mov	r3, r4
 80056f8:	eb18 0303 	adds.w	r3, r8, r3
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	462b      	mov	r3, r5
 8005700:	eb49 0303 	adc.w	r3, r9, r3
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005712:	4629      	mov	r1, r5
 8005714:	024b      	lsls	r3, r1, #9
 8005716:	4621      	mov	r1, r4
 8005718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800571c:	4621      	mov	r1, r4
 800571e:	024a      	lsls	r2, r1, #9
 8005720:	4610      	mov	r0, r2
 8005722:	4619      	mov	r1, r3
 8005724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005726:	2200      	movs	r2, #0
 8005728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800572c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005730:	f7fb fb02 	bl	8000d38 <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4613      	mov	r3, r2
 800573a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800573c:	e058      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800573e:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x200>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	099b      	lsrs	r3, r3, #6
 8005744:	2200      	movs	r2, #0
 8005746:	4618      	mov	r0, r3
 8005748:	4611      	mov	r1, r2
 800574a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	2300      	movs	r3, #0
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
 8005754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005758:	4642      	mov	r2, r8
 800575a:	464b      	mov	r3, r9
 800575c:	f04f 0000 	mov.w	r0, #0
 8005760:	f04f 0100 	mov.w	r1, #0
 8005764:	0159      	lsls	r1, r3, #5
 8005766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800576a:	0150      	lsls	r0, r2, #5
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4641      	mov	r1, r8
 8005772:	ebb2 0a01 	subs.w	sl, r2, r1
 8005776:	4649      	mov	r1, r9
 8005778:	eb63 0b01 	sbc.w	fp, r3, r1
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800578c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005790:	ebb2 040a 	subs.w	r4, r2, sl
 8005794:	eb63 050b 	sbc.w	r5, r3, fp
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	00eb      	lsls	r3, r5, #3
 80057a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057a6:	00e2      	lsls	r2, r4, #3
 80057a8:	4614      	mov	r4, r2
 80057aa:	461d      	mov	r5, r3
 80057ac:	4643      	mov	r3, r8
 80057ae:	18e3      	adds	r3, r4, r3
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	464b      	mov	r3, r9
 80057b4:	eb45 0303 	adc.w	r3, r5, r3
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057c6:	4629      	mov	r1, r5
 80057c8:	028b      	lsls	r3, r1, #10
 80057ca:	4621      	mov	r1, r4
 80057cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057d0:	4621      	mov	r1, r4
 80057d2:	028a      	lsls	r2, r1, #10
 80057d4:	4610      	mov	r0, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057da:	2200      	movs	r2, #0
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	61fa      	str	r2, [r7, #28]
 80057e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e4:	f7fb faa8 	bl	8000d38 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4613      	mov	r3, r2
 80057ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	0c1b      	lsrs	r3, r3, #16
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	3301      	adds	r3, #1
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800580a:	e002      	b.n	8005812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x204>)
 800580e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005814:	4618      	mov	r0, r3
 8005816:	3750      	adds	r7, #80	@ 0x50
 8005818:	46bd      	mov	sp, r7
 800581a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800
 8005824:	00f42400 	.word	0x00f42400
 8005828:	007a1200 	.word	0x007a1200

0800582c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005830:	4b03      	ldr	r3, [pc, #12]	@ (8005840 <HAL_RCC_GetHCLKFreq+0x14>)
 8005832:	681b      	ldr	r3, [r3, #0]
}
 8005834:	4618      	mov	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20000000 	.word	0x20000000

08005844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005848:	f7ff fff0 	bl	800582c <HAL_RCC_GetHCLKFreq>
 800584c:	4602      	mov	r2, r0
 800584e:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	0a9b      	lsrs	r3, r3, #10
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	4903      	ldr	r1, [pc, #12]	@ (8005868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800585a:	5ccb      	ldrb	r3, [r1, r3]
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40023800 	.word	0x40023800
 8005868:	0800b2f4 	.word	0x0800b2f4

0800586c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005870:	f7ff ffdc 	bl	800582c <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b05      	ldr	r3, [pc, #20]	@ (800588c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0b5b      	lsrs	r3, r3, #13
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4903      	ldr	r1, [pc, #12]	@ (8005890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40023800 	.word	0x40023800
 8005890:	0800b2f4 	.word	0x0800b2f4

08005894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e042      	b.n	800592c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fd f938 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	@ 0x24
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fdd3 	bl	8006484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800590c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	@ 0x28
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b20      	cmp	r3, #32
 8005952:	d175      	bne.n	8005a40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_UART_Transmit+0x2c>
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e06e      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2221      	movs	r2, #33	@ 0x21
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005972:	f7fd f9bd 	bl	8002cf0 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598c:	d108      	bne.n	80059a0 <HAL_UART_Transmit+0x6c>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e003      	b.n	80059a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059a8:	e02e      	b.n	8005a08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	@ 0x80
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fb37 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e03a      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10b      	bne.n	80059ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	3302      	adds	r3, #2
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	e007      	b.n	80059fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	3301      	adds	r3, #1
 80059f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1cb      	bne.n	80059aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2140      	movs	r1, #64	@ 0x40
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fb03 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e006      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	4613      	mov	r3, r2
 8005a56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d112      	bne.n	8005a8a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_UART_Receive_IT+0x26>
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e00b      	b.n	8005a8c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fb2a 	bl	80060da <UART_Start_Receive_IT>
 8005a86:	4603      	mov	r3, r0
 8005a88:	e000      	b.n	8005a8c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b0ba      	sub	sp, #232	@ 0xe8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10f      	bne.n	8005afa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_UART_IRQHandler+0x66>
 8005ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fc07 	bl	8006306 <UART_Receive_IT>
      return;
 8005af8:	e273      	b.n	8005fe2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80de 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x22c>
 8005b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80d1 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <HAL_UART_IRQHandler+0xae>
 8005b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_UART_IRQHandler+0xd2>
 8005b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5e:	f043 0202 	orr.w	r2, r3, #2
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <HAL_UART_IRQHandler+0xf6>
 8005b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b82:	f043 0204 	orr.w	r2, r3, #4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d011      	beq.n	8005bba <HAL_UART_IRQHandler+0x126>
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d105      	bne.n	8005bae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	f043 0208 	orr.w	r2, r3, #8
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 820a 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_UART_IRQHandler+0x14e>
 8005bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fb92 	bl	8006306 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b40      	cmp	r3, #64	@ 0x40
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <HAL_UART_IRQHandler+0x17a>
 8005c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d04f      	beq.n	8005cae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa9d 	bl	800614e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d141      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3314      	adds	r3, #20
 8005c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3314      	adds	r3, #20
 8005c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1d9      	bne.n	8005c22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d013      	beq.n	8005c9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7a:	4a8a      	ldr	r2, [pc, #552]	@ (8005ea4 <HAL_UART_IRQHandler+0x410>)
 8005c7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fd fdd7 	bl	8003836 <HAL_DMA_Abort_IT>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9c:	e00e      	b.n	8005cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9ac 	bl	8005ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	e00a      	b.n	8005cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f9a8 	bl	8005ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	e006      	b.n	8005cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f9a4 	bl	8005ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005cba:	e18d      	b.n	8005fd8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	bf00      	nop
    return;
 8005cbe:	e18b      	b.n	8005fd8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	f040 8167 	bne.w	8005f98 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8160 	beq.w	8005f98 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8159 	beq.w	8005f98 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d06:	2b40      	cmp	r3, #64	@ 0x40
 8005d08:	f040 80ce 	bne.w	8005ea8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80a9 	beq.w	8005e74 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	f080 80a2 	bcs.w	8005e74 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d42:	f000 8088 	beq.w	8005e56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1d9      	bne.n	8005d46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005db6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e1      	bne.n	8005d92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3314      	adds	r3, #20
 8005dd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3314      	adds	r3, #20
 8005dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005df4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e3      	bne.n	8005dce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e26:	f023 0310 	bic.w	r3, r3, #16
 8005e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e3      	bne.n	8005e14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fd fc80 	bl	8003756 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8cf 	bl	8006010 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e72:	e0b3      	b.n	8005fdc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f040 80ad 	bne.w	8005fdc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8c:	f040 80a6 	bne.w	8005fdc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f8b7 	bl	8006010 <HAL_UARTEx_RxEventCallback>
      return;
 8005ea2:	e09b      	b.n	8005fdc <HAL_UART_IRQHandler+0x548>
 8005ea4:	08006215 	.word	0x08006215
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 808e 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8089 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ef8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e3      	bne.n	8005ece <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	623b      	str	r3, [r7, #32]
   return(result);
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3314      	adds	r3, #20
 8005f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e3      	bne.n	8005f06 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0310 	bic.w	r3, r3, #16
 8005f62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f70:	61fa      	str	r2, [r7, #28]
 8005f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e3      	bne.n	8005f4c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f83d 	bl	8006010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f96:	e023      	b.n	8005fe0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x524>
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f940 	bl	8006236 <UART_Transmit_IT>
    return;
 8005fb6:	e014      	b.n	8005fe2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x54e>
 8005fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f980 	bl	80062d6 <UART_EndTransmit_IT>
    return;
 8005fd6:	e004      	b.n	8005fe2 <HAL_UART_IRQHandler+0x54e>
    return;
 8005fd8:	bf00      	nop
 8005fda:	e002      	b.n	8005fe2 <HAL_UART_IRQHandler+0x54e>
      return;
 8005fdc:	bf00      	nop
 8005fde:	e000      	b.n	8005fe2 <HAL_UART_IRQHandler+0x54e>
      return;
 8005fe0:	bf00      	nop
  }
}
 8005fe2:	37e8      	adds	r7, #232	@ 0xe8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	4613      	mov	r3, r2
 8006036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006038:	e03b      	b.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d037      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fc fe55 	bl	8002cf0 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	6a3a      	ldr	r2, [r7, #32]
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <UART_WaitOnFlagUntilTimeout+0x30>
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e03a      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d023      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b80      	cmp	r3, #128	@ 0x80
 800606e:	d020      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d01d      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d116      	bne.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f857 	bl	800614e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2208      	movs	r2, #8
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e00f      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4013      	ands	r3, r2
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	429a      	cmp	r2, r3
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d0b4      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	4613      	mov	r3, r2
 80060e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	88fa      	ldrh	r2, [r7, #6]
 80060f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2222      	movs	r2, #34	@ 0x22
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800611e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0220 	orr.w	r2, r2, #32
 800613e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800614e:	b480      	push	{r7}
 8006150:	b095      	sub	sp, #84	@ 0x54
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800616c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006176:	643a      	str	r2, [r7, #64]	@ 0x40
 8006178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800617c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	61fb      	str	r3, [r7, #28]
   return(result);
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d119      	bne.n	80061fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f023 0310 	bic.w	r3, r3, #16
 80061dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061e6:	61ba      	str	r2, [r7, #24]
 80061e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	613b      	str	r3, [r7, #16]
   return(result);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e5      	bne.n	80061c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006208:	bf00      	nop
 800620a:	3754      	adds	r7, #84	@ 0x54
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006220:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff fee7 	bl	8005ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b21      	cmp	r3, #33	@ 0x21
 8006248:	d13e      	bne.n	80062c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006252:	d114      	bne.n	800627e <UART_Transmit_IT+0x48>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d110      	bne.n	800627e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006270:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	621a      	str	r2, [r3, #32]
 800627c:	e008      	b.n	8006290 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	1c59      	adds	r1, r3, #1
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6211      	str	r1, [r2, #32]
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29b      	uxth	r3, r3
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4619      	mov	r1, r3
 800629e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10f      	bne.n	80062c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fe76 	bl	8005fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b08c      	sub	sp, #48	@ 0x30
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b22      	cmp	r3, #34	@ 0x22
 8006320:	f040 80aa 	bne.w	8006478 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632c:	d115      	bne.n	800635a <UART_Receive_IT+0x54>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d111      	bne.n	800635a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006348:	b29a      	uxth	r2, r3
 800634a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	629a      	str	r2, [r3, #40]	@ 0x28
 8006358:	e024      	b.n	80063a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006368:	d007      	beq.n	800637a <UART_Receive_IT+0x74>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <UART_Receive_IT+0x82>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e008      	b.n	800639a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006394:	b2da      	uxtb	r2, r3
 8006396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006398:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4619      	mov	r1, r3
 80063b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d15d      	bne.n	8006474 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0220 	bic.w	r2, r2, #32
 80063c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d135      	bne.n	800646a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	613b      	str	r3, [r7, #16]
   return(result);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f023 0310 	bic.w	r3, r3, #16
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006424:	623a      	str	r2, [r7, #32]
 8006426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	61bb      	str	r3, [r7, #24]
   return(result);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e5      	bne.n	8006404 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d10a      	bne.n	800645c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fdd4 	bl	8006010 <HAL_UARTEx_RxEventCallback>
 8006468:	e002      	b.n	8006470 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb ffd6 	bl	800241c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e002      	b.n	800647a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3730      	adds	r7, #48	@ 0x30
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006488:	b0c0      	sub	sp, #256	@ 0x100
 800648a:	af00      	add	r7, sp, #0
 800648c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a0:	68d9      	ldr	r1, [r3, #12]
 80064a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	ea40 0301 	orr.w	r3, r0, r1
 80064ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80064dc:	f021 010c 	bic.w	r1, r1, #12
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064ea:	430b      	orrs	r3, r1
 80064ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fe:	6999      	ldr	r1, [r3, #24]
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	ea40 0301 	orr.w	r3, r0, r1
 800650a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b8f      	ldr	r3, [pc, #572]	@ (8006750 <UART_SetConfig+0x2cc>)
 8006514:	429a      	cmp	r2, r3
 8006516:	d005      	beq.n	8006524 <UART_SetConfig+0xa0>
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b8d      	ldr	r3, [pc, #564]	@ (8006754 <UART_SetConfig+0x2d0>)
 8006520:	429a      	cmp	r2, r3
 8006522:	d104      	bne.n	800652e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006524:	f7ff f9a2 	bl	800586c <HAL_RCC_GetPCLK2Freq>
 8006528:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800652c:	e003      	b.n	8006536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800652e:	f7ff f989 	bl	8005844 <HAL_RCC_GetPCLK1Freq>
 8006532:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006540:	f040 810c 	bne.w	800675c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006548:	2200      	movs	r2, #0
 800654a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800654e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006556:	4622      	mov	r2, r4
 8006558:	462b      	mov	r3, r5
 800655a:	1891      	adds	r1, r2, r2
 800655c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800655e:	415b      	adcs	r3, r3
 8006560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006566:	4621      	mov	r1, r4
 8006568:	eb12 0801 	adds.w	r8, r2, r1
 800656c:	4629      	mov	r1, r5
 800656e:	eb43 0901 	adc.w	r9, r3, r1
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800657e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006586:	4690      	mov	r8, r2
 8006588:	4699      	mov	r9, r3
 800658a:	4623      	mov	r3, r4
 800658c:	eb18 0303 	adds.w	r3, r8, r3
 8006590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006594:	462b      	mov	r3, r5
 8006596:	eb49 0303 	adc.w	r3, r9, r3
 800659a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065b2:	460b      	mov	r3, r1
 80065b4:	18db      	adds	r3, r3, r3
 80065b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80065b8:	4613      	mov	r3, r2
 80065ba:	eb42 0303 	adc.w	r3, r2, r3
 80065be:	657b      	str	r3, [r7, #84]	@ 0x54
 80065c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80065c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80065c8:	f7fa fbb6 	bl	8000d38 <__aeabi_uldivmod>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4b61      	ldr	r3, [pc, #388]	@ (8006758 <UART_SetConfig+0x2d4>)
 80065d2:	fba3 2302 	umull	r2, r3, r3, r2
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	011c      	lsls	r4, r3, #4
 80065da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80065ec:	4642      	mov	r2, r8
 80065ee:	464b      	mov	r3, r9
 80065f0:	1891      	adds	r1, r2, r2
 80065f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80065f4:	415b      	adcs	r3, r3
 80065f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065fc:	4641      	mov	r1, r8
 80065fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006602:	4649      	mov	r1, r9
 8006604:	eb43 0b01 	adc.w	fp, r3, r1
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800661c:	4692      	mov	sl, r2
 800661e:	469b      	mov	fp, r3
 8006620:	4643      	mov	r3, r8
 8006622:	eb1a 0303 	adds.w	r3, sl, r3
 8006626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800662a:	464b      	mov	r3, r9
 800662c:	eb4b 0303 	adc.w	r3, fp, r3
 8006630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006640:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006648:	460b      	mov	r3, r1
 800664a:	18db      	adds	r3, r3, r3
 800664c:	643b      	str	r3, [r7, #64]	@ 0x40
 800664e:	4613      	mov	r3, r2
 8006650:	eb42 0303 	adc.w	r3, r2, r3
 8006654:	647b      	str	r3, [r7, #68]	@ 0x44
 8006656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800665a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800665e:	f7fa fb6b 	bl	8000d38 <__aeabi_uldivmod>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4611      	mov	r1, r2
 8006668:	4b3b      	ldr	r3, [pc, #236]	@ (8006758 <UART_SetConfig+0x2d4>)
 800666a:	fba3 2301 	umull	r2, r3, r3, r1
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	2264      	movs	r2, #100	@ 0x64
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	1acb      	subs	r3, r1, r3
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800667e:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <UART_SetConfig+0x2d4>)
 8006680:	fba3 2302 	umull	r2, r3, r3, r2
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800668c:	441c      	add	r4, r3
 800668e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006692:	2200      	movs	r2, #0
 8006694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800669c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066a0:	4642      	mov	r2, r8
 80066a2:	464b      	mov	r3, r9
 80066a4:	1891      	adds	r1, r2, r2
 80066a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066a8:	415b      	adcs	r3, r3
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80066b0:	4641      	mov	r1, r8
 80066b2:	1851      	adds	r1, r2, r1
 80066b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80066b6:	4649      	mov	r1, r9
 80066b8:	414b      	adcs	r3, r1
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80066c8:	4659      	mov	r1, fp
 80066ca:	00cb      	lsls	r3, r1, #3
 80066cc:	4651      	mov	r1, sl
 80066ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d2:	4651      	mov	r1, sl
 80066d4:	00ca      	lsls	r2, r1, #3
 80066d6:	4610      	mov	r0, r2
 80066d8:	4619      	mov	r1, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	4642      	mov	r2, r8
 80066de:	189b      	adds	r3, r3, r2
 80066e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066e4:	464b      	mov	r3, r9
 80066e6:	460a      	mov	r2, r1
 80066e8:	eb42 0303 	adc.w	r3, r2, r3
 80066ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006704:	460b      	mov	r3, r1
 8006706:	18db      	adds	r3, r3, r3
 8006708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800670a:	4613      	mov	r3, r2
 800670c:	eb42 0303 	adc.w	r3, r2, r3
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800671a:	f7fa fb0d 	bl	8000d38 <__aeabi_uldivmod>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <UART_SetConfig+0x2d4>)
 8006724:	fba3 1302 	umull	r1, r3, r3, r2
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	2164      	movs	r1, #100	@ 0x64
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	3332      	adds	r3, #50	@ 0x32
 8006736:	4a08      	ldr	r2, [pc, #32]	@ (8006758 <UART_SetConfig+0x2d4>)
 8006738:	fba2 2303 	umull	r2, r3, r2, r3
 800673c:	095b      	lsrs	r3, r3, #5
 800673e:	f003 0207 	and.w	r2, r3, #7
 8006742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4422      	add	r2, r4
 800674a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800674c:	e106      	b.n	800695c <UART_SetConfig+0x4d8>
 800674e:	bf00      	nop
 8006750:	40011000 	.word	0x40011000
 8006754:	40011400 	.word	0x40011400
 8006758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800675c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006760:	2200      	movs	r2, #0
 8006762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006766:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800676a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800676e:	4642      	mov	r2, r8
 8006770:	464b      	mov	r3, r9
 8006772:	1891      	adds	r1, r2, r2
 8006774:	6239      	str	r1, [r7, #32]
 8006776:	415b      	adcs	r3, r3
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
 800677a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800677e:	4641      	mov	r1, r8
 8006780:	1854      	adds	r4, r2, r1
 8006782:	4649      	mov	r1, r9
 8006784:	eb43 0501 	adc.w	r5, r3, r1
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	00eb      	lsls	r3, r5, #3
 8006792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006796:	00e2      	lsls	r2, r4, #3
 8006798:	4614      	mov	r4, r2
 800679a:	461d      	mov	r5, r3
 800679c:	4643      	mov	r3, r8
 800679e:	18e3      	adds	r3, r4, r3
 80067a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067a4:	464b      	mov	r3, r9
 80067a6:	eb45 0303 	adc.w	r3, r5, r3
 80067aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067ca:	4629      	mov	r1, r5
 80067cc:	008b      	lsls	r3, r1, #2
 80067ce:	4621      	mov	r1, r4
 80067d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067d4:	4621      	mov	r1, r4
 80067d6:	008a      	lsls	r2, r1, #2
 80067d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067dc:	f7fa faac 	bl	8000d38 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4b60      	ldr	r3, [pc, #384]	@ (8006968 <UART_SetConfig+0x4e4>)
 80067e6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	011c      	lsls	r4, r3, #4
 80067ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	1891      	adds	r1, r2, r2
 8006806:	61b9      	str	r1, [r7, #24]
 8006808:	415b      	adcs	r3, r3
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006810:	4641      	mov	r1, r8
 8006812:	1851      	adds	r1, r2, r1
 8006814:	6139      	str	r1, [r7, #16]
 8006816:	4649      	mov	r1, r9
 8006818:	414b      	adcs	r3, r1
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006828:	4659      	mov	r1, fp
 800682a:	00cb      	lsls	r3, r1, #3
 800682c:	4651      	mov	r1, sl
 800682e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006832:	4651      	mov	r1, sl
 8006834:	00ca      	lsls	r2, r1, #3
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	4603      	mov	r3, r0
 800683c:	4642      	mov	r2, r8
 800683e:	189b      	adds	r3, r3, r2
 8006840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006844:	464b      	mov	r3, r9
 8006846:	460a      	mov	r2, r1
 8006848:	eb42 0303 	adc.w	r3, r2, r3
 800684c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	67bb      	str	r3, [r7, #120]	@ 0x78
 800685a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006868:	4649      	mov	r1, r9
 800686a:	008b      	lsls	r3, r1, #2
 800686c:	4641      	mov	r1, r8
 800686e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006872:	4641      	mov	r1, r8
 8006874:	008a      	lsls	r2, r1, #2
 8006876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800687a:	f7fa fa5d 	bl	8000d38 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4611      	mov	r1, r2
 8006884:	4b38      	ldr	r3, [pc, #224]	@ (8006968 <UART_SetConfig+0x4e4>)
 8006886:	fba3 2301 	umull	r2, r3, r3, r1
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	2264      	movs	r2, #100	@ 0x64
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	1acb      	subs	r3, r1, r3
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	3332      	adds	r3, #50	@ 0x32
 8006898:	4a33      	ldr	r2, [pc, #204]	@ (8006968 <UART_SetConfig+0x4e4>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068a4:	441c      	add	r4, r3
 80068a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068aa:	2200      	movs	r2, #0
 80068ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80068ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80068b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	1891      	adds	r1, r2, r2
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	415b      	adcs	r3, r3
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068c4:	4641      	mov	r1, r8
 80068c6:	1851      	adds	r1, r2, r1
 80068c8:	6039      	str	r1, [r7, #0]
 80068ca:	4649      	mov	r1, r9
 80068cc:	414b      	adcs	r3, r1
 80068ce:	607b      	str	r3, [r7, #4]
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068dc:	4659      	mov	r1, fp
 80068de:	00cb      	lsls	r3, r1, #3
 80068e0:	4651      	mov	r1, sl
 80068e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e6:	4651      	mov	r1, sl
 80068e8:	00ca      	lsls	r2, r1, #3
 80068ea:	4610      	mov	r0, r2
 80068ec:	4619      	mov	r1, r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	4642      	mov	r2, r8
 80068f2:	189b      	adds	r3, r3, r2
 80068f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068f6:	464b      	mov	r3, r9
 80068f8:	460a      	mov	r2, r1
 80068fa:	eb42 0303 	adc.w	r3, r2, r3
 80068fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	663b      	str	r3, [r7, #96]	@ 0x60
 800690a:	667a      	str	r2, [r7, #100]	@ 0x64
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006918:	4649      	mov	r1, r9
 800691a:	008b      	lsls	r3, r1, #2
 800691c:	4641      	mov	r1, r8
 800691e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006922:	4641      	mov	r1, r8
 8006924:	008a      	lsls	r2, r1, #2
 8006926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800692a:	f7fa fa05 	bl	8000d38 <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4b0d      	ldr	r3, [pc, #52]	@ (8006968 <UART_SetConfig+0x4e4>)
 8006934:	fba3 1302 	umull	r1, r3, r3, r2
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	2164      	movs	r1, #100	@ 0x64
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	3332      	adds	r3, #50	@ 0x32
 8006946:	4a08      	ldr	r2, [pc, #32]	@ (8006968 <UART_SetConfig+0x4e4>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	f003 020f 	and.w	r2, r3, #15
 8006952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4422      	add	r2, r4
 800695a:	609a      	str	r2, [r3, #8]
}
 800695c:	bf00      	nop
 800695e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006962:	46bd      	mov	sp, r7
 8006964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006968:	51eb851f 	.word	0x51eb851f

0800696c <atoi>:
 800696c:	220a      	movs	r2, #10
 800696e:	2100      	movs	r1, #0
 8006970:	f000 b87c 	b.w	8006a6c <strtol>

08006974 <_strtol_l.isra.0>:
 8006974:	2b24      	cmp	r3, #36	@ 0x24
 8006976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800697a:	4686      	mov	lr, r0
 800697c:	4690      	mov	r8, r2
 800697e:	d801      	bhi.n	8006984 <_strtol_l.isra.0+0x10>
 8006980:	2b01      	cmp	r3, #1
 8006982:	d106      	bne.n	8006992 <_strtol_l.isra.0+0x1e>
 8006984:	f001 f99a 	bl	8007cbc <__errno>
 8006988:	2316      	movs	r3, #22
 800698a:	6003      	str	r3, [r0, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006992:	4834      	ldr	r0, [pc, #208]	@ (8006a64 <_strtol_l.isra.0+0xf0>)
 8006994:	460d      	mov	r5, r1
 8006996:	462a      	mov	r2, r5
 8006998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800699c:	5d06      	ldrb	r6, [r0, r4]
 800699e:	f016 0608 	ands.w	r6, r6, #8
 80069a2:	d1f8      	bne.n	8006996 <_strtol_l.isra.0+0x22>
 80069a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80069a6:	d110      	bne.n	80069ca <_strtol_l.isra.0+0x56>
 80069a8:	782c      	ldrb	r4, [r5, #0]
 80069aa:	2601      	movs	r6, #1
 80069ac:	1c95      	adds	r5, r2, #2
 80069ae:	f033 0210 	bics.w	r2, r3, #16
 80069b2:	d115      	bne.n	80069e0 <_strtol_l.isra.0+0x6c>
 80069b4:	2c30      	cmp	r4, #48	@ 0x30
 80069b6:	d10d      	bne.n	80069d4 <_strtol_l.isra.0+0x60>
 80069b8:	782a      	ldrb	r2, [r5, #0]
 80069ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80069be:	2a58      	cmp	r2, #88	@ 0x58
 80069c0:	d108      	bne.n	80069d4 <_strtol_l.isra.0+0x60>
 80069c2:	786c      	ldrb	r4, [r5, #1]
 80069c4:	3502      	adds	r5, #2
 80069c6:	2310      	movs	r3, #16
 80069c8:	e00a      	b.n	80069e0 <_strtol_l.isra.0+0x6c>
 80069ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80069cc:	bf04      	itt	eq
 80069ce:	782c      	ldrbeq	r4, [r5, #0]
 80069d0:	1c95      	addeq	r5, r2, #2
 80069d2:	e7ec      	b.n	80069ae <_strtol_l.isra.0+0x3a>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f6      	bne.n	80069c6 <_strtol_l.isra.0+0x52>
 80069d8:	2c30      	cmp	r4, #48	@ 0x30
 80069da:	bf14      	ite	ne
 80069dc:	230a      	movne	r3, #10
 80069de:	2308      	moveq	r3, #8
 80069e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80069e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80069e8:	2200      	movs	r2, #0
 80069ea:	fbbc f9f3 	udiv	r9, ip, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80069f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80069f8:	2f09      	cmp	r7, #9
 80069fa:	d80f      	bhi.n	8006a1c <_strtol_l.isra.0+0xa8>
 80069fc:	463c      	mov	r4, r7
 80069fe:	42a3      	cmp	r3, r4
 8006a00:	dd1b      	ble.n	8006a3a <_strtol_l.isra.0+0xc6>
 8006a02:	1c57      	adds	r7, r2, #1
 8006a04:	d007      	beq.n	8006a16 <_strtol_l.isra.0+0xa2>
 8006a06:	4581      	cmp	r9, r0
 8006a08:	d314      	bcc.n	8006a34 <_strtol_l.isra.0+0xc0>
 8006a0a:	d101      	bne.n	8006a10 <_strtol_l.isra.0+0x9c>
 8006a0c:	45a2      	cmp	sl, r4
 8006a0e:	db11      	blt.n	8006a34 <_strtol_l.isra.0+0xc0>
 8006a10:	fb00 4003 	mla	r0, r0, r3, r4
 8006a14:	2201      	movs	r2, #1
 8006a16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a1a:	e7eb      	b.n	80069f4 <_strtol_l.isra.0+0x80>
 8006a1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006a20:	2f19      	cmp	r7, #25
 8006a22:	d801      	bhi.n	8006a28 <_strtol_l.isra.0+0xb4>
 8006a24:	3c37      	subs	r4, #55	@ 0x37
 8006a26:	e7ea      	b.n	80069fe <_strtol_l.isra.0+0x8a>
 8006a28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006a2c:	2f19      	cmp	r7, #25
 8006a2e:	d804      	bhi.n	8006a3a <_strtol_l.isra.0+0xc6>
 8006a30:	3c57      	subs	r4, #87	@ 0x57
 8006a32:	e7e4      	b.n	80069fe <_strtol_l.isra.0+0x8a>
 8006a34:	f04f 32ff 	mov.w	r2, #4294967295
 8006a38:	e7ed      	b.n	8006a16 <_strtol_l.isra.0+0xa2>
 8006a3a:	1c53      	adds	r3, r2, #1
 8006a3c:	d108      	bne.n	8006a50 <_strtol_l.isra.0+0xdc>
 8006a3e:	2322      	movs	r3, #34	@ 0x22
 8006a40:	f8ce 3000 	str.w	r3, [lr]
 8006a44:	4660      	mov	r0, ip
 8006a46:	f1b8 0f00 	cmp.w	r8, #0
 8006a4a:	d0a0      	beq.n	800698e <_strtol_l.isra.0+0x1a>
 8006a4c:	1e69      	subs	r1, r5, #1
 8006a4e:	e006      	b.n	8006a5e <_strtol_l.isra.0+0xea>
 8006a50:	b106      	cbz	r6, 8006a54 <_strtol_l.isra.0+0xe0>
 8006a52:	4240      	negs	r0, r0
 8006a54:	f1b8 0f00 	cmp.w	r8, #0
 8006a58:	d099      	beq.n	800698e <_strtol_l.isra.0+0x1a>
 8006a5a:	2a00      	cmp	r2, #0
 8006a5c:	d1f6      	bne.n	8006a4c <_strtol_l.isra.0+0xd8>
 8006a5e:	f8c8 1000 	str.w	r1, [r8]
 8006a62:	e794      	b.n	800698e <_strtol_l.isra.0+0x1a>
 8006a64:	0800b2fd 	.word	0x0800b2fd

08006a68 <_strtol_r>:
 8006a68:	f7ff bf84 	b.w	8006974 <_strtol_l.isra.0>

08006a6c <strtol>:
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	460a      	mov	r2, r1
 8006a70:	4601      	mov	r1, r0
 8006a72:	4802      	ldr	r0, [pc, #8]	@ (8006a7c <strtol+0x10>)
 8006a74:	6800      	ldr	r0, [r0, #0]
 8006a76:	f7ff bf7d 	b.w	8006974 <_strtol_l.isra.0>
 8006a7a:	bf00      	nop
 8006a7c:	20000018 	.word	0x20000018

08006a80 <__cvt>:
 8006a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a84:	ec57 6b10 	vmov	r6, r7, d0
 8006a88:	2f00      	cmp	r7, #0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	463b      	mov	r3, r7
 8006a90:	bfbb      	ittet	lt
 8006a92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a96:	461f      	movlt	r7, r3
 8006a98:	2300      	movge	r3, #0
 8006a9a:	232d      	movlt	r3, #45	@ 0x2d
 8006a9c:	700b      	strb	r3, [r1, #0]
 8006a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aa0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	f023 0820 	bic.w	r8, r3, #32
 8006aaa:	bfbc      	itt	lt
 8006aac:	4632      	movlt	r2, r6
 8006aae:	4616      	movlt	r6, r2
 8006ab0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ab4:	d005      	beq.n	8006ac2 <__cvt+0x42>
 8006ab6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aba:	d100      	bne.n	8006abe <__cvt+0x3e>
 8006abc:	3401      	adds	r4, #1
 8006abe:	2102      	movs	r1, #2
 8006ac0:	e000      	b.n	8006ac4 <__cvt+0x44>
 8006ac2:	2103      	movs	r1, #3
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	ab02      	add	r3, sp, #8
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	ec47 6b10 	vmov	d0, r6, r7
 8006ad0:	4653      	mov	r3, sl
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	f001 f9b0 	bl	8007e38 <_dtoa_r>
 8006ad8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006adc:	4605      	mov	r5, r0
 8006ade:	d119      	bne.n	8006b14 <__cvt+0x94>
 8006ae0:	f019 0f01 	tst.w	r9, #1
 8006ae4:	d00e      	beq.n	8006b04 <__cvt+0x84>
 8006ae6:	eb00 0904 	add.w	r9, r0, r4
 8006aea:	2200      	movs	r2, #0
 8006aec:	2300      	movs	r3, #0
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 fff1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af6:	b108      	cbz	r0, 8006afc <__cvt+0x7c>
 8006af8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006afc:	2230      	movs	r2, #48	@ 0x30
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	454b      	cmp	r3, r9
 8006b02:	d31e      	bcc.n	8006b42 <__cvt+0xc2>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b08:	1b5b      	subs	r3, r3, r5
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	b004      	add	sp, #16
 8006b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b18:	eb00 0904 	add.w	r9, r0, r4
 8006b1c:	d1e5      	bne.n	8006aea <__cvt+0x6a>
 8006b1e:	7803      	ldrb	r3, [r0, #0]
 8006b20:	2b30      	cmp	r3, #48	@ 0x30
 8006b22:	d10a      	bne.n	8006b3a <__cvt+0xba>
 8006b24:	2200      	movs	r2, #0
 8006b26:	2300      	movs	r3, #0
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 ffd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b30:	b918      	cbnz	r0, 8006b3a <__cvt+0xba>
 8006b32:	f1c4 0401 	rsb	r4, r4, #1
 8006b36:	f8ca 4000 	str.w	r4, [sl]
 8006b3a:	f8da 3000 	ldr.w	r3, [sl]
 8006b3e:	4499      	add	r9, r3
 8006b40:	e7d3      	b.n	8006aea <__cvt+0x6a>
 8006b42:	1c59      	adds	r1, r3, #1
 8006b44:	9103      	str	r1, [sp, #12]
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	e7d9      	b.n	8006afe <__cvt+0x7e>

08006b4a <__exponent>:
 8006b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	bfba      	itte	lt
 8006b50:	4249      	neglt	r1, r1
 8006b52:	232d      	movlt	r3, #45	@ 0x2d
 8006b54:	232b      	movge	r3, #43	@ 0x2b
 8006b56:	2909      	cmp	r1, #9
 8006b58:	7002      	strb	r2, [r0, #0]
 8006b5a:	7043      	strb	r3, [r0, #1]
 8006b5c:	dd29      	ble.n	8006bb2 <__exponent+0x68>
 8006b5e:	f10d 0307 	add.w	r3, sp, #7
 8006b62:	461d      	mov	r5, r3
 8006b64:	270a      	movs	r7, #10
 8006b66:	461a      	mov	r2, r3
 8006b68:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b6c:	fb07 1416 	mls	r4, r7, r6, r1
 8006b70:	3430      	adds	r4, #48	@ 0x30
 8006b72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b76:	460c      	mov	r4, r1
 8006b78:	2c63      	cmp	r4, #99	@ 0x63
 8006b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b7e:	4631      	mov	r1, r6
 8006b80:	dcf1      	bgt.n	8006b66 <__exponent+0x1c>
 8006b82:	3130      	adds	r1, #48	@ 0x30
 8006b84:	1e94      	subs	r4, r2, #2
 8006b86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b8a:	1c41      	adds	r1, r0, #1
 8006b8c:	4623      	mov	r3, r4
 8006b8e:	42ab      	cmp	r3, r5
 8006b90:	d30a      	bcc.n	8006ba8 <__exponent+0x5e>
 8006b92:	f10d 0309 	add.w	r3, sp, #9
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	42ac      	cmp	r4, r5
 8006b9a:	bf88      	it	hi
 8006b9c:	2300      	movhi	r3, #0
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	4403      	add	r3, r0
 8006ba2:	1a18      	subs	r0, r3, r0
 8006ba4:	b003      	add	sp, #12
 8006ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bb0:	e7ed      	b.n	8006b8e <__exponent+0x44>
 8006bb2:	2330      	movs	r3, #48	@ 0x30
 8006bb4:	3130      	adds	r1, #48	@ 0x30
 8006bb6:	7083      	strb	r3, [r0, #2]
 8006bb8:	70c1      	strb	r1, [r0, #3]
 8006bba:	1d03      	adds	r3, r0, #4
 8006bbc:	e7f1      	b.n	8006ba2 <__exponent+0x58>
	...

08006bc0 <_printf_float>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	b08d      	sub	sp, #52	@ 0x34
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bcc:	4616      	mov	r6, r2
 8006bce:	461f      	mov	r7, r3
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	f001 f829 	bl	8007c28 <_localeconv_r>
 8006bd6:	6803      	ldr	r3, [r0, #0]
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7f9 fb50 	bl	8000280 <strlen>
 8006be0:	2300      	movs	r3, #0
 8006be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006be4:	f8d8 3000 	ldr.w	r3, [r8]
 8006be8:	9005      	str	r0, [sp, #20]
 8006bea:	3307      	adds	r3, #7
 8006bec:	f023 0307 	bic.w	r3, r3, #7
 8006bf0:	f103 0208 	add.w	r2, r3, #8
 8006bf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bf8:	f8d4 b000 	ldr.w	fp, [r4]
 8006bfc:	f8c8 2000 	str.w	r2, [r8]
 8006c00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c08:	9307      	str	r3, [sp, #28]
 8006c0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c16:	4b9c      	ldr	r3, [pc, #624]	@ (8006e88 <_printf_float+0x2c8>)
 8006c18:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1c:	f7f9 ff8e 	bl	8000b3c <__aeabi_dcmpun>
 8006c20:	bb70      	cbnz	r0, 8006c80 <_printf_float+0xc0>
 8006c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c26:	4b98      	ldr	r3, [pc, #608]	@ (8006e88 <_printf_float+0x2c8>)
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	f7f9 ff68 	bl	8000b00 <__aeabi_dcmple>
 8006c30:	bb30      	cbnz	r0, 8006c80 <_printf_float+0xc0>
 8006c32:	2200      	movs	r2, #0
 8006c34:	2300      	movs	r3, #0
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 ff57 	bl	8000aec <__aeabi_dcmplt>
 8006c3e:	b110      	cbz	r0, 8006c46 <_printf_float+0x86>
 8006c40:	232d      	movs	r3, #45	@ 0x2d
 8006c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c46:	4a91      	ldr	r2, [pc, #580]	@ (8006e8c <_printf_float+0x2cc>)
 8006c48:	4b91      	ldr	r3, [pc, #580]	@ (8006e90 <_printf_float+0x2d0>)
 8006c4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c4e:	bf8c      	ite	hi
 8006c50:	4690      	movhi	r8, r2
 8006c52:	4698      	movls	r8, r3
 8006c54:	2303      	movs	r3, #3
 8006c56:	6123      	str	r3, [r4, #16]
 8006c58:	f02b 0304 	bic.w	r3, fp, #4
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	f04f 0900 	mov.w	r9, #0
 8006c62:	9700      	str	r7, [sp, #0]
 8006c64:	4633      	mov	r3, r6
 8006c66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f9d2 	bl	8007014 <_printf_common>
 8006c70:	3001      	adds	r0, #1
 8006c72:	f040 808d 	bne.w	8006d90 <_printf_float+0x1d0>
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	b00d      	add	sp, #52	@ 0x34
 8006c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 ff58 	bl	8000b3c <__aeabi_dcmpun>
 8006c8c:	b140      	cbz	r0, 8006ca0 <_printf_float+0xe0>
 8006c8e:	464b      	mov	r3, r9
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfbc      	itt	lt
 8006c94:	232d      	movlt	r3, #45	@ 0x2d
 8006c96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8006e94 <_printf_float+0x2d4>)
 8006c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8006e98 <_printf_float+0x2d8>)
 8006c9e:	e7d4      	b.n	8006c4a <_printf_float+0x8a>
 8006ca0:	6863      	ldr	r3, [r4, #4]
 8006ca2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006ca6:	9206      	str	r2, [sp, #24]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	d13b      	bne.n	8006d24 <_printf_float+0x164>
 8006cac:	2306      	movs	r3, #6
 8006cae:	6063      	str	r3, [r4, #4]
 8006cb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	6022      	str	r2, [r4, #0]
 8006cb8:	9303      	str	r3, [sp, #12]
 8006cba:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006cc0:	ab09      	add	r3, sp, #36	@ 0x24
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	6861      	ldr	r1, [r4, #4]
 8006cc6:	ec49 8b10 	vmov	d0, r8, r9
 8006cca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f7ff fed6 	bl	8006a80 <__cvt>
 8006cd4:	9b06      	ldr	r3, [sp, #24]
 8006cd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cd8:	2b47      	cmp	r3, #71	@ 0x47
 8006cda:	4680      	mov	r8, r0
 8006cdc:	d129      	bne.n	8006d32 <_printf_float+0x172>
 8006cde:	1cc8      	adds	r0, r1, #3
 8006ce0:	db02      	blt.n	8006ce8 <_printf_float+0x128>
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	dd41      	ble.n	8006d6c <_printf_float+0x1ac>
 8006ce8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cec:	fa5f fa8a 	uxtb.w	sl, sl
 8006cf0:	3901      	subs	r1, #1
 8006cf2:	4652      	mov	r2, sl
 8006cf4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cf8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cfa:	f7ff ff26 	bl	8006b4a <__exponent>
 8006cfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d00:	1813      	adds	r3, r2, r0
 8006d02:	2a01      	cmp	r2, #1
 8006d04:	4681      	mov	r9, r0
 8006d06:	6123      	str	r3, [r4, #16]
 8006d08:	dc02      	bgt.n	8006d10 <_printf_float+0x150>
 8006d0a:	6822      	ldr	r2, [r4, #0]
 8006d0c:	07d2      	lsls	r2, r2, #31
 8006d0e:	d501      	bpl.n	8006d14 <_printf_float+0x154>
 8006d10:	3301      	adds	r3, #1
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0a2      	beq.n	8006c62 <_printf_float+0xa2>
 8006d1c:	232d      	movs	r3, #45	@ 0x2d
 8006d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d22:	e79e      	b.n	8006c62 <_printf_float+0xa2>
 8006d24:	9a06      	ldr	r2, [sp, #24]
 8006d26:	2a47      	cmp	r2, #71	@ 0x47
 8006d28:	d1c2      	bne.n	8006cb0 <_printf_float+0xf0>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1c0      	bne.n	8006cb0 <_printf_float+0xf0>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7bd      	b.n	8006cae <_printf_float+0xee>
 8006d32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d36:	d9db      	bls.n	8006cf0 <_printf_float+0x130>
 8006d38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d3c:	d118      	bne.n	8006d70 <_printf_float+0x1b0>
 8006d3e:	2900      	cmp	r1, #0
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	dd0b      	ble.n	8006d5c <_printf_float+0x19c>
 8006d44:	6121      	str	r1, [r4, #16]
 8006d46:	b913      	cbnz	r3, 8006d4e <_printf_float+0x18e>
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	07d0      	lsls	r0, r2, #31
 8006d4c:	d502      	bpl.n	8006d54 <_printf_float+0x194>
 8006d4e:	3301      	adds	r3, #1
 8006d50:	440b      	add	r3, r1
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d56:	f04f 0900 	mov.w	r9, #0
 8006d5a:	e7db      	b.n	8006d14 <_printf_float+0x154>
 8006d5c:	b913      	cbnz	r3, 8006d64 <_printf_float+0x1a4>
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	07d2      	lsls	r2, r2, #31
 8006d62:	d501      	bpl.n	8006d68 <_printf_float+0x1a8>
 8006d64:	3302      	adds	r3, #2
 8006d66:	e7f4      	b.n	8006d52 <_printf_float+0x192>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e7f2      	b.n	8006d52 <_printf_float+0x192>
 8006d6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d72:	4299      	cmp	r1, r3
 8006d74:	db05      	blt.n	8006d82 <_printf_float+0x1c2>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	6121      	str	r1, [r4, #16]
 8006d7a:	07d8      	lsls	r0, r3, #31
 8006d7c:	d5ea      	bpl.n	8006d54 <_printf_float+0x194>
 8006d7e:	1c4b      	adds	r3, r1, #1
 8006d80:	e7e7      	b.n	8006d52 <_printf_float+0x192>
 8006d82:	2900      	cmp	r1, #0
 8006d84:	bfd4      	ite	le
 8006d86:	f1c1 0202 	rsble	r2, r1, #2
 8006d8a:	2201      	movgt	r2, #1
 8006d8c:	4413      	add	r3, r2
 8006d8e:	e7e0      	b.n	8006d52 <_printf_float+0x192>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	055a      	lsls	r2, r3, #21
 8006d94:	d407      	bmi.n	8006da6 <_printf_float+0x1e6>
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	4642      	mov	r2, r8
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	d12b      	bne.n	8006dfc <_printf_float+0x23c>
 8006da4:	e767      	b.n	8006c76 <_printf_float+0xb6>
 8006da6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006daa:	f240 80dd 	bls.w	8006f68 <_printf_float+0x3a8>
 8006dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006db2:	2200      	movs	r2, #0
 8006db4:	2300      	movs	r3, #0
 8006db6:	f7f9 fe8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d033      	beq.n	8006e26 <_printf_float+0x266>
 8006dbe:	4a37      	ldr	r2, [pc, #220]	@ (8006e9c <_printf_float+0x2dc>)
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	f43f af54 	beq.w	8006c76 <_printf_float+0xb6>
 8006dce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dd2:	4543      	cmp	r3, r8
 8006dd4:	db02      	blt.n	8006ddc <_printf_float+0x21c>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	07d8      	lsls	r0, r3, #31
 8006dda:	d50f      	bpl.n	8006dfc <_printf_float+0x23c>
 8006ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f af45 	beq.w	8006c76 <_printf_float+0xb6>
 8006dec:	f04f 0900 	mov.w	r9, #0
 8006df0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006df4:	f104 0a1a 	add.w	sl, r4, #26
 8006df8:	45c8      	cmp	r8, r9
 8006dfa:	dc09      	bgt.n	8006e10 <_printf_float+0x250>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	079b      	lsls	r3, r3, #30
 8006e00:	f100 8103 	bmi.w	800700a <_printf_float+0x44a>
 8006e04:	68e0      	ldr	r0, [r4, #12]
 8006e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e08:	4298      	cmp	r0, r3
 8006e0a:	bfb8      	it	lt
 8006e0c:	4618      	movlt	r0, r3
 8006e0e:	e734      	b.n	8006c7a <_printf_float+0xba>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4652      	mov	r2, sl
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f af2b 	beq.w	8006c76 <_printf_float+0xb6>
 8006e20:	f109 0901 	add.w	r9, r9, #1
 8006e24:	e7e8      	b.n	8006df8 <_printf_float+0x238>
 8006e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dc39      	bgt.n	8006ea0 <_printf_float+0x2e0>
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e9c <_printf_float+0x2dc>)
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f af1d 	beq.w	8006c76 <_printf_float+0xb6>
 8006e3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e40:	ea59 0303 	orrs.w	r3, r9, r3
 8006e44:	d102      	bne.n	8006e4c <_printf_float+0x28c>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	07d9      	lsls	r1, r3, #31
 8006e4a:	d5d7      	bpl.n	8006dfc <_printf_float+0x23c>
 8006e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f af0d 	beq.w	8006c76 <_printf_float+0xb6>
 8006e5c:	f04f 0a00 	mov.w	sl, #0
 8006e60:	f104 0b1a 	add.w	fp, r4, #26
 8006e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e66:	425b      	negs	r3, r3
 8006e68:	4553      	cmp	r3, sl
 8006e6a:	dc01      	bgt.n	8006e70 <_printf_float+0x2b0>
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	e793      	b.n	8006d98 <_printf_float+0x1d8>
 8006e70:	2301      	movs	r3, #1
 8006e72:	465a      	mov	r2, fp
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f aefb 	beq.w	8006c76 <_printf_float+0xb6>
 8006e80:	f10a 0a01 	add.w	sl, sl, #1
 8006e84:	e7ee      	b.n	8006e64 <_printf_float+0x2a4>
 8006e86:	bf00      	nop
 8006e88:	7fefffff 	.word	0x7fefffff
 8006e8c:	0800b401 	.word	0x0800b401
 8006e90:	0800b3fd 	.word	0x0800b3fd
 8006e94:	0800b409 	.word	0x0800b409
 8006e98:	0800b405 	.word	0x0800b405
 8006e9c:	0800b40d 	.word	0x0800b40d
 8006ea0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ea2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ea6:	4553      	cmp	r3, sl
 8006ea8:	bfa8      	it	ge
 8006eaa:	4653      	movge	r3, sl
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	4699      	mov	r9, r3
 8006eb0:	dc36      	bgt.n	8006f20 <_printf_float+0x360>
 8006eb2:	f04f 0b00 	mov.w	fp, #0
 8006eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eba:	f104 021a 	add.w	r2, r4, #26
 8006ebe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ec0:	9306      	str	r3, [sp, #24]
 8006ec2:	eba3 0309 	sub.w	r3, r3, r9
 8006ec6:	455b      	cmp	r3, fp
 8006ec8:	dc31      	bgt.n	8006f2e <_printf_float+0x36e>
 8006eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ecc:	459a      	cmp	sl, r3
 8006ece:	dc3a      	bgt.n	8006f46 <_printf_float+0x386>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	07da      	lsls	r2, r3, #31
 8006ed4:	d437      	bmi.n	8006f46 <_printf_float+0x386>
 8006ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed8:	ebaa 0903 	sub.w	r9, sl, r3
 8006edc:	9b06      	ldr	r3, [sp, #24]
 8006ede:	ebaa 0303 	sub.w	r3, sl, r3
 8006ee2:	4599      	cmp	r9, r3
 8006ee4:	bfa8      	it	ge
 8006ee6:	4699      	movge	r9, r3
 8006ee8:	f1b9 0f00 	cmp.w	r9, #0
 8006eec:	dc33      	bgt.n	8006f56 <_printf_float+0x396>
 8006eee:	f04f 0800 	mov.w	r8, #0
 8006ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ef6:	f104 0b1a 	add.w	fp, r4, #26
 8006efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efc:	ebaa 0303 	sub.w	r3, sl, r3
 8006f00:	eba3 0309 	sub.w	r3, r3, r9
 8006f04:	4543      	cmp	r3, r8
 8006f06:	f77f af79 	ble.w	8006dfc <_printf_float+0x23c>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	465a      	mov	r2, fp
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f aeae 	beq.w	8006c76 <_printf_float+0xb6>
 8006f1a:	f108 0801 	add.w	r8, r8, #1
 8006f1e:	e7ec      	b.n	8006efa <_printf_float+0x33a>
 8006f20:	4642      	mov	r2, r8
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d1c2      	bne.n	8006eb2 <_printf_float+0x2f2>
 8006f2c:	e6a3      	b.n	8006c76 <_printf_float+0xb6>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4631      	mov	r1, r6
 8006f32:	4628      	mov	r0, r5
 8006f34:	9206      	str	r2, [sp, #24]
 8006f36:	47b8      	blx	r7
 8006f38:	3001      	adds	r0, #1
 8006f3a:	f43f ae9c 	beq.w	8006c76 <_printf_float+0xb6>
 8006f3e:	9a06      	ldr	r2, [sp, #24]
 8006f40:	f10b 0b01 	add.w	fp, fp, #1
 8006f44:	e7bb      	b.n	8006ebe <_printf_float+0x2fe>
 8006f46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	d1c0      	bne.n	8006ed6 <_printf_float+0x316>
 8006f54:	e68f      	b.n	8006c76 <_printf_float+0xb6>
 8006f56:	9a06      	ldr	r2, [sp, #24]
 8006f58:	464b      	mov	r3, r9
 8006f5a:	4442      	add	r2, r8
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	d1c3      	bne.n	8006eee <_printf_float+0x32e>
 8006f66:	e686      	b.n	8006c76 <_printf_float+0xb6>
 8006f68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f6c:	f1ba 0f01 	cmp.w	sl, #1
 8006f70:	dc01      	bgt.n	8006f76 <_printf_float+0x3b6>
 8006f72:	07db      	lsls	r3, r3, #31
 8006f74:	d536      	bpl.n	8006fe4 <_printf_float+0x424>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4642      	mov	r2, r8
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae78 	beq.w	8006c76 <_printf_float+0xb6>
 8006f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f ae70 	beq.w	8006c76 <_printf_float+0xb6>
 8006f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fa2:	f7f9 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fa6:	b9c0      	cbnz	r0, 8006fda <_printf_float+0x41a>
 8006fa8:	4653      	mov	r3, sl
 8006faa:	f108 0201 	add.w	r2, r8, #1
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d10c      	bne.n	8006fd2 <_printf_float+0x412>
 8006fb8:	e65d      	b.n	8006c76 <_printf_float+0xb6>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	465a      	mov	r2, fp
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f43f ae56 	beq.w	8006c76 <_printf_float+0xb6>
 8006fca:	f108 0801 	add.w	r8, r8, #1
 8006fce:	45d0      	cmp	r8, sl
 8006fd0:	dbf3      	blt.n	8006fba <_printf_float+0x3fa>
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fd8:	e6df      	b.n	8006d9a <_printf_float+0x1da>
 8006fda:	f04f 0800 	mov.w	r8, #0
 8006fde:	f104 0b1a 	add.w	fp, r4, #26
 8006fe2:	e7f4      	b.n	8006fce <_printf_float+0x40e>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4642      	mov	r2, r8
 8006fe8:	e7e1      	b.n	8006fae <_printf_float+0x3ee>
 8006fea:	2301      	movs	r3, #1
 8006fec:	464a      	mov	r2, r9
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b8      	blx	r7
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	f43f ae3e 	beq.w	8006c76 <_printf_float+0xb6>
 8006ffa:	f108 0801 	add.w	r8, r8, #1
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007002:	1a5b      	subs	r3, r3, r1
 8007004:	4543      	cmp	r3, r8
 8007006:	dcf0      	bgt.n	8006fea <_printf_float+0x42a>
 8007008:	e6fc      	b.n	8006e04 <_printf_float+0x244>
 800700a:	f04f 0800 	mov.w	r8, #0
 800700e:	f104 0919 	add.w	r9, r4, #25
 8007012:	e7f4      	b.n	8006ffe <_printf_float+0x43e>

08007014 <_printf_common>:
 8007014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	4616      	mov	r6, r2
 800701a:	4698      	mov	r8, r3
 800701c:	688a      	ldr	r2, [r1, #8]
 800701e:	690b      	ldr	r3, [r1, #16]
 8007020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007024:	4293      	cmp	r3, r2
 8007026:	bfb8      	it	lt
 8007028:	4613      	movlt	r3, r2
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007030:	4607      	mov	r7, r0
 8007032:	460c      	mov	r4, r1
 8007034:	b10a      	cbz	r2, 800703a <_printf_common+0x26>
 8007036:	3301      	adds	r3, #1
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	0699      	lsls	r1, r3, #26
 800703e:	bf42      	ittt	mi
 8007040:	6833      	ldrmi	r3, [r6, #0]
 8007042:	3302      	addmi	r3, #2
 8007044:	6033      	strmi	r3, [r6, #0]
 8007046:	6825      	ldr	r5, [r4, #0]
 8007048:	f015 0506 	ands.w	r5, r5, #6
 800704c:	d106      	bne.n	800705c <_printf_common+0x48>
 800704e:	f104 0a19 	add.w	sl, r4, #25
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	6832      	ldr	r2, [r6, #0]
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	42ab      	cmp	r3, r5
 800705a:	dc26      	bgt.n	80070aa <_printf_common+0x96>
 800705c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	3b00      	subs	r3, #0
 8007064:	bf18      	it	ne
 8007066:	2301      	movne	r3, #1
 8007068:	0692      	lsls	r2, r2, #26
 800706a:	d42b      	bmi.n	80070c4 <_printf_common+0xb0>
 800706c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	47c8      	blx	r9
 8007076:	3001      	adds	r0, #1
 8007078:	d01e      	beq.n	80070b8 <_printf_common+0xa4>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6922      	ldr	r2, [r4, #16]
 800707e:	f003 0306 	and.w	r3, r3, #6
 8007082:	2b04      	cmp	r3, #4
 8007084:	bf02      	ittt	eq
 8007086:	68e5      	ldreq	r5, [r4, #12]
 8007088:	6833      	ldreq	r3, [r6, #0]
 800708a:	1aed      	subeq	r5, r5, r3
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	bf0c      	ite	eq
 8007090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007094:	2500      	movne	r5, #0
 8007096:	4293      	cmp	r3, r2
 8007098:	bfc4      	itt	gt
 800709a:	1a9b      	subgt	r3, r3, r2
 800709c:	18ed      	addgt	r5, r5, r3
 800709e:	2600      	movs	r6, #0
 80070a0:	341a      	adds	r4, #26
 80070a2:	42b5      	cmp	r5, r6
 80070a4:	d11a      	bne.n	80070dc <_printf_common+0xc8>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e008      	b.n	80070bc <_printf_common+0xa8>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4652      	mov	r2, sl
 80070ae:	4641      	mov	r1, r8
 80070b0:	4638      	mov	r0, r7
 80070b2:	47c8      	blx	r9
 80070b4:	3001      	adds	r0, #1
 80070b6:	d103      	bne.n	80070c0 <_printf_common+0xac>
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c0:	3501      	adds	r5, #1
 80070c2:	e7c6      	b.n	8007052 <_printf_common+0x3e>
 80070c4:	18e1      	adds	r1, r4, r3
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	2030      	movs	r0, #48	@ 0x30
 80070ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ce:	4422      	add	r2, r4
 80070d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d8:	3302      	adds	r3, #2
 80070da:	e7c7      	b.n	800706c <_printf_common+0x58>
 80070dc:	2301      	movs	r3, #1
 80070de:	4622      	mov	r2, r4
 80070e0:	4641      	mov	r1, r8
 80070e2:	4638      	mov	r0, r7
 80070e4:	47c8      	blx	r9
 80070e6:	3001      	adds	r0, #1
 80070e8:	d0e6      	beq.n	80070b8 <_printf_common+0xa4>
 80070ea:	3601      	adds	r6, #1
 80070ec:	e7d9      	b.n	80070a2 <_printf_common+0x8e>
	...

080070f0 <_printf_i>:
 80070f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	7e0f      	ldrb	r7, [r1, #24]
 80070f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f8:	2f78      	cmp	r7, #120	@ 0x78
 80070fa:	4691      	mov	r9, r2
 80070fc:	4680      	mov	r8, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	469a      	mov	sl, r3
 8007102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007106:	d807      	bhi.n	8007118 <_printf_i+0x28>
 8007108:	2f62      	cmp	r7, #98	@ 0x62
 800710a:	d80a      	bhi.n	8007122 <_printf_i+0x32>
 800710c:	2f00      	cmp	r7, #0
 800710e:	f000 80d1 	beq.w	80072b4 <_printf_i+0x1c4>
 8007112:	2f58      	cmp	r7, #88	@ 0x58
 8007114:	f000 80b8 	beq.w	8007288 <_printf_i+0x198>
 8007118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800711c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007120:	e03a      	b.n	8007198 <_printf_i+0xa8>
 8007122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007126:	2b15      	cmp	r3, #21
 8007128:	d8f6      	bhi.n	8007118 <_printf_i+0x28>
 800712a:	a101      	add	r1, pc, #4	@ (adr r1, 8007130 <_printf_i+0x40>)
 800712c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007130:	08007189 	.word	0x08007189
 8007134:	0800719d 	.word	0x0800719d
 8007138:	08007119 	.word	0x08007119
 800713c:	08007119 	.word	0x08007119
 8007140:	08007119 	.word	0x08007119
 8007144:	08007119 	.word	0x08007119
 8007148:	0800719d 	.word	0x0800719d
 800714c:	08007119 	.word	0x08007119
 8007150:	08007119 	.word	0x08007119
 8007154:	08007119 	.word	0x08007119
 8007158:	08007119 	.word	0x08007119
 800715c:	0800729b 	.word	0x0800729b
 8007160:	080071c7 	.word	0x080071c7
 8007164:	08007255 	.word	0x08007255
 8007168:	08007119 	.word	0x08007119
 800716c:	08007119 	.word	0x08007119
 8007170:	080072bd 	.word	0x080072bd
 8007174:	08007119 	.word	0x08007119
 8007178:	080071c7 	.word	0x080071c7
 800717c:	08007119 	.word	0x08007119
 8007180:	08007119 	.word	0x08007119
 8007184:	0800725d 	.word	0x0800725d
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	1d1a      	adds	r2, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6032      	str	r2, [r6, #0]
 8007190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007198:	2301      	movs	r3, #1
 800719a:	e09c      	b.n	80072d6 <_printf_i+0x1e6>
 800719c:	6833      	ldr	r3, [r6, #0]
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	1d19      	adds	r1, r3, #4
 80071a2:	6031      	str	r1, [r6, #0]
 80071a4:	0606      	lsls	r6, r0, #24
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0xbc>
 80071a8:	681d      	ldr	r5, [r3, #0]
 80071aa:	e003      	b.n	80071b4 <_printf_i+0xc4>
 80071ac:	0645      	lsls	r5, r0, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0xb8>
 80071b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	da03      	bge.n	80071c0 <_printf_i+0xd0>
 80071b8:	232d      	movs	r3, #45	@ 0x2d
 80071ba:	426d      	negs	r5, r5
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c0:	4858      	ldr	r0, [pc, #352]	@ (8007324 <_printf_i+0x234>)
 80071c2:	230a      	movs	r3, #10
 80071c4:	e011      	b.n	80071ea <_printf_i+0xfa>
 80071c6:	6821      	ldr	r1, [r4, #0]
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	0608      	lsls	r0, r1, #24
 80071cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071d0:	d402      	bmi.n	80071d8 <_printf_i+0xe8>
 80071d2:	0649      	lsls	r1, r1, #25
 80071d4:	bf48      	it	mi
 80071d6:	b2ad      	uxthmi	r5, r5
 80071d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071da:	4852      	ldr	r0, [pc, #328]	@ (8007324 <_printf_i+0x234>)
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	bf14      	ite	ne
 80071e0:	230a      	movne	r3, #10
 80071e2:	2308      	moveq	r3, #8
 80071e4:	2100      	movs	r1, #0
 80071e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071ea:	6866      	ldr	r6, [r4, #4]
 80071ec:	60a6      	str	r6, [r4, #8]
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	db05      	blt.n	80071fe <_printf_i+0x10e>
 80071f2:	6821      	ldr	r1, [r4, #0]
 80071f4:	432e      	orrs	r6, r5
 80071f6:	f021 0104 	bic.w	r1, r1, #4
 80071fa:	6021      	str	r1, [r4, #0]
 80071fc:	d04b      	beq.n	8007296 <_printf_i+0x1a6>
 80071fe:	4616      	mov	r6, r2
 8007200:	fbb5 f1f3 	udiv	r1, r5, r3
 8007204:	fb03 5711 	mls	r7, r3, r1, r5
 8007208:	5dc7      	ldrb	r7, [r0, r7]
 800720a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800720e:	462f      	mov	r7, r5
 8007210:	42bb      	cmp	r3, r7
 8007212:	460d      	mov	r5, r1
 8007214:	d9f4      	bls.n	8007200 <_printf_i+0x110>
 8007216:	2b08      	cmp	r3, #8
 8007218:	d10b      	bne.n	8007232 <_printf_i+0x142>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	07df      	lsls	r7, r3, #31
 800721e:	d508      	bpl.n	8007232 <_printf_i+0x142>
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	6861      	ldr	r1, [r4, #4]
 8007224:	4299      	cmp	r1, r3
 8007226:	bfde      	ittt	le
 8007228:	2330      	movle	r3, #48	@ 0x30
 800722a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800722e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007232:	1b92      	subs	r2, r2, r6
 8007234:	6122      	str	r2, [r4, #16]
 8007236:	f8cd a000 	str.w	sl, [sp]
 800723a:	464b      	mov	r3, r9
 800723c:	aa03      	add	r2, sp, #12
 800723e:	4621      	mov	r1, r4
 8007240:	4640      	mov	r0, r8
 8007242:	f7ff fee7 	bl	8007014 <_printf_common>
 8007246:	3001      	adds	r0, #1
 8007248:	d14a      	bne.n	80072e0 <_printf_i+0x1f0>
 800724a:	f04f 30ff 	mov.w	r0, #4294967295
 800724e:	b004      	add	sp, #16
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	f043 0320 	orr.w	r3, r3, #32
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	4832      	ldr	r0, [pc, #200]	@ (8007328 <_printf_i+0x238>)
 800725e:	2778      	movs	r7, #120	@ 0x78
 8007260:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	6831      	ldr	r1, [r6, #0]
 8007268:	061f      	lsls	r7, r3, #24
 800726a:	f851 5b04 	ldr.w	r5, [r1], #4
 800726e:	d402      	bmi.n	8007276 <_printf_i+0x186>
 8007270:	065f      	lsls	r7, r3, #25
 8007272:	bf48      	it	mi
 8007274:	b2ad      	uxthmi	r5, r5
 8007276:	6031      	str	r1, [r6, #0]
 8007278:	07d9      	lsls	r1, r3, #31
 800727a:	bf44      	itt	mi
 800727c:	f043 0320 	orrmi.w	r3, r3, #32
 8007280:	6023      	strmi	r3, [r4, #0]
 8007282:	b11d      	cbz	r5, 800728c <_printf_i+0x19c>
 8007284:	2310      	movs	r3, #16
 8007286:	e7ad      	b.n	80071e4 <_printf_i+0xf4>
 8007288:	4826      	ldr	r0, [pc, #152]	@ (8007324 <_printf_i+0x234>)
 800728a:	e7e9      	b.n	8007260 <_printf_i+0x170>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	f023 0320 	bic.w	r3, r3, #32
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	e7f6      	b.n	8007284 <_printf_i+0x194>
 8007296:	4616      	mov	r6, r2
 8007298:	e7bd      	b.n	8007216 <_printf_i+0x126>
 800729a:	6833      	ldr	r3, [r6, #0]
 800729c:	6825      	ldr	r5, [r4, #0]
 800729e:	6961      	ldr	r1, [r4, #20]
 80072a0:	1d18      	adds	r0, r3, #4
 80072a2:	6030      	str	r0, [r6, #0]
 80072a4:	062e      	lsls	r6, r5, #24
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	d501      	bpl.n	80072ae <_printf_i+0x1be>
 80072aa:	6019      	str	r1, [r3, #0]
 80072ac:	e002      	b.n	80072b4 <_printf_i+0x1c4>
 80072ae:	0668      	lsls	r0, r5, #25
 80072b0:	d5fb      	bpl.n	80072aa <_printf_i+0x1ba>
 80072b2:	8019      	strh	r1, [r3, #0]
 80072b4:	2300      	movs	r3, #0
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	4616      	mov	r6, r2
 80072ba:	e7bc      	b.n	8007236 <_printf_i+0x146>
 80072bc:	6833      	ldr	r3, [r6, #0]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	6032      	str	r2, [r6, #0]
 80072c2:	681e      	ldr	r6, [r3, #0]
 80072c4:	6862      	ldr	r2, [r4, #4]
 80072c6:	2100      	movs	r1, #0
 80072c8:	4630      	mov	r0, r6
 80072ca:	f7f8 ff89 	bl	80001e0 <memchr>
 80072ce:	b108      	cbz	r0, 80072d4 <_printf_i+0x1e4>
 80072d0:	1b80      	subs	r0, r0, r6
 80072d2:	6060      	str	r0, [r4, #4]
 80072d4:	6863      	ldr	r3, [r4, #4]
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	2300      	movs	r3, #0
 80072da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072de:	e7aa      	b.n	8007236 <_printf_i+0x146>
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	4632      	mov	r2, r6
 80072e4:	4649      	mov	r1, r9
 80072e6:	4640      	mov	r0, r8
 80072e8:	47d0      	blx	sl
 80072ea:	3001      	adds	r0, #1
 80072ec:	d0ad      	beq.n	800724a <_printf_i+0x15a>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	079b      	lsls	r3, r3, #30
 80072f2:	d413      	bmi.n	800731c <_printf_i+0x22c>
 80072f4:	68e0      	ldr	r0, [r4, #12]
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	4298      	cmp	r0, r3
 80072fa:	bfb8      	it	lt
 80072fc:	4618      	movlt	r0, r3
 80072fe:	e7a6      	b.n	800724e <_printf_i+0x15e>
 8007300:	2301      	movs	r3, #1
 8007302:	4632      	mov	r2, r6
 8007304:	4649      	mov	r1, r9
 8007306:	4640      	mov	r0, r8
 8007308:	47d0      	blx	sl
 800730a:	3001      	adds	r0, #1
 800730c:	d09d      	beq.n	800724a <_printf_i+0x15a>
 800730e:	3501      	adds	r5, #1
 8007310:	68e3      	ldr	r3, [r4, #12]
 8007312:	9903      	ldr	r1, [sp, #12]
 8007314:	1a5b      	subs	r3, r3, r1
 8007316:	42ab      	cmp	r3, r5
 8007318:	dcf2      	bgt.n	8007300 <_printf_i+0x210>
 800731a:	e7eb      	b.n	80072f4 <_printf_i+0x204>
 800731c:	2500      	movs	r5, #0
 800731e:	f104 0619 	add.w	r6, r4, #25
 8007322:	e7f5      	b.n	8007310 <_printf_i+0x220>
 8007324:	0800b40f 	.word	0x0800b40f
 8007328:	0800b420 	.word	0x0800b420

0800732c <_scanf_float>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	b087      	sub	sp, #28
 8007332:	4691      	mov	r9, r2
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	688b      	ldr	r3, [r1, #8]
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800733e:	bf81      	itttt	hi
 8007340:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007344:	eb03 0b05 	addhi.w	fp, r3, r5
 8007348:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800734c:	608b      	strhi	r3, [r1, #8]
 800734e:	680b      	ldr	r3, [r1, #0]
 8007350:	460a      	mov	r2, r1
 8007352:	f04f 0500 	mov.w	r5, #0
 8007356:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800735a:	f842 3b1c 	str.w	r3, [r2], #28
 800735e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007362:	4680      	mov	r8, r0
 8007364:	460c      	mov	r4, r1
 8007366:	bf98      	it	ls
 8007368:	f04f 0b00 	movls.w	fp, #0
 800736c:	9201      	str	r2, [sp, #4]
 800736e:	4616      	mov	r6, r2
 8007370:	46aa      	mov	sl, r5
 8007372:	462f      	mov	r7, r5
 8007374:	9502      	str	r5, [sp, #8]
 8007376:	68a2      	ldr	r2, [r4, #8]
 8007378:	b15a      	cbz	r2, 8007392 <_scanf_float+0x66>
 800737a:	f8d9 3000 	ldr.w	r3, [r9]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b4e      	cmp	r3, #78	@ 0x4e
 8007382:	d863      	bhi.n	800744c <_scanf_float+0x120>
 8007384:	2b40      	cmp	r3, #64	@ 0x40
 8007386:	d83b      	bhi.n	8007400 <_scanf_float+0xd4>
 8007388:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800738c:	b2c8      	uxtb	r0, r1
 800738e:	280e      	cmp	r0, #14
 8007390:	d939      	bls.n	8007406 <_scanf_float+0xda>
 8007392:	b11f      	cbz	r7, 800739c <_scanf_float+0x70>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a0:	f1ba 0f01 	cmp.w	sl, #1
 80073a4:	f200 8114 	bhi.w	80075d0 <_scanf_float+0x2a4>
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	429e      	cmp	r6, r3
 80073ac:	f200 8105 	bhi.w	80075ba <_scanf_float+0x28e>
 80073b0:	2001      	movs	r0, #1
 80073b2:	b007      	add	sp, #28
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80073bc:	2a0d      	cmp	r2, #13
 80073be:	d8e8      	bhi.n	8007392 <_scanf_float+0x66>
 80073c0:	a101      	add	r1, pc, #4	@ (adr r1, 80073c8 <_scanf_float+0x9c>)
 80073c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	08007511 	.word	0x08007511
 80073cc:	08007393 	.word	0x08007393
 80073d0:	08007393 	.word	0x08007393
 80073d4:	08007393 	.word	0x08007393
 80073d8:	0800756d 	.word	0x0800756d
 80073dc:	08007547 	.word	0x08007547
 80073e0:	08007393 	.word	0x08007393
 80073e4:	08007393 	.word	0x08007393
 80073e8:	0800751f 	.word	0x0800751f
 80073ec:	08007393 	.word	0x08007393
 80073f0:	08007393 	.word	0x08007393
 80073f4:	08007393 	.word	0x08007393
 80073f8:	08007393 	.word	0x08007393
 80073fc:	080074db 	.word	0x080074db
 8007400:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007404:	e7da      	b.n	80073bc <_scanf_float+0x90>
 8007406:	290e      	cmp	r1, #14
 8007408:	d8c3      	bhi.n	8007392 <_scanf_float+0x66>
 800740a:	a001      	add	r0, pc, #4	@ (adr r0, 8007410 <_scanf_float+0xe4>)
 800740c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007410:	080074cb 	.word	0x080074cb
 8007414:	08007393 	.word	0x08007393
 8007418:	080074cb 	.word	0x080074cb
 800741c:	0800755b 	.word	0x0800755b
 8007420:	08007393 	.word	0x08007393
 8007424:	0800746d 	.word	0x0800746d
 8007428:	080074b1 	.word	0x080074b1
 800742c:	080074b1 	.word	0x080074b1
 8007430:	080074b1 	.word	0x080074b1
 8007434:	080074b1 	.word	0x080074b1
 8007438:	080074b1 	.word	0x080074b1
 800743c:	080074b1 	.word	0x080074b1
 8007440:	080074b1 	.word	0x080074b1
 8007444:	080074b1 	.word	0x080074b1
 8007448:	080074b1 	.word	0x080074b1
 800744c:	2b6e      	cmp	r3, #110	@ 0x6e
 800744e:	d809      	bhi.n	8007464 <_scanf_float+0x138>
 8007450:	2b60      	cmp	r3, #96	@ 0x60
 8007452:	d8b1      	bhi.n	80073b8 <_scanf_float+0x8c>
 8007454:	2b54      	cmp	r3, #84	@ 0x54
 8007456:	d07b      	beq.n	8007550 <_scanf_float+0x224>
 8007458:	2b59      	cmp	r3, #89	@ 0x59
 800745a:	d19a      	bne.n	8007392 <_scanf_float+0x66>
 800745c:	2d07      	cmp	r5, #7
 800745e:	d198      	bne.n	8007392 <_scanf_float+0x66>
 8007460:	2508      	movs	r5, #8
 8007462:	e02f      	b.n	80074c4 <_scanf_float+0x198>
 8007464:	2b74      	cmp	r3, #116	@ 0x74
 8007466:	d073      	beq.n	8007550 <_scanf_float+0x224>
 8007468:	2b79      	cmp	r3, #121	@ 0x79
 800746a:	e7f6      	b.n	800745a <_scanf_float+0x12e>
 800746c:	6821      	ldr	r1, [r4, #0]
 800746e:	05c8      	lsls	r0, r1, #23
 8007470:	d51e      	bpl.n	80074b0 <_scanf_float+0x184>
 8007472:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007476:	6021      	str	r1, [r4, #0]
 8007478:	3701      	adds	r7, #1
 800747a:	f1bb 0f00 	cmp.w	fp, #0
 800747e:	d003      	beq.n	8007488 <_scanf_float+0x15c>
 8007480:	3201      	adds	r2, #1
 8007482:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007486:	60a2      	str	r2, [r4, #8]
 8007488:	68a3      	ldr	r3, [r4, #8]
 800748a:	3b01      	subs	r3, #1
 800748c:	60a3      	str	r3, [r4, #8]
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	3301      	adds	r3, #1
 8007492:	6123      	str	r3, [r4, #16]
 8007494:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	f8c9 3004 	str.w	r3, [r9, #4]
 80074a0:	f340 8082 	ble.w	80075a8 <_scanf_float+0x27c>
 80074a4:	f8d9 3000 	ldr.w	r3, [r9]
 80074a8:	3301      	adds	r3, #1
 80074aa:	f8c9 3000 	str.w	r3, [r9]
 80074ae:	e762      	b.n	8007376 <_scanf_float+0x4a>
 80074b0:	eb1a 0105 	adds.w	r1, sl, r5
 80074b4:	f47f af6d 	bne.w	8007392 <_scanf_float+0x66>
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80074be:	6022      	str	r2, [r4, #0]
 80074c0:	460d      	mov	r5, r1
 80074c2:	468a      	mov	sl, r1
 80074c4:	f806 3b01 	strb.w	r3, [r6], #1
 80074c8:	e7de      	b.n	8007488 <_scanf_float+0x15c>
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	0610      	lsls	r0, r2, #24
 80074ce:	f57f af60 	bpl.w	8007392 <_scanf_float+0x66>
 80074d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074d6:	6022      	str	r2, [r4, #0]
 80074d8:	e7f4      	b.n	80074c4 <_scanf_float+0x198>
 80074da:	f1ba 0f00 	cmp.w	sl, #0
 80074de:	d10c      	bne.n	80074fa <_scanf_float+0x1ce>
 80074e0:	b977      	cbnz	r7, 8007500 <_scanf_float+0x1d4>
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074ec:	d108      	bne.n	8007500 <_scanf_float+0x1d4>
 80074ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074f2:	6022      	str	r2, [r4, #0]
 80074f4:	f04f 0a01 	mov.w	sl, #1
 80074f8:	e7e4      	b.n	80074c4 <_scanf_float+0x198>
 80074fa:	f1ba 0f02 	cmp.w	sl, #2
 80074fe:	d050      	beq.n	80075a2 <_scanf_float+0x276>
 8007500:	2d01      	cmp	r5, #1
 8007502:	d002      	beq.n	800750a <_scanf_float+0x1de>
 8007504:	2d04      	cmp	r5, #4
 8007506:	f47f af44 	bne.w	8007392 <_scanf_float+0x66>
 800750a:	3501      	adds	r5, #1
 800750c:	b2ed      	uxtb	r5, r5
 800750e:	e7d9      	b.n	80074c4 <_scanf_float+0x198>
 8007510:	f1ba 0f01 	cmp.w	sl, #1
 8007514:	f47f af3d 	bne.w	8007392 <_scanf_float+0x66>
 8007518:	f04f 0a02 	mov.w	sl, #2
 800751c:	e7d2      	b.n	80074c4 <_scanf_float+0x198>
 800751e:	b975      	cbnz	r5, 800753e <_scanf_float+0x212>
 8007520:	2f00      	cmp	r7, #0
 8007522:	f47f af37 	bne.w	8007394 <_scanf_float+0x68>
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800752c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007530:	f040 8103 	bne.w	800773a <_scanf_float+0x40e>
 8007534:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007538:	6022      	str	r2, [r4, #0]
 800753a:	2501      	movs	r5, #1
 800753c:	e7c2      	b.n	80074c4 <_scanf_float+0x198>
 800753e:	2d03      	cmp	r5, #3
 8007540:	d0e3      	beq.n	800750a <_scanf_float+0x1de>
 8007542:	2d05      	cmp	r5, #5
 8007544:	e7df      	b.n	8007506 <_scanf_float+0x1da>
 8007546:	2d02      	cmp	r5, #2
 8007548:	f47f af23 	bne.w	8007392 <_scanf_float+0x66>
 800754c:	2503      	movs	r5, #3
 800754e:	e7b9      	b.n	80074c4 <_scanf_float+0x198>
 8007550:	2d06      	cmp	r5, #6
 8007552:	f47f af1e 	bne.w	8007392 <_scanf_float+0x66>
 8007556:	2507      	movs	r5, #7
 8007558:	e7b4      	b.n	80074c4 <_scanf_float+0x198>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	0591      	lsls	r1, r2, #22
 800755e:	f57f af18 	bpl.w	8007392 <_scanf_float+0x66>
 8007562:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007566:	6022      	str	r2, [r4, #0]
 8007568:	9702      	str	r7, [sp, #8]
 800756a:	e7ab      	b.n	80074c4 <_scanf_float+0x198>
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007572:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007576:	d005      	beq.n	8007584 <_scanf_float+0x258>
 8007578:	0550      	lsls	r0, r2, #21
 800757a:	f57f af0a 	bpl.w	8007392 <_scanf_float+0x66>
 800757e:	2f00      	cmp	r7, #0
 8007580:	f000 80db 	beq.w	800773a <_scanf_float+0x40e>
 8007584:	0591      	lsls	r1, r2, #22
 8007586:	bf58      	it	pl
 8007588:	9902      	ldrpl	r1, [sp, #8]
 800758a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800758e:	bf58      	it	pl
 8007590:	1a79      	subpl	r1, r7, r1
 8007592:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007596:	bf58      	it	pl
 8007598:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800759c:	6022      	str	r2, [r4, #0]
 800759e:	2700      	movs	r7, #0
 80075a0:	e790      	b.n	80074c4 <_scanf_float+0x198>
 80075a2:	f04f 0a03 	mov.w	sl, #3
 80075a6:	e78d      	b.n	80074c4 <_scanf_float+0x198>
 80075a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80075ac:	4649      	mov	r1, r9
 80075ae:	4640      	mov	r0, r8
 80075b0:	4798      	blx	r3
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f43f aedf 	beq.w	8007376 <_scanf_float+0x4a>
 80075b8:	e6eb      	b.n	8007392 <_scanf_float+0x66>
 80075ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075c2:	464a      	mov	r2, r9
 80075c4:	4640      	mov	r0, r8
 80075c6:	4798      	blx	r3
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	e6eb      	b.n	80073a8 <_scanf_float+0x7c>
 80075d0:	1e6b      	subs	r3, r5, #1
 80075d2:	2b06      	cmp	r3, #6
 80075d4:	d824      	bhi.n	8007620 <_scanf_float+0x2f4>
 80075d6:	2d02      	cmp	r5, #2
 80075d8:	d836      	bhi.n	8007648 <_scanf_float+0x31c>
 80075da:	9b01      	ldr	r3, [sp, #4]
 80075dc:	429e      	cmp	r6, r3
 80075de:	f67f aee7 	bls.w	80073b0 <_scanf_float+0x84>
 80075e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ea:	464a      	mov	r2, r9
 80075ec:	4640      	mov	r0, r8
 80075ee:	4798      	blx	r3
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	e7f0      	b.n	80075da <_scanf_float+0x2ae>
 80075f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007600:	464a      	mov	r2, r9
 8007602:	4640      	mov	r0, r8
 8007604:	4798      	blx	r3
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	3b01      	subs	r3, #1
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007610:	fa5f fa8a 	uxtb.w	sl, sl
 8007614:	f1ba 0f02 	cmp.w	sl, #2
 8007618:	d1ee      	bne.n	80075f8 <_scanf_float+0x2cc>
 800761a:	3d03      	subs	r5, #3
 800761c:	b2ed      	uxtb	r5, r5
 800761e:	1b76      	subs	r6, r6, r5
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	05da      	lsls	r2, r3, #23
 8007624:	d530      	bpl.n	8007688 <_scanf_float+0x35c>
 8007626:	055b      	lsls	r3, r3, #21
 8007628:	d511      	bpl.n	800764e <_scanf_float+0x322>
 800762a:	9b01      	ldr	r3, [sp, #4]
 800762c:	429e      	cmp	r6, r3
 800762e:	f67f aebf 	bls.w	80073b0 <_scanf_float+0x84>
 8007632:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007636:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800763a:	464a      	mov	r2, r9
 800763c:	4640      	mov	r0, r8
 800763e:	4798      	blx	r3
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	3b01      	subs	r3, #1
 8007644:	6123      	str	r3, [r4, #16]
 8007646:	e7f0      	b.n	800762a <_scanf_float+0x2fe>
 8007648:	46aa      	mov	sl, r5
 800764a:	46b3      	mov	fp, r6
 800764c:	e7de      	b.n	800760c <_scanf_float+0x2e0>
 800764e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	2965      	cmp	r1, #101	@ 0x65
 8007656:	f103 33ff 	add.w	r3, r3, #4294967295
 800765a:	f106 35ff 	add.w	r5, r6, #4294967295
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	d00c      	beq.n	800767c <_scanf_float+0x350>
 8007662:	2945      	cmp	r1, #69	@ 0x45
 8007664:	d00a      	beq.n	800767c <_scanf_float+0x350>
 8007666:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800766a:	464a      	mov	r2, r9
 800766c:	4640      	mov	r0, r8
 800766e:	4798      	blx	r3
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007676:	3b01      	subs	r3, #1
 8007678:	1eb5      	subs	r5, r6, #2
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007680:	464a      	mov	r2, r9
 8007682:	4640      	mov	r0, r8
 8007684:	4798      	blx	r3
 8007686:	462e      	mov	r6, r5
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	f012 0210 	ands.w	r2, r2, #16
 800768e:	d001      	beq.n	8007694 <_scanf_float+0x368>
 8007690:	2000      	movs	r0, #0
 8007692:	e68e      	b.n	80073b2 <_scanf_float+0x86>
 8007694:	7032      	strb	r2, [r6, #0]
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800769c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a0:	d125      	bne.n	80076ee <_scanf_float+0x3c2>
 80076a2:	9b02      	ldr	r3, [sp, #8]
 80076a4:	429f      	cmp	r7, r3
 80076a6:	d00a      	beq.n	80076be <_scanf_float+0x392>
 80076a8:	1bda      	subs	r2, r3, r7
 80076aa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80076ae:	429e      	cmp	r6, r3
 80076b0:	bf28      	it	cs
 80076b2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80076b6:	4922      	ldr	r1, [pc, #136]	@ (8007740 <_scanf_float+0x414>)
 80076b8:	4630      	mov	r0, r6
 80076ba:	f000 f977 	bl	80079ac <siprintf>
 80076be:	9901      	ldr	r1, [sp, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	4640      	mov	r0, r8
 80076c4:	f002 fd34 	bl	800a130 <_strtod_r>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f011 0f02 	tst.w	r1, #2
 80076d2:	ec57 6b10 	vmov	r6, r7, d0
 80076d6:	f103 0204 	add.w	r2, r3, #4
 80076da:	d015      	beq.n	8007708 <_scanf_float+0x3dc>
 80076dc:	9903      	ldr	r1, [sp, #12]
 80076de:	600a      	str	r2, [r1, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	e9c3 6700 	strd	r6, r7, [r3]
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60e3      	str	r3, [r4, #12]
 80076ec:	e7d0      	b.n	8007690 <_scanf_float+0x364>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0e4      	beq.n	80076be <_scanf_float+0x392>
 80076f4:	9905      	ldr	r1, [sp, #20]
 80076f6:	230a      	movs	r3, #10
 80076f8:	3101      	adds	r1, #1
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7ff f9b4 	bl	8006a68 <_strtol_r>
 8007700:	9b04      	ldr	r3, [sp, #16]
 8007702:	9e05      	ldr	r6, [sp, #20]
 8007704:	1ac2      	subs	r2, r0, r3
 8007706:	e7d0      	b.n	80076aa <_scanf_float+0x37e>
 8007708:	f011 0f04 	tst.w	r1, #4
 800770c:	9903      	ldr	r1, [sp, #12]
 800770e:	600a      	str	r2, [r1, #0]
 8007710:	d1e6      	bne.n	80076e0 <_scanf_float+0x3b4>
 8007712:	681d      	ldr	r5, [r3, #0]
 8007714:	4632      	mov	r2, r6
 8007716:	463b      	mov	r3, r7
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f9 fa0e 	bl	8000b3c <__aeabi_dcmpun>
 8007720:	b128      	cbz	r0, 800772e <_scanf_float+0x402>
 8007722:	4808      	ldr	r0, [pc, #32]	@ (8007744 <_scanf_float+0x418>)
 8007724:	f000 faf8 	bl	8007d18 <nanf>
 8007728:	ed85 0a00 	vstr	s0, [r5]
 800772c:	e7db      	b.n	80076e6 <_scanf_float+0x3ba>
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	f7f9 fa61 	bl	8000bf8 <__aeabi_d2f>
 8007736:	6028      	str	r0, [r5, #0]
 8007738:	e7d5      	b.n	80076e6 <_scanf_float+0x3ba>
 800773a:	2700      	movs	r7, #0
 800773c:	e62e      	b.n	800739c <_scanf_float+0x70>
 800773e:	bf00      	nop
 8007740:	0800b431 	.word	0x0800b431
 8007744:	0800b572 	.word	0x0800b572

08007748 <std>:
 8007748:	2300      	movs	r3, #0
 800774a:	b510      	push	{r4, lr}
 800774c:	4604      	mov	r4, r0
 800774e:	e9c0 3300 	strd	r3, r3, [r0]
 8007752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007756:	6083      	str	r3, [r0, #8]
 8007758:	8181      	strh	r1, [r0, #12]
 800775a:	6643      	str	r3, [r0, #100]	@ 0x64
 800775c:	81c2      	strh	r2, [r0, #14]
 800775e:	6183      	str	r3, [r0, #24]
 8007760:	4619      	mov	r1, r3
 8007762:	2208      	movs	r2, #8
 8007764:	305c      	adds	r0, #92	@ 0x5c
 8007766:	f000 fa57 	bl	8007c18 <memset>
 800776a:	4b0d      	ldr	r3, [pc, #52]	@ (80077a0 <std+0x58>)
 800776c:	6263      	str	r3, [r4, #36]	@ 0x24
 800776e:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <std+0x5c>)
 8007770:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007772:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <std+0x60>)
 8007774:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007776:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <std+0x64>)
 8007778:	6323      	str	r3, [r4, #48]	@ 0x30
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <std+0x68>)
 800777c:	6224      	str	r4, [r4, #32]
 800777e:	429c      	cmp	r4, r3
 8007780:	d006      	beq.n	8007790 <std+0x48>
 8007782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007786:	4294      	cmp	r4, r2
 8007788:	d002      	beq.n	8007790 <std+0x48>
 800778a:	33d0      	adds	r3, #208	@ 0xd0
 800778c:	429c      	cmp	r4, r3
 800778e:	d105      	bne.n	800779c <std+0x54>
 8007790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007798:	f000 baba 	b.w	8007d10 <__retarget_lock_init_recursive>
 800779c:	bd10      	pop	{r4, pc}
 800779e:	bf00      	nop
 80077a0:	080079f1 	.word	0x080079f1
 80077a4:	08007a13 	.word	0x08007a13
 80077a8:	08007a4b 	.word	0x08007a4b
 80077ac:	08007a6f 	.word	0x08007a6f
 80077b0:	20000344 	.word	0x20000344

080077b4 <stdio_exit_handler>:
 80077b4:	4a02      	ldr	r2, [pc, #8]	@ (80077c0 <stdio_exit_handler+0xc>)
 80077b6:	4903      	ldr	r1, [pc, #12]	@ (80077c4 <stdio_exit_handler+0x10>)
 80077b8:	4803      	ldr	r0, [pc, #12]	@ (80077c8 <stdio_exit_handler+0x14>)
 80077ba:	f000 b869 	b.w	8007890 <_fwalk_sglue>
 80077be:	bf00      	nop
 80077c0:	2000000c 	.word	0x2000000c
 80077c4:	0800a779 	.word	0x0800a779
 80077c8:	2000001c 	.word	0x2000001c

080077cc <cleanup_stdio>:
 80077cc:	6841      	ldr	r1, [r0, #4]
 80077ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <cleanup_stdio+0x34>)
 80077d0:	4299      	cmp	r1, r3
 80077d2:	b510      	push	{r4, lr}
 80077d4:	4604      	mov	r4, r0
 80077d6:	d001      	beq.n	80077dc <cleanup_stdio+0x10>
 80077d8:	f002 ffce 	bl	800a778 <_fflush_r>
 80077dc:	68a1      	ldr	r1, [r4, #8]
 80077de:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <cleanup_stdio+0x38>)
 80077e0:	4299      	cmp	r1, r3
 80077e2:	d002      	beq.n	80077ea <cleanup_stdio+0x1e>
 80077e4:	4620      	mov	r0, r4
 80077e6:	f002 ffc7 	bl	800a778 <_fflush_r>
 80077ea:	68e1      	ldr	r1, [r4, #12]
 80077ec:	4b06      	ldr	r3, [pc, #24]	@ (8007808 <cleanup_stdio+0x3c>)
 80077ee:	4299      	cmp	r1, r3
 80077f0:	d004      	beq.n	80077fc <cleanup_stdio+0x30>
 80077f2:	4620      	mov	r0, r4
 80077f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f8:	f002 bfbe 	b.w	800a778 <_fflush_r>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	bf00      	nop
 8007800:	20000344 	.word	0x20000344
 8007804:	200003ac 	.word	0x200003ac
 8007808:	20000414 	.word	0x20000414

0800780c <global_stdio_init.part.0>:
 800780c:	b510      	push	{r4, lr}
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <global_stdio_init.part.0+0x30>)
 8007810:	4c0b      	ldr	r4, [pc, #44]	@ (8007840 <global_stdio_init.part.0+0x34>)
 8007812:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <global_stdio_init.part.0+0x38>)
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	4620      	mov	r0, r4
 8007818:	2200      	movs	r2, #0
 800781a:	2104      	movs	r1, #4
 800781c:	f7ff ff94 	bl	8007748 <std>
 8007820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007824:	2201      	movs	r2, #1
 8007826:	2109      	movs	r1, #9
 8007828:	f7ff ff8e 	bl	8007748 <std>
 800782c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007830:	2202      	movs	r2, #2
 8007832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007836:	2112      	movs	r1, #18
 8007838:	f7ff bf86 	b.w	8007748 <std>
 800783c:	2000047c 	.word	0x2000047c
 8007840:	20000344 	.word	0x20000344
 8007844:	080077b5 	.word	0x080077b5

08007848 <__sfp_lock_acquire>:
 8007848:	4801      	ldr	r0, [pc, #4]	@ (8007850 <__sfp_lock_acquire+0x8>)
 800784a:	f000 ba62 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 800784e:	bf00      	nop
 8007850:	20000485 	.word	0x20000485

08007854 <__sfp_lock_release>:
 8007854:	4801      	ldr	r0, [pc, #4]	@ (800785c <__sfp_lock_release+0x8>)
 8007856:	f000 ba5d 	b.w	8007d14 <__retarget_lock_release_recursive>
 800785a:	bf00      	nop
 800785c:	20000485 	.word	0x20000485

08007860 <__sinit>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4604      	mov	r4, r0
 8007864:	f7ff fff0 	bl	8007848 <__sfp_lock_acquire>
 8007868:	6a23      	ldr	r3, [r4, #32]
 800786a:	b11b      	cbz	r3, 8007874 <__sinit+0x14>
 800786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007870:	f7ff bff0 	b.w	8007854 <__sfp_lock_release>
 8007874:	4b04      	ldr	r3, [pc, #16]	@ (8007888 <__sinit+0x28>)
 8007876:	6223      	str	r3, [r4, #32]
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <__sinit+0x2c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1f5      	bne.n	800786c <__sinit+0xc>
 8007880:	f7ff ffc4 	bl	800780c <global_stdio_init.part.0>
 8007884:	e7f2      	b.n	800786c <__sinit+0xc>
 8007886:	bf00      	nop
 8007888:	080077cd 	.word	0x080077cd
 800788c:	2000047c 	.word	0x2000047c

08007890 <_fwalk_sglue>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	4607      	mov	r7, r0
 8007896:	4688      	mov	r8, r1
 8007898:	4614      	mov	r4, r2
 800789a:	2600      	movs	r6, #0
 800789c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078a0:	f1b9 0901 	subs.w	r9, r9, #1
 80078a4:	d505      	bpl.n	80078b2 <_fwalk_sglue+0x22>
 80078a6:	6824      	ldr	r4, [r4, #0]
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	d1f7      	bne.n	800789c <_fwalk_sglue+0xc>
 80078ac:	4630      	mov	r0, r6
 80078ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d907      	bls.n	80078c8 <_fwalk_sglue+0x38>
 80078b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078bc:	3301      	adds	r3, #1
 80078be:	d003      	beq.n	80078c8 <_fwalk_sglue+0x38>
 80078c0:	4629      	mov	r1, r5
 80078c2:	4638      	mov	r0, r7
 80078c4:	47c0      	blx	r8
 80078c6:	4306      	orrs	r6, r0
 80078c8:	3568      	adds	r5, #104	@ 0x68
 80078ca:	e7e9      	b.n	80078a0 <_fwalk_sglue+0x10>

080078cc <iprintf>:
 80078cc:	b40f      	push	{r0, r1, r2, r3}
 80078ce:	b507      	push	{r0, r1, r2, lr}
 80078d0:	4906      	ldr	r1, [pc, #24]	@ (80078ec <iprintf+0x20>)
 80078d2:	ab04      	add	r3, sp, #16
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078da:	6881      	ldr	r1, [r0, #8]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	f002 fdaf 	bl	800a440 <_vfiprintf_r>
 80078e2:	b003      	add	sp, #12
 80078e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078e8:	b004      	add	sp, #16
 80078ea:	4770      	bx	lr
 80078ec:	20000018 	.word	0x20000018

080078f0 <_puts_r>:
 80078f0:	6a03      	ldr	r3, [r0, #32]
 80078f2:	b570      	push	{r4, r5, r6, lr}
 80078f4:	6884      	ldr	r4, [r0, #8]
 80078f6:	4605      	mov	r5, r0
 80078f8:	460e      	mov	r6, r1
 80078fa:	b90b      	cbnz	r3, 8007900 <_puts_r+0x10>
 80078fc:	f7ff ffb0 	bl	8007860 <__sinit>
 8007900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007902:	07db      	lsls	r3, r3, #31
 8007904:	d405      	bmi.n	8007912 <_puts_r+0x22>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	0598      	lsls	r0, r3, #22
 800790a:	d402      	bmi.n	8007912 <_puts_r+0x22>
 800790c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800790e:	f000 fa00 	bl	8007d12 <__retarget_lock_acquire_recursive>
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	0719      	lsls	r1, r3, #28
 8007916:	d502      	bpl.n	800791e <_puts_r+0x2e>
 8007918:	6923      	ldr	r3, [r4, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d135      	bne.n	800798a <_puts_r+0x9a>
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f000 f923 	bl	8007b6c <__swsetup_r>
 8007926:	b380      	cbz	r0, 800798a <_puts_r+0x9a>
 8007928:	f04f 35ff 	mov.w	r5, #4294967295
 800792c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800792e:	07da      	lsls	r2, r3, #31
 8007930:	d405      	bmi.n	800793e <_puts_r+0x4e>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	059b      	lsls	r3, r3, #22
 8007936:	d402      	bmi.n	800793e <_puts_r+0x4e>
 8007938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800793a:	f000 f9eb 	bl	8007d14 <__retarget_lock_release_recursive>
 800793e:	4628      	mov	r0, r5
 8007940:	bd70      	pop	{r4, r5, r6, pc}
 8007942:	2b00      	cmp	r3, #0
 8007944:	da04      	bge.n	8007950 <_puts_r+0x60>
 8007946:	69a2      	ldr	r2, [r4, #24]
 8007948:	429a      	cmp	r2, r3
 800794a:	dc17      	bgt.n	800797c <_puts_r+0x8c>
 800794c:	290a      	cmp	r1, #10
 800794e:	d015      	beq.n	800797c <_puts_r+0x8c>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	7019      	strb	r1, [r3, #0]
 8007958:	68a3      	ldr	r3, [r4, #8]
 800795a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800795e:	3b01      	subs	r3, #1
 8007960:	60a3      	str	r3, [r4, #8]
 8007962:	2900      	cmp	r1, #0
 8007964:	d1ed      	bne.n	8007942 <_puts_r+0x52>
 8007966:	2b00      	cmp	r3, #0
 8007968:	da11      	bge.n	800798e <_puts_r+0x9e>
 800796a:	4622      	mov	r2, r4
 800796c:	210a      	movs	r1, #10
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f8be 	bl	8007af0 <__swbuf_r>
 8007974:	3001      	adds	r0, #1
 8007976:	d0d7      	beq.n	8007928 <_puts_r+0x38>
 8007978:	250a      	movs	r5, #10
 800797a:	e7d7      	b.n	800792c <_puts_r+0x3c>
 800797c:	4622      	mov	r2, r4
 800797e:	4628      	mov	r0, r5
 8007980:	f000 f8b6 	bl	8007af0 <__swbuf_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d1e7      	bne.n	8007958 <_puts_r+0x68>
 8007988:	e7ce      	b.n	8007928 <_puts_r+0x38>
 800798a:	3e01      	subs	r6, #1
 800798c:	e7e4      	b.n	8007958 <_puts_r+0x68>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	6022      	str	r2, [r4, #0]
 8007994:	220a      	movs	r2, #10
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e7ee      	b.n	8007978 <_puts_r+0x88>
	...

0800799c <puts>:
 800799c:	4b02      	ldr	r3, [pc, #8]	@ (80079a8 <puts+0xc>)
 800799e:	4601      	mov	r1, r0
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f7ff bfa5 	b.w	80078f0 <_puts_r>
 80079a6:	bf00      	nop
 80079a8:	20000018 	.word	0x20000018

080079ac <siprintf>:
 80079ac:	b40e      	push	{r1, r2, r3}
 80079ae:	b510      	push	{r4, lr}
 80079b0:	b09d      	sub	sp, #116	@ 0x74
 80079b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80079b4:	9002      	str	r0, [sp, #8]
 80079b6:	9006      	str	r0, [sp, #24]
 80079b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079bc:	480a      	ldr	r0, [pc, #40]	@ (80079e8 <siprintf+0x3c>)
 80079be:	9107      	str	r1, [sp, #28]
 80079c0:	9104      	str	r1, [sp, #16]
 80079c2:	490a      	ldr	r1, [pc, #40]	@ (80079ec <siprintf+0x40>)
 80079c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c8:	9105      	str	r1, [sp, #20]
 80079ca:	2400      	movs	r4, #0
 80079cc:	a902      	add	r1, sp, #8
 80079ce:	6800      	ldr	r0, [r0, #0]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80079d4:	f002 fc0e 	bl	800a1f4 <_svfiprintf_r>
 80079d8:	9b02      	ldr	r3, [sp, #8]
 80079da:	701c      	strb	r4, [r3, #0]
 80079dc:	b01d      	add	sp, #116	@ 0x74
 80079de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e2:	b003      	add	sp, #12
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	20000018 	.word	0x20000018
 80079ec:	ffff0208 	.word	0xffff0208

080079f0 <__sread>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	f000 f93c 	bl	8007c74 <_read_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	bfab      	itete	ge
 8007a00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a02:	89a3      	ldrhlt	r3, [r4, #12]
 8007a04:	181b      	addge	r3, r3, r0
 8007a06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a0a:	bfac      	ite	ge
 8007a0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a0e:	81a3      	strhlt	r3, [r4, #12]
 8007a10:	bd10      	pop	{r4, pc}

08007a12 <__swrite>:
 8007a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a16:	461f      	mov	r7, r3
 8007a18:	898b      	ldrh	r3, [r1, #12]
 8007a1a:	05db      	lsls	r3, r3, #23
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4616      	mov	r6, r2
 8007a22:	d505      	bpl.n	8007a30 <__swrite+0x1e>
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	2302      	movs	r3, #2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f000 f910 	bl	8007c50 <_lseek_r>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	4628      	mov	r0, r5
 8007a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a46:	f000 b927 	b.w	8007c98 <_write_r>

08007a4a <__sseek>:
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a52:	f000 f8fd 	bl	8007c50 <_lseek_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	bf15      	itete	ne
 8007a5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a66:	81a3      	strheq	r3, [r4, #12]
 8007a68:	bf18      	it	ne
 8007a6a:	81a3      	strhne	r3, [r4, #12]
 8007a6c:	bd10      	pop	{r4, pc}

08007a6e <__sclose>:
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 b8dd 	b.w	8007c30 <_close_r>

08007a76 <_vsniprintf_r>:
 8007a76:	b530      	push	{r4, r5, lr}
 8007a78:	4614      	mov	r4, r2
 8007a7a:	2c00      	cmp	r4, #0
 8007a7c:	b09b      	sub	sp, #108	@ 0x6c
 8007a7e:	4605      	mov	r5, r0
 8007a80:	461a      	mov	r2, r3
 8007a82:	da05      	bge.n	8007a90 <_vsniprintf_r+0x1a>
 8007a84:	238b      	movs	r3, #139	@ 0x8b
 8007a86:	6003      	str	r3, [r0, #0]
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	b01b      	add	sp, #108	@ 0x6c
 8007a8e:	bd30      	pop	{r4, r5, pc}
 8007a90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a94:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a9e:	bf14      	ite	ne
 8007aa0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007aa4:	4623      	moveq	r3, r4
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007aae:	9100      	str	r1, [sp, #0]
 8007ab0:	9104      	str	r1, [sp, #16]
 8007ab2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ab6:	4669      	mov	r1, sp
 8007ab8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007aba:	f002 fb9b 	bl	800a1f4 <_svfiprintf_r>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	bfbc      	itt	lt
 8007ac2:	238b      	movlt	r3, #139	@ 0x8b
 8007ac4:	602b      	strlt	r3, [r5, #0]
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	d0e0      	beq.n	8007a8c <_vsniprintf_r+0x16>
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e7dc      	b.n	8007a8c <_vsniprintf_r+0x16>
	...

08007ad4 <vsniprintf>:
 8007ad4:	b507      	push	{r0, r1, r2, lr}
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	460a      	mov	r2, r1
 8007adc:	4601      	mov	r1, r0
 8007ade:	4803      	ldr	r0, [pc, #12]	@ (8007aec <vsniprintf+0x18>)
 8007ae0:	6800      	ldr	r0, [r0, #0]
 8007ae2:	f7ff ffc8 	bl	8007a76 <_vsniprintf_r>
 8007ae6:	b003      	add	sp, #12
 8007ae8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007aec:	20000018 	.word	0x20000018

08007af0 <__swbuf_r>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	460e      	mov	r6, r1
 8007af4:	4614      	mov	r4, r2
 8007af6:	4605      	mov	r5, r0
 8007af8:	b118      	cbz	r0, 8007b02 <__swbuf_r+0x12>
 8007afa:	6a03      	ldr	r3, [r0, #32]
 8007afc:	b90b      	cbnz	r3, 8007b02 <__swbuf_r+0x12>
 8007afe:	f7ff feaf 	bl	8007860 <__sinit>
 8007b02:	69a3      	ldr	r3, [r4, #24]
 8007b04:	60a3      	str	r3, [r4, #8]
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	071a      	lsls	r2, r3, #28
 8007b0a:	d501      	bpl.n	8007b10 <__swbuf_r+0x20>
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	b943      	cbnz	r3, 8007b22 <__swbuf_r+0x32>
 8007b10:	4621      	mov	r1, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 f82a 	bl	8007b6c <__swsetup_r>
 8007b18:	b118      	cbz	r0, 8007b22 <__swbuf_r+0x32>
 8007b1a:	f04f 37ff 	mov.w	r7, #4294967295
 8007b1e:	4638      	mov	r0, r7
 8007b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	6922      	ldr	r2, [r4, #16]
 8007b26:	1a98      	subs	r0, r3, r2
 8007b28:	6963      	ldr	r3, [r4, #20]
 8007b2a:	b2f6      	uxtb	r6, r6
 8007b2c:	4283      	cmp	r3, r0
 8007b2e:	4637      	mov	r7, r6
 8007b30:	dc05      	bgt.n	8007b3e <__swbuf_r+0x4e>
 8007b32:	4621      	mov	r1, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f002 fe1f 	bl	800a778 <_fflush_r>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d1ed      	bne.n	8007b1a <__swbuf_r+0x2a>
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	60a3      	str	r3, [r4, #8]
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	6022      	str	r2, [r4, #0]
 8007b4a:	701e      	strb	r6, [r3, #0]
 8007b4c:	6962      	ldr	r2, [r4, #20]
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d004      	beq.n	8007b5e <__swbuf_r+0x6e>
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	07db      	lsls	r3, r3, #31
 8007b58:	d5e1      	bpl.n	8007b1e <__swbuf_r+0x2e>
 8007b5a:	2e0a      	cmp	r6, #10
 8007b5c:	d1df      	bne.n	8007b1e <__swbuf_r+0x2e>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4628      	mov	r0, r5
 8007b62:	f002 fe09 	bl	800a778 <_fflush_r>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d0d9      	beq.n	8007b1e <__swbuf_r+0x2e>
 8007b6a:	e7d6      	b.n	8007b1a <__swbuf_r+0x2a>

08007b6c <__swsetup_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4b29      	ldr	r3, [pc, #164]	@ (8007c14 <__swsetup_r+0xa8>)
 8007b70:	4605      	mov	r5, r0
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	460c      	mov	r4, r1
 8007b76:	b118      	cbz	r0, 8007b80 <__swsetup_r+0x14>
 8007b78:	6a03      	ldr	r3, [r0, #32]
 8007b7a:	b90b      	cbnz	r3, 8007b80 <__swsetup_r+0x14>
 8007b7c:	f7ff fe70 	bl	8007860 <__sinit>
 8007b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b84:	0719      	lsls	r1, r3, #28
 8007b86:	d422      	bmi.n	8007bce <__swsetup_r+0x62>
 8007b88:	06da      	lsls	r2, r3, #27
 8007b8a:	d407      	bmi.n	8007b9c <__swsetup_r+0x30>
 8007b8c:	2209      	movs	r2, #9
 8007b8e:	602a      	str	r2, [r5, #0]
 8007b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b94:	81a3      	strh	r3, [r4, #12]
 8007b96:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9a:	e033      	b.n	8007c04 <__swsetup_r+0x98>
 8007b9c:	0758      	lsls	r0, r3, #29
 8007b9e:	d512      	bpl.n	8007bc6 <__swsetup_r+0x5a>
 8007ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ba2:	b141      	cbz	r1, 8007bb6 <__swsetup_r+0x4a>
 8007ba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	d002      	beq.n	8007bb2 <__swsetup_r+0x46>
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 ff13 	bl	80089d8 <_free_r>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f043 0308 	orr.w	r3, r3, #8
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	b94b      	cbnz	r3, 8007be6 <__swsetup_r+0x7a>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bdc:	d003      	beq.n	8007be6 <__swsetup_r+0x7a>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4628      	mov	r0, r5
 8007be2:	f002 fe17 	bl	800a814 <__smakebuf_r>
 8007be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bea:	f013 0201 	ands.w	r2, r3, #1
 8007bee:	d00a      	beq.n	8007c06 <__swsetup_r+0x9a>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	60a2      	str	r2, [r4, #8]
 8007bf4:	6962      	ldr	r2, [r4, #20]
 8007bf6:	4252      	negs	r2, r2
 8007bf8:	61a2      	str	r2, [r4, #24]
 8007bfa:	6922      	ldr	r2, [r4, #16]
 8007bfc:	b942      	cbnz	r2, 8007c10 <__swsetup_r+0xa4>
 8007bfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c02:	d1c5      	bne.n	8007b90 <__swsetup_r+0x24>
 8007c04:	bd38      	pop	{r3, r4, r5, pc}
 8007c06:	0799      	lsls	r1, r3, #30
 8007c08:	bf58      	it	pl
 8007c0a:	6962      	ldrpl	r2, [r4, #20]
 8007c0c:	60a2      	str	r2, [r4, #8]
 8007c0e:	e7f4      	b.n	8007bfa <__swsetup_r+0x8e>
 8007c10:	2000      	movs	r0, #0
 8007c12:	e7f7      	b.n	8007c04 <__swsetup_r+0x98>
 8007c14:	20000018 	.word	0x20000018

08007c18 <memset>:
 8007c18:	4402      	add	r2, r0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <memset+0xa>
 8007c20:	4770      	bx	lr
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <memset+0x4>

08007c28 <_localeconv_r>:
 8007c28:	4800      	ldr	r0, [pc, #0]	@ (8007c2c <_localeconv_r+0x4>)
 8007c2a:	4770      	bx	lr
 8007c2c:	20000158 	.word	0x20000158

08007c30 <_close_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	@ (8007c4c <_close_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7fa fed2 	bl	80029e4 <_close>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_close_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_close_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	20000480 	.word	0x20000480

08007c50 <_lseek_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	@ (8007c70 <_lseek_r+0x20>)
 8007c54:	4604      	mov	r4, r0
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7fa fee7 	bl	8002a32 <_lseek>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_lseek_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_lseek_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	20000480 	.word	0x20000480

08007c74 <_read_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	@ (8007c94 <_read_r+0x20>)
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	602a      	str	r2, [r5, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7fa fe75 	bl	8002972 <_read>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_read_r+0x1e>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_read_r+0x1e>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	20000480 	.word	0x20000480

08007c98 <_write_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d07      	ldr	r5, [pc, #28]	@ (8007cb8 <_write_r+0x20>)
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	602a      	str	r2, [r5, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f7fa fe80 	bl	80029ac <_write>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_write_r+0x1e>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_write_r+0x1e>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	20000480 	.word	0x20000480

08007cbc <__errno>:
 8007cbc:	4b01      	ldr	r3, [pc, #4]	@ (8007cc4 <__errno+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000018 	.word	0x20000018

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	@ (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	@ (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f003 fa6a 	bl	800b1b4 <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	0800b728 	.word	0x0800b728
 8007d04:	0800b728 	.word	0x0800b728
 8007d08:	0800b728 	.word	0x0800b728
 8007d0c:	0800b72c 	.word	0x0800b72c

08007d10 <__retarget_lock_init_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <__retarget_lock_acquire_recursive>:
 8007d12:	4770      	bx	lr

08007d14 <__retarget_lock_release_recursive>:
 8007d14:	4770      	bx	lr
	...

08007d18 <nanf>:
 8007d18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007d20 <nanf+0x8>
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	7fc00000 	.word	0x7fc00000

08007d24 <quorem>:
 8007d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	6903      	ldr	r3, [r0, #16]
 8007d2a:	690c      	ldr	r4, [r1, #16]
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	4607      	mov	r7, r0
 8007d30:	db7e      	blt.n	8007e30 <quorem+0x10c>
 8007d32:	3c01      	subs	r4, #1
 8007d34:	f101 0814 	add.w	r8, r1, #20
 8007d38:	00a3      	lsls	r3, r4, #2
 8007d3a:	f100 0514 	add.w	r5, r0, #20
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	429a      	cmp	r2, r3
 8007d52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d56:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d5a:	d32e      	bcc.n	8007dba <quorem+0x96>
 8007d5c:	f04f 0a00 	mov.w	sl, #0
 8007d60:	46c4      	mov	ip, r8
 8007d62:	46ae      	mov	lr, r5
 8007d64:	46d3      	mov	fp, sl
 8007d66:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d6a:	b298      	uxth	r0, r3
 8007d6c:	fb06 a000 	mla	r0, r6, r0, sl
 8007d70:	0c02      	lsrs	r2, r0, #16
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	fb06 2303 	mla	r3, r6, r3, r2
 8007d78:	f8de 2000 	ldr.w	r2, [lr]
 8007d7c:	b280      	uxth	r0, r0
 8007d7e:	b292      	uxth	r2, r2
 8007d80:	1a12      	subs	r2, r2, r0
 8007d82:	445a      	add	r2, fp
 8007d84:	f8de 0000 	ldr.w	r0, [lr]
 8007d88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d96:	b292      	uxth	r2, r2
 8007d98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d9c:	45e1      	cmp	r9, ip
 8007d9e:	f84e 2b04 	str.w	r2, [lr], #4
 8007da2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007da6:	d2de      	bcs.n	8007d66 <quorem+0x42>
 8007da8:	9b00      	ldr	r3, [sp, #0]
 8007daa:	58eb      	ldr	r3, [r5, r3]
 8007dac:	b92b      	cbnz	r3, 8007dba <quorem+0x96>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	3b04      	subs	r3, #4
 8007db2:	429d      	cmp	r5, r3
 8007db4:	461a      	mov	r2, r3
 8007db6:	d32f      	bcc.n	8007e18 <quorem+0xf4>
 8007db8:	613c      	str	r4, [r7, #16]
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f001 f9c8 	bl	8009150 <__mcmp>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	db25      	blt.n	8007e10 <quorem+0xec>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dcc:	f8d1 c000 	ldr.w	ip, [r1]
 8007dd0:	fa1f fe82 	uxth.w	lr, r2
 8007dd4:	fa1f f38c 	uxth.w	r3, ip
 8007dd8:	eba3 030e 	sub.w	r3, r3, lr
 8007ddc:	4403      	add	r3, r0
 8007dde:	0c12      	lsrs	r2, r2, #16
 8007de0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007de4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dee:	45c1      	cmp	r9, r8
 8007df0:	f841 3b04 	str.w	r3, [r1], #4
 8007df4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007df8:	d2e6      	bcs.n	8007dc8 <quorem+0xa4>
 8007dfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e02:	b922      	cbnz	r2, 8007e0e <quorem+0xea>
 8007e04:	3b04      	subs	r3, #4
 8007e06:	429d      	cmp	r5, r3
 8007e08:	461a      	mov	r2, r3
 8007e0a:	d30b      	bcc.n	8007e24 <quorem+0x100>
 8007e0c:	613c      	str	r4, [r7, #16]
 8007e0e:	3601      	adds	r6, #1
 8007e10:	4630      	mov	r0, r6
 8007e12:	b003      	add	sp, #12
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	3b04      	subs	r3, #4
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	d1cb      	bne.n	8007db8 <quorem+0x94>
 8007e20:	3c01      	subs	r4, #1
 8007e22:	e7c6      	b.n	8007db2 <quorem+0x8e>
 8007e24:	6812      	ldr	r2, [r2, #0]
 8007e26:	3b04      	subs	r3, #4
 8007e28:	2a00      	cmp	r2, #0
 8007e2a:	d1ef      	bne.n	8007e0c <quorem+0xe8>
 8007e2c:	3c01      	subs	r4, #1
 8007e2e:	e7ea      	b.n	8007e06 <quorem+0xe2>
 8007e30:	2000      	movs	r0, #0
 8007e32:	e7ee      	b.n	8007e12 <quorem+0xee>
 8007e34:	0000      	movs	r0, r0
	...

08007e38 <_dtoa_r>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	69c7      	ldr	r7, [r0, #28]
 8007e3e:	b097      	sub	sp, #92	@ 0x5c
 8007e40:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e44:	ec55 4b10 	vmov	r4, r5, d0
 8007e48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007e4a:	9107      	str	r1, [sp, #28]
 8007e4c:	4681      	mov	r9, r0
 8007e4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e50:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e52:	b97f      	cbnz	r7, 8007e74 <_dtoa_r+0x3c>
 8007e54:	2010      	movs	r0, #16
 8007e56:	f000 fe09 	bl	8008a6c <malloc>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007e60:	b920      	cbnz	r0, 8007e6c <_dtoa_r+0x34>
 8007e62:	4ba9      	ldr	r3, [pc, #676]	@ (8008108 <_dtoa_r+0x2d0>)
 8007e64:	21ef      	movs	r1, #239	@ 0xef
 8007e66:	48a9      	ldr	r0, [pc, #676]	@ (800810c <_dtoa_r+0x2d4>)
 8007e68:	f002 fd86 	bl	800a978 <__assert_func>
 8007e6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e70:	6007      	str	r7, [r0, #0]
 8007e72:	60c7      	str	r7, [r0, #12]
 8007e74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	b159      	cbz	r1, 8007e94 <_dtoa_r+0x5c>
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	604a      	str	r2, [r1, #4]
 8007e80:	2301      	movs	r3, #1
 8007e82:	4093      	lsls	r3, r2
 8007e84:	608b      	str	r3, [r1, #8]
 8007e86:	4648      	mov	r0, r9
 8007e88:	f000 fee6 	bl	8008c58 <_Bfree>
 8007e8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	1e2b      	subs	r3, r5, #0
 8007e96:	bfb9      	ittee	lt
 8007e98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e9c:	9305      	strlt	r3, [sp, #20]
 8007e9e:	2300      	movge	r3, #0
 8007ea0:	6033      	strge	r3, [r6, #0]
 8007ea2:	9f05      	ldr	r7, [sp, #20]
 8007ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8008110 <_dtoa_r+0x2d8>)
 8007ea6:	bfbc      	itt	lt
 8007ea8:	2201      	movlt	r2, #1
 8007eaa:	6032      	strlt	r2, [r6, #0]
 8007eac:	43bb      	bics	r3, r7
 8007eae:	d112      	bne.n	8007ed6 <_dtoa_r+0x9e>
 8007eb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007eb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ebc:	4323      	orrs	r3, r4
 8007ebe:	f000 855a 	beq.w	8008976 <_dtoa_r+0xb3e>
 8007ec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ec4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008124 <_dtoa_r+0x2ec>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 855c 	beq.w	8008986 <_dtoa_r+0xb4e>
 8007ece:	f10a 0303 	add.w	r3, sl, #3
 8007ed2:	f000 bd56 	b.w	8008982 <_dtoa_r+0xb4a>
 8007ed6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007eda:	2200      	movs	r2, #0
 8007edc:	ec51 0b17 	vmov	r0, r1, d7
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ee6:	f7f8 fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eea:	4680      	mov	r8, r0
 8007eec:	b158      	cbz	r0, 8007f06 <_dtoa_r+0xce>
 8007eee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ef6:	b113      	cbz	r3, 8007efe <_dtoa_r+0xc6>
 8007ef8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007efa:	4b86      	ldr	r3, [pc, #536]	@ (8008114 <_dtoa_r+0x2dc>)
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008128 <_dtoa_r+0x2f0>
 8007f02:	f000 bd40 	b.w	8008986 <_dtoa_r+0xb4e>
 8007f06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007f0a:	aa14      	add	r2, sp, #80	@ 0x50
 8007f0c:	a915      	add	r1, sp, #84	@ 0x54
 8007f0e:	4648      	mov	r0, r9
 8007f10:	f001 fa3e 	bl	8009390 <__d2b>
 8007f14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f18:	9002      	str	r0, [sp, #8]
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	d078      	beq.n	8008010 <_dtoa_r+0x1d8>
 8007f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f38:	4619      	mov	r1, r3
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4b76      	ldr	r3, [pc, #472]	@ (8008118 <_dtoa_r+0x2e0>)
 8007f3e:	f7f8 f9ab 	bl	8000298 <__aeabi_dsub>
 8007f42:	a36b      	add	r3, pc, #428	@ (adr r3, 80080f0 <_dtoa_r+0x2b8>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f7f8 fb5e 	bl	8000608 <__aeabi_dmul>
 8007f4c:	a36a      	add	r3, pc, #424	@ (adr r3, 80080f8 <_dtoa_r+0x2c0>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f7f8 f9a3 	bl	800029c <__adddf3>
 8007f56:	4604      	mov	r4, r0
 8007f58:	4630      	mov	r0, r6
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	f7f8 faea 	bl	8000534 <__aeabi_i2d>
 8007f60:	a367      	add	r3, pc, #412	@ (adr r3, 8008100 <_dtoa_r+0x2c8>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 fb4f 	bl	8000608 <__aeabi_dmul>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 f993 	bl	800029c <__adddf3>
 8007f76:	4604      	mov	r4, r0
 8007f78:	460d      	mov	r5, r1
 8007f7a:	f7f8 fdf5 	bl	8000b68 <__aeabi_d2iz>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4607      	mov	r7, r0
 8007f82:	2300      	movs	r3, #0
 8007f84:	4620      	mov	r0, r4
 8007f86:	4629      	mov	r1, r5
 8007f88:	f7f8 fdb0 	bl	8000aec <__aeabi_dcmplt>
 8007f8c:	b140      	cbz	r0, 8007fa0 <_dtoa_r+0x168>
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7f8 fad0 	bl	8000534 <__aeabi_i2d>
 8007f94:	4622      	mov	r2, r4
 8007f96:	462b      	mov	r3, r5
 8007f98:	f7f8 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f9c:	b900      	cbnz	r0, 8007fa0 <_dtoa_r+0x168>
 8007f9e:	3f01      	subs	r7, #1
 8007fa0:	2f16      	cmp	r7, #22
 8007fa2:	d852      	bhi.n	800804a <_dtoa_r+0x212>
 8007fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800811c <_dtoa_r+0x2e4>)
 8007fa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fb2:	f7f8 fd9b 	bl	8000aec <__aeabi_dcmplt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d049      	beq.n	800804e <_dtoa_r+0x216>
 8007fba:	3f01      	subs	r7, #1
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fc2:	1b9b      	subs	r3, r3, r6
 8007fc4:	1e5a      	subs	r2, r3, #1
 8007fc6:	bf45      	ittet	mi
 8007fc8:	f1c3 0301 	rsbmi	r3, r3, #1
 8007fcc:	9300      	strmi	r3, [sp, #0]
 8007fce:	2300      	movpl	r3, #0
 8007fd0:	2300      	movmi	r3, #0
 8007fd2:	9206      	str	r2, [sp, #24]
 8007fd4:	bf54      	ite	pl
 8007fd6:	9300      	strpl	r3, [sp, #0]
 8007fd8:	9306      	strmi	r3, [sp, #24]
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	db39      	blt.n	8008052 <_dtoa_r+0x21a>
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007fe2:	443b      	add	r3, r7
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	9b07      	ldr	r3, [sp, #28]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d863      	bhi.n	80080b8 <_dtoa_r+0x280>
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	bfc4      	itt	gt
 8007ff4:	3b04      	subgt	r3, #4
 8007ff6:	9307      	strgt	r3, [sp, #28]
 8007ff8:	9b07      	ldr	r3, [sp, #28]
 8007ffa:	f1a3 0302 	sub.w	r3, r3, #2
 8007ffe:	bfcc      	ite	gt
 8008000:	2400      	movgt	r4, #0
 8008002:	2401      	movle	r4, #1
 8008004:	2b03      	cmp	r3, #3
 8008006:	d863      	bhi.n	80080d0 <_dtoa_r+0x298>
 8008008:	e8df f003 	tbb	[pc, r3]
 800800c:	2b375452 	.word	0x2b375452
 8008010:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008014:	441e      	add	r6, r3
 8008016:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800801a:	2b20      	cmp	r3, #32
 800801c:	bfc1      	itttt	gt
 800801e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008022:	409f      	lslgt	r7, r3
 8008024:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008028:	fa24 f303 	lsrgt.w	r3, r4, r3
 800802c:	bfd6      	itet	le
 800802e:	f1c3 0320 	rsble	r3, r3, #32
 8008032:	ea47 0003 	orrgt.w	r0, r7, r3
 8008036:	fa04 f003 	lslle.w	r0, r4, r3
 800803a:	f7f8 fa6b 	bl	8000514 <__aeabi_ui2d>
 800803e:	2201      	movs	r2, #1
 8008040:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008044:	3e01      	subs	r6, #1
 8008046:	9212      	str	r2, [sp, #72]	@ 0x48
 8008048:	e776      	b.n	8007f38 <_dtoa_r+0x100>
 800804a:	2301      	movs	r3, #1
 800804c:	e7b7      	b.n	8007fbe <_dtoa_r+0x186>
 800804e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008050:	e7b6      	b.n	8007fc0 <_dtoa_r+0x188>
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	1bdb      	subs	r3, r3, r7
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	427b      	negs	r3, r7
 800805a:	9308      	str	r3, [sp, #32]
 800805c:	2300      	movs	r3, #0
 800805e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008060:	e7c3      	b.n	8007fea <_dtoa_r+0x1b2>
 8008062:	2301      	movs	r3, #1
 8008064:	9309      	str	r3, [sp, #36]	@ 0x24
 8008066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008068:	eb07 0b03 	add.w	fp, r7, r3
 800806c:	f10b 0301 	add.w	r3, fp, #1
 8008070:	2b01      	cmp	r3, #1
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	bfb8      	it	lt
 8008076:	2301      	movlt	r3, #1
 8008078:	e006      	b.n	8008088 <_dtoa_r+0x250>
 800807a:	2301      	movs	r3, #1
 800807c:	9309      	str	r3, [sp, #36]	@ 0x24
 800807e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	dd28      	ble.n	80080d6 <_dtoa_r+0x29e>
 8008084:	469b      	mov	fp, r3
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800808c:	2100      	movs	r1, #0
 800808e:	2204      	movs	r2, #4
 8008090:	f102 0514 	add.w	r5, r2, #20
 8008094:	429d      	cmp	r5, r3
 8008096:	d926      	bls.n	80080e6 <_dtoa_r+0x2ae>
 8008098:	6041      	str	r1, [r0, #4]
 800809a:	4648      	mov	r0, r9
 800809c:	f000 fd9c 	bl	8008bd8 <_Balloc>
 80080a0:	4682      	mov	sl, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d142      	bne.n	800812c <_dtoa_r+0x2f4>
 80080a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008120 <_dtoa_r+0x2e8>)
 80080a8:	4602      	mov	r2, r0
 80080aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80080ae:	e6da      	b.n	8007e66 <_dtoa_r+0x2e>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e7e3      	b.n	800807c <_dtoa_r+0x244>
 80080b4:	2300      	movs	r3, #0
 80080b6:	e7d5      	b.n	8008064 <_dtoa_r+0x22c>
 80080b8:	2401      	movs	r4, #1
 80080ba:	2300      	movs	r3, #0
 80080bc:	9307      	str	r3, [sp, #28]
 80080be:	9409      	str	r4, [sp, #36]	@ 0x24
 80080c0:	f04f 3bff 	mov.w	fp, #4294967295
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80080ca:	2312      	movs	r3, #18
 80080cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80080ce:	e7db      	b.n	8008088 <_dtoa_r+0x250>
 80080d0:	2301      	movs	r3, #1
 80080d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d4:	e7f4      	b.n	80080c0 <_dtoa_r+0x288>
 80080d6:	f04f 0b01 	mov.w	fp, #1
 80080da:	f8cd b00c 	str.w	fp, [sp, #12]
 80080de:	465b      	mov	r3, fp
 80080e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80080e4:	e7d0      	b.n	8008088 <_dtoa_r+0x250>
 80080e6:	3101      	adds	r1, #1
 80080e8:	0052      	lsls	r2, r2, #1
 80080ea:	e7d1      	b.n	8008090 <_dtoa_r+0x258>
 80080ec:	f3af 8000 	nop.w
 80080f0:	636f4361 	.word	0x636f4361
 80080f4:	3fd287a7 	.word	0x3fd287a7
 80080f8:	8b60c8b3 	.word	0x8b60c8b3
 80080fc:	3fc68a28 	.word	0x3fc68a28
 8008100:	509f79fb 	.word	0x509f79fb
 8008104:	3fd34413 	.word	0x3fd34413
 8008108:	0800b443 	.word	0x0800b443
 800810c:	0800b45a 	.word	0x0800b45a
 8008110:	7ff00000 	.word	0x7ff00000
 8008114:	0800b40e 	.word	0x0800b40e
 8008118:	3ff80000 	.word	0x3ff80000
 800811c:	0800b608 	.word	0x0800b608
 8008120:	0800b4b2 	.word	0x0800b4b2
 8008124:	0800b43f 	.word	0x0800b43f
 8008128:	0800b40d 	.word	0x0800b40d
 800812c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008130:	6018      	str	r0, [r3, #0]
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	2b0e      	cmp	r3, #14
 8008136:	f200 80a1 	bhi.w	800827c <_dtoa_r+0x444>
 800813a:	2c00      	cmp	r4, #0
 800813c:	f000 809e 	beq.w	800827c <_dtoa_r+0x444>
 8008140:	2f00      	cmp	r7, #0
 8008142:	dd33      	ble.n	80081ac <_dtoa_r+0x374>
 8008144:	4b9c      	ldr	r3, [pc, #624]	@ (80083b8 <_dtoa_r+0x580>)
 8008146:	f007 020f 	and.w	r2, r7, #15
 800814a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800814e:	ed93 7b00 	vldr	d7, [r3]
 8008152:	05f8      	lsls	r0, r7, #23
 8008154:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800815c:	d516      	bpl.n	800818c <_dtoa_r+0x354>
 800815e:	4b97      	ldr	r3, [pc, #604]	@ (80083bc <_dtoa_r+0x584>)
 8008160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008168:	f7f8 fb78 	bl	800085c <__aeabi_ddiv>
 800816c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008170:	f004 040f 	and.w	r4, r4, #15
 8008174:	2603      	movs	r6, #3
 8008176:	4d91      	ldr	r5, [pc, #580]	@ (80083bc <_dtoa_r+0x584>)
 8008178:	b954      	cbnz	r4, 8008190 <_dtoa_r+0x358>
 800817a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800817e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008182:	f7f8 fb6b 	bl	800085c <__aeabi_ddiv>
 8008186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800818a:	e028      	b.n	80081de <_dtoa_r+0x3a6>
 800818c:	2602      	movs	r6, #2
 800818e:	e7f2      	b.n	8008176 <_dtoa_r+0x33e>
 8008190:	07e1      	lsls	r1, r4, #31
 8008192:	d508      	bpl.n	80081a6 <_dtoa_r+0x36e>
 8008194:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800819c:	f7f8 fa34 	bl	8000608 <__aeabi_dmul>
 80081a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081a4:	3601      	adds	r6, #1
 80081a6:	1064      	asrs	r4, r4, #1
 80081a8:	3508      	adds	r5, #8
 80081aa:	e7e5      	b.n	8008178 <_dtoa_r+0x340>
 80081ac:	f000 80af 	beq.w	800830e <_dtoa_r+0x4d6>
 80081b0:	427c      	negs	r4, r7
 80081b2:	4b81      	ldr	r3, [pc, #516]	@ (80083b8 <_dtoa_r+0x580>)
 80081b4:	4d81      	ldr	r5, [pc, #516]	@ (80083bc <_dtoa_r+0x584>)
 80081b6:	f004 020f 	and.w	r2, r4, #15
 80081ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081c6:	f7f8 fa1f 	bl	8000608 <__aeabi_dmul>
 80081ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ce:	1124      	asrs	r4, r4, #4
 80081d0:	2300      	movs	r3, #0
 80081d2:	2602      	movs	r6, #2
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	f040 808f 	bne.w	80082f8 <_dtoa_r+0x4c0>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1d3      	bne.n	8008186 <_dtoa_r+0x34e>
 80081de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8094 	beq.w	8008312 <_dtoa_r+0x4da>
 80081ea:	4b75      	ldr	r3, [pc, #468]	@ (80083c0 <_dtoa_r+0x588>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4620      	mov	r0, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	f7f8 fc7b 	bl	8000aec <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f000 808b 	beq.w	8008312 <_dtoa_r+0x4da>
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8087 	beq.w	8008312 <_dtoa_r+0x4da>
 8008204:	f1bb 0f00 	cmp.w	fp, #0
 8008208:	dd34      	ble.n	8008274 <_dtoa_r+0x43c>
 800820a:	4620      	mov	r0, r4
 800820c:	4b6d      	ldr	r3, [pc, #436]	@ (80083c4 <_dtoa_r+0x58c>)
 800820e:	2200      	movs	r2, #0
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 f9f9 	bl	8000608 <__aeabi_dmul>
 8008216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800821a:	f107 38ff 	add.w	r8, r7, #4294967295
 800821e:	3601      	adds	r6, #1
 8008220:	465c      	mov	r4, fp
 8008222:	4630      	mov	r0, r6
 8008224:	f7f8 f986 	bl	8000534 <__aeabi_i2d>
 8008228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800822c:	f7f8 f9ec 	bl	8000608 <__aeabi_dmul>
 8008230:	4b65      	ldr	r3, [pc, #404]	@ (80083c8 <_dtoa_r+0x590>)
 8008232:	2200      	movs	r2, #0
 8008234:	f7f8 f832 	bl	800029c <__adddf3>
 8008238:	4605      	mov	r5, r0
 800823a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800823e:	2c00      	cmp	r4, #0
 8008240:	d16a      	bne.n	8008318 <_dtoa_r+0x4e0>
 8008242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008246:	4b61      	ldr	r3, [pc, #388]	@ (80083cc <_dtoa_r+0x594>)
 8008248:	2200      	movs	r2, #0
 800824a:	f7f8 f825 	bl	8000298 <__aeabi_dsub>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008256:	462a      	mov	r2, r5
 8008258:	4633      	mov	r3, r6
 800825a:	f7f8 fc65 	bl	8000b28 <__aeabi_dcmpgt>
 800825e:	2800      	cmp	r0, #0
 8008260:	f040 8298 	bne.w	8008794 <_dtoa_r+0x95c>
 8008264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008268:	462a      	mov	r2, r5
 800826a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800826e:	f7f8 fc3d 	bl	8000aec <__aeabi_dcmplt>
 8008272:	bb38      	cbnz	r0, 80082c4 <_dtoa_r+0x48c>
 8008274:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008278:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800827c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800827e:	2b00      	cmp	r3, #0
 8008280:	f2c0 8157 	blt.w	8008532 <_dtoa_r+0x6fa>
 8008284:	2f0e      	cmp	r7, #14
 8008286:	f300 8154 	bgt.w	8008532 <_dtoa_r+0x6fa>
 800828a:	4b4b      	ldr	r3, [pc, #300]	@ (80083b8 <_dtoa_r+0x580>)
 800828c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008290:	ed93 7b00 	vldr	d7, [r3]
 8008294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008296:	2b00      	cmp	r3, #0
 8008298:	ed8d 7b00 	vstr	d7, [sp]
 800829c:	f280 80e5 	bge.w	800846a <_dtoa_r+0x632>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f300 80e1 	bgt.w	800846a <_dtoa_r+0x632>
 80082a8:	d10c      	bne.n	80082c4 <_dtoa_r+0x48c>
 80082aa:	4b48      	ldr	r3, [pc, #288]	@ (80083cc <_dtoa_r+0x594>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	ec51 0b17 	vmov	r0, r1, d7
 80082b2:	f7f8 f9a9 	bl	8000608 <__aeabi_dmul>
 80082b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ba:	f7f8 fc2b 	bl	8000b14 <__aeabi_dcmpge>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f000 8266 	beq.w	8008790 <_dtoa_r+0x958>
 80082c4:	2400      	movs	r4, #0
 80082c6:	4625      	mov	r5, r4
 80082c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ca:	4656      	mov	r6, sl
 80082cc:	ea6f 0803 	mvn.w	r8, r3
 80082d0:	2700      	movs	r7, #0
 80082d2:	4621      	mov	r1, r4
 80082d4:	4648      	mov	r0, r9
 80082d6:	f000 fcbf 	bl	8008c58 <_Bfree>
 80082da:	2d00      	cmp	r5, #0
 80082dc:	f000 80bd 	beq.w	800845a <_dtoa_r+0x622>
 80082e0:	b12f      	cbz	r7, 80082ee <_dtoa_r+0x4b6>
 80082e2:	42af      	cmp	r7, r5
 80082e4:	d003      	beq.n	80082ee <_dtoa_r+0x4b6>
 80082e6:	4639      	mov	r1, r7
 80082e8:	4648      	mov	r0, r9
 80082ea:	f000 fcb5 	bl	8008c58 <_Bfree>
 80082ee:	4629      	mov	r1, r5
 80082f0:	4648      	mov	r0, r9
 80082f2:	f000 fcb1 	bl	8008c58 <_Bfree>
 80082f6:	e0b0      	b.n	800845a <_dtoa_r+0x622>
 80082f8:	07e2      	lsls	r2, r4, #31
 80082fa:	d505      	bpl.n	8008308 <_dtoa_r+0x4d0>
 80082fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008300:	f7f8 f982 	bl	8000608 <__aeabi_dmul>
 8008304:	3601      	adds	r6, #1
 8008306:	2301      	movs	r3, #1
 8008308:	1064      	asrs	r4, r4, #1
 800830a:	3508      	adds	r5, #8
 800830c:	e762      	b.n	80081d4 <_dtoa_r+0x39c>
 800830e:	2602      	movs	r6, #2
 8008310:	e765      	b.n	80081de <_dtoa_r+0x3a6>
 8008312:	9c03      	ldr	r4, [sp, #12]
 8008314:	46b8      	mov	r8, r7
 8008316:	e784      	b.n	8008222 <_dtoa_r+0x3ea>
 8008318:	4b27      	ldr	r3, [pc, #156]	@ (80083b8 <_dtoa_r+0x580>)
 800831a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800831c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008324:	4454      	add	r4, sl
 8008326:	2900      	cmp	r1, #0
 8008328:	d054      	beq.n	80083d4 <_dtoa_r+0x59c>
 800832a:	4929      	ldr	r1, [pc, #164]	@ (80083d0 <_dtoa_r+0x598>)
 800832c:	2000      	movs	r0, #0
 800832e:	f7f8 fa95 	bl	800085c <__aeabi_ddiv>
 8008332:	4633      	mov	r3, r6
 8008334:	462a      	mov	r2, r5
 8008336:	f7f7 ffaf 	bl	8000298 <__aeabi_dsub>
 800833a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800833e:	4656      	mov	r6, sl
 8008340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008344:	f7f8 fc10 	bl	8000b68 <__aeabi_d2iz>
 8008348:	4605      	mov	r5, r0
 800834a:	f7f8 f8f3 	bl	8000534 <__aeabi_i2d>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008356:	f7f7 ff9f 	bl	8000298 <__aeabi_dsub>
 800835a:	3530      	adds	r5, #48	@ 0x30
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008364:	f806 5b01 	strb.w	r5, [r6], #1
 8008368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800836c:	f7f8 fbbe 	bl	8000aec <__aeabi_dcmplt>
 8008370:	2800      	cmp	r0, #0
 8008372:	d172      	bne.n	800845a <_dtoa_r+0x622>
 8008374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008378:	4911      	ldr	r1, [pc, #68]	@ (80083c0 <_dtoa_r+0x588>)
 800837a:	2000      	movs	r0, #0
 800837c:	f7f7 ff8c 	bl	8000298 <__aeabi_dsub>
 8008380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008384:	f7f8 fbb2 	bl	8000aec <__aeabi_dcmplt>
 8008388:	2800      	cmp	r0, #0
 800838a:	f040 80b4 	bne.w	80084f6 <_dtoa_r+0x6be>
 800838e:	42a6      	cmp	r6, r4
 8008390:	f43f af70 	beq.w	8008274 <_dtoa_r+0x43c>
 8008394:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008398:	4b0a      	ldr	r3, [pc, #40]	@ (80083c4 <_dtoa_r+0x58c>)
 800839a:	2200      	movs	r2, #0
 800839c:	f7f8 f934 	bl	8000608 <__aeabi_dmul>
 80083a0:	4b08      	ldr	r3, [pc, #32]	@ (80083c4 <_dtoa_r+0x58c>)
 80083a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083a6:	2200      	movs	r2, #0
 80083a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ac:	f7f8 f92c 	bl	8000608 <__aeabi_dmul>
 80083b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b4:	e7c4      	b.n	8008340 <_dtoa_r+0x508>
 80083b6:	bf00      	nop
 80083b8:	0800b608 	.word	0x0800b608
 80083bc:	0800b5e0 	.word	0x0800b5e0
 80083c0:	3ff00000 	.word	0x3ff00000
 80083c4:	40240000 	.word	0x40240000
 80083c8:	401c0000 	.word	0x401c0000
 80083cc:	40140000 	.word	0x40140000
 80083d0:	3fe00000 	.word	0x3fe00000
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	f7f8 f916 	bl	8000608 <__aeabi_dmul>
 80083dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80083e2:	4656      	mov	r6, sl
 80083e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e8:	f7f8 fbbe 	bl	8000b68 <__aeabi_d2iz>
 80083ec:	4605      	mov	r5, r0
 80083ee:	f7f8 f8a1 	bl	8000534 <__aeabi_i2d>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083fa:	f7f7 ff4d 	bl	8000298 <__aeabi_dsub>
 80083fe:	3530      	adds	r5, #48	@ 0x30
 8008400:	f806 5b01 	strb.w	r5, [r6], #1
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	42a6      	cmp	r6, r4
 800840a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	d124      	bne.n	800845e <_dtoa_r+0x626>
 8008414:	4baf      	ldr	r3, [pc, #700]	@ (80086d4 <_dtoa_r+0x89c>)
 8008416:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800841a:	f7f7 ff3f 	bl	800029c <__adddf3>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008426:	f7f8 fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 800842a:	2800      	cmp	r0, #0
 800842c:	d163      	bne.n	80084f6 <_dtoa_r+0x6be>
 800842e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008432:	49a8      	ldr	r1, [pc, #672]	@ (80086d4 <_dtoa_r+0x89c>)
 8008434:	2000      	movs	r0, #0
 8008436:	f7f7 ff2f 	bl	8000298 <__aeabi_dsub>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008442:	f7f8 fb53 	bl	8000aec <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f43f af14 	beq.w	8008274 <_dtoa_r+0x43c>
 800844c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800844e:	1e73      	subs	r3, r6, #1
 8008450:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008456:	2b30      	cmp	r3, #48	@ 0x30
 8008458:	d0f8      	beq.n	800844c <_dtoa_r+0x614>
 800845a:	4647      	mov	r7, r8
 800845c:	e03b      	b.n	80084d6 <_dtoa_r+0x69e>
 800845e:	4b9e      	ldr	r3, [pc, #632]	@ (80086d8 <_dtoa_r+0x8a0>)
 8008460:	f7f8 f8d2 	bl	8000608 <__aeabi_dmul>
 8008464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008468:	e7bc      	b.n	80083e4 <_dtoa_r+0x5ac>
 800846a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800846e:	4656      	mov	r6, sl
 8008470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008474:	4620      	mov	r0, r4
 8008476:	4629      	mov	r1, r5
 8008478:	f7f8 f9f0 	bl	800085c <__aeabi_ddiv>
 800847c:	f7f8 fb74 	bl	8000b68 <__aeabi_d2iz>
 8008480:	4680      	mov	r8, r0
 8008482:	f7f8 f857 	bl	8000534 <__aeabi_i2d>
 8008486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800848a:	f7f8 f8bd 	bl	8000608 <__aeabi_dmul>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4620      	mov	r0, r4
 8008494:	4629      	mov	r1, r5
 8008496:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800849a:	f7f7 fefd 	bl	8000298 <__aeabi_dsub>
 800849e:	f806 4b01 	strb.w	r4, [r6], #1
 80084a2:	9d03      	ldr	r5, [sp, #12]
 80084a4:	eba6 040a 	sub.w	r4, r6, sl
 80084a8:	42a5      	cmp	r5, r4
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	d133      	bne.n	8008518 <_dtoa_r+0x6e0>
 80084b0:	f7f7 fef4 	bl	800029c <__adddf3>
 80084b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	f7f8 fb34 	bl	8000b28 <__aeabi_dcmpgt>
 80084c0:	b9c0      	cbnz	r0, 80084f4 <_dtoa_r+0x6bc>
 80084c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f8 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ce:	b110      	cbz	r0, 80084d6 <_dtoa_r+0x69e>
 80084d0:	f018 0f01 	tst.w	r8, #1
 80084d4:	d10e      	bne.n	80084f4 <_dtoa_r+0x6bc>
 80084d6:	9902      	ldr	r1, [sp, #8]
 80084d8:	4648      	mov	r0, r9
 80084da:	f000 fbbd 	bl	8008c58 <_Bfree>
 80084de:	2300      	movs	r3, #0
 80084e0:	7033      	strb	r3, [r6, #0]
 80084e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80084e4:	3701      	adds	r7, #1
 80084e6:	601f      	str	r7, [r3, #0]
 80084e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 824b 	beq.w	8008986 <_dtoa_r+0xb4e>
 80084f0:	601e      	str	r6, [r3, #0]
 80084f2:	e248      	b.n	8008986 <_dtoa_r+0xb4e>
 80084f4:	46b8      	mov	r8, r7
 80084f6:	4633      	mov	r3, r6
 80084f8:	461e      	mov	r6, r3
 80084fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084fe:	2a39      	cmp	r2, #57	@ 0x39
 8008500:	d106      	bne.n	8008510 <_dtoa_r+0x6d8>
 8008502:	459a      	cmp	sl, r3
 8008504:	d1f8      	bne.n	80084f8 <_dtoa_r+0x6c0>
 8008506:	2230      	movs	r2, #48	@ 0x30
 8008508:	f108 0801 	add.w	r8, r8, #1
 800850c:	f88a 2000 	strb.w	r2, [sl]
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	3201      	adds	r2, #1
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	e7a0      	b.n	800845a <_dtoa_r+0x622>
 8008518:	4b6f      	ldr	r3, [pc, #444]	@ (80086d8 <_dtoa_r+0x8a0>)
 800851a:	2200      	movs	r2, #0
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	2200      	movs	r2, #0
 8008522:	2300      	movs	r3, #0
 8008524:	4604      	mov	r4, r0
 8008526:	460d      	mov	r5, r1
 8008528:	f7f8 fad6 	bl	8000ad8 <__aeabi_dcmpeq>
 800852c:	2800      	cmp	r0, #0
 800852e:	d09f      	beq.n	8008470 <_dtoa_r+0x638>
 8008530:	e7d1      	b.n	80084d6 <_dtoa_r+0x69e>
 8008532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008534:	2a00      	cmp	r2, #0
 8008536:	f000 80ea 	beq.w	800870e <_dtoa_r+0x8d6>
 800853a:	9a07      	ldr	r2, [sp, #28]
 800853c:	2a01      	cmp	r2, #1
 800853e:	f300 80cd 	bgt.w	80086dc <_dtoa_r+0x8a4>
 8008542:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008544:	2a00      	cmp	r2, #0
 8008546:	f000 80c1 	beq.w	80086cc <_dtoa_r+0x894>
 800854a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800854e:	9c08      	ldr	r4, [sp, #32]
 8008550:	9e00      	ldr	r6, [sp, #0]
 8008552:	9a00      	ldr	r2, [sp, #0]
 8008554:	441a      	add	r2, r3
 8008556:	9200      	str	r2, [sp, #0]
 8008558:	9a06      	ldr	r2, [sp, #24]
 800855a:	2101      	movs	r1, #1
 800855c:	441a      	add	r2, r3
 800855e:	4648      	mov	r0, r9
 8008560:	9206      	str	r2, [sp, #24]
 8008562:	f000 fc77 	bl	8008e54 <__i2b>
 8008566:	4605      	mov	r5, r0
 8008568:	b166      	cbz	r6, 8008584 <_dtoa_r+0x74c>
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	dd09      	ble.n	8008584 <_dtoa_r+0x74c>
 8008570:	42b3      	cmp	r3, r6
 8008572:	9a00      	ldr	r2, [sp, #0]
 8008574:	bfa8      	it	ge
 8008576:	4633      	movge	r3, r6
 8008578:	1ad2      	subs	r2, r2, r3
 800857a:	9200      	str	r2, [sp, #0]
 800857c:	9a06      	ldr	r2, [sp, #24]
 800857e:	1af6      	subs	r6, r6, r3
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	9306      	str	r3, [sp, #24]
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	b30b      	cbz	r3, 80085cc <_dtoa_r+0x794>
 8008588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80c6 	beq.w	800871c <_dtoa_r+0x8e4>
 8008590:	2c00      	cmp	r4, #0
 8008592:	f000 80c0 	beq.w	8008716 <_dtoa_r+0x8de>
 8008596:	4629      	mov	r1, r5
 8008598:	4622      	mov	r2, r4
 800859a:	4648      	mov	r0, r9
 800859c:	f000 fd12 	bl	8008fc4 <__pow5mult>
 80085a0:	9a02      	ldr	r2, [sp, #8]
 80085a2:	4601      	mov	r1, r0
 80085a4:	4605      	mov	r5, r0
 80085a6:	4648      	mov	r0, r9
 80085a8:	f000 fc6a 	bl	8008e80 <__multiply>
 80085ac:	9902      	ldr	r1, [sp, #8]
 80085ae:	4680      	mov	r8, r0
 80085b0:	4648      	mov	r0, r9
 80085b2:	f000 fb51 	bl	8008c58 <_Bfree>
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	1b1b      	subs	r3, r3, r4
 80085ba:	9308      	str	r3, [sp, #32]
 80085bc:	f000 80b1 	beq.w	8008722 <_dtoa_r+0x8ea>
 80085c0:	9a08      	ldr	r2, [sp, #32]
 80085c2:	4641      	mov	r1, r8
 80085c4:	4648      	mov	r0, r9
 80085c6:	f000 fcfd 	bl	8008fc4 <__pow5mult>
 80085ca:	9002      	str	r0, [sp, #8]
 80085cc:	2101      	movs	r1, #1
 80085ce:	4648      	mov	r0, r9
 80085d0:	f000 fc40 	bl	8008e54 <__i2b>
 80085d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085d6:	4604      	mov	r4, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 81d8 	beq.w	800898e <_dtoa_r+0xb56>
 80085de:	461a      	mov	r2, r3
 80085e0:	4601      	mov	r1, r0
 80085e2:	4648      	mov	r0, r9
 80085e4:	f000 fcee 	bl	8008fc4 <__pow5mult>
 80085e8:	9b07      	ldr	r3, [sp, #28]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	4604      	mov	r4, r0
 80085ee:	f300 809f 	bgt.w	8008730 <_dtoa_r+0x8f8>
 80085f2:	9b04      	ldr	r3, [sp, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 8097 	bne.w	8008728 <_dtoa_r+0x8f0>
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008600:	2b00      	cmp	r3, #0
 8008602:	f040 8093 	bne.w	800872c <_dtoa_r+0x8f4>
 8008606:	9b05      	ldr	r3, [sp, #20]
 8008608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800860c:	0d1b      	lsrs	r3, r3, #20
 800860e:	051b      	lsls	r3, r3, #20
 8008610:	b133      	cbz	r3, 8008620 <_dtoa_r+0x7e8>
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	3301      	adds	r3, #1
 800861c:	9306      	str	r3, [sp, #24]
 800861e:	2301      	movs	r3, #1
 8008620:	9308      	str	r3, [sp, #32]
 8008622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 81b8 	beq.w	800899a <_dtoa_r+0xb62>
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008630:	6918      	ldr	r0, [r3, #16]
 8008632:	f000 fbc3 	bl	8008dbc <__hi0bits>
 8008636:	f1c0 0020 	rsb	r0, r0, #32
 800863a:	9b06      	ldr	r3, [sp, #24]
 800863c:	4418      	add	r0, r3
 800863e:	f010 001f 	ands.w	r0, r0, #31
 8008642:	f000 8082 	beq.w	800874a <_dtoa_r+0x912>
 8008646:	f1c0 0320 	rsb	r3, r0, #32
 800864a:	2b04      	cmp	r3, #4
 800864c:	dd73      	ble.n	8008736 <_dtoa_r+0x8fe>
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	f1c0 001c 	rsb	r0, r0, #28
 8008654:	4403      	add	r3, r0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	9b06      	ldr	r3, [sp, #24]
 800865a:	4403      	add	r3, r0
 800865c:	4406      	add	r6, r0
 800865e:	9306      	str	r3, [sp, #24]
 8008660:	9b00      	ldr	r3, [sp, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dd05      	ble.n	8008672 <_dtoa_r+0x83a>
 8008666:	9902      	ldr	r1, [sp, #8]
 8008668:	461a      	mov	r2, r3
 800866a:	4648      	mov	r0, r9
 800866c:	f000 fd04 	bl	8009078 <__lshift>
 8008670:	9002      	str	r0, [sp, #8]
 8008672:	9b06      	ldr	r3, [sp, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd05      	ble.n	8008684 <_dtoa_r+0x84c>
 8008678:	4621      	mov	r1, r4
 800867a:	461a      	mov	r2, r3
 800867c:	4648      	mov	r0, r9
 800867e:	f000 fcfb 	bl	8009078 <__lshift>
 8008682:	4604      	mov	r4, r0
 8008684:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d061      	beq.n	800874e <_dtoa_r+0x916>
 800868a:	9802      	ldr	r0, [sp, #8]
 800868c:	4621      	mov	r1, r4
 800868e:	f000 fd5f 	bl	8009150 <__mcmp>
 8008692:	2800      	cmp	r0, #0
 8008694:	da5b      	bge.n	800874e <_dtoa_r+0x916>
 8008696:	2300      	movs	r3, #0
 8008698:	9902      	ldr	r1, [sp, #8]
 800869a:	220a      	movs	r2, #10
 800869c:	4648      	mov	r0, r9
 800869e:	f000 fafd 	bl	8008c9c <__multadd>
 80086a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8177 	beq.w	800899e <_dtoa_r+0xb66>
 80086b0:	4629      	mov	r1, r5
 80086b2:	2300      	movs	r3, #0
 80086b4:	220a      	movs	r2, #10
 80086b6:	4648      	mov	r0, r9
 80086b8:	f000 faf0 	bl	8008c9c <__multadd>
 80086bc:	f1bb 0f00 	cmp.w	fp, #0
 80086c0:	4605      	mov	r5, r0
 80086c2:	dc6f      	bgt.n	80087a4 <_dtoa_r+0x96c>
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc49      	bgt.n	800875e <_dtoa_r+0x926>
 80086ca:	e06b      	b.n	80087a4 <_dtoa_r+0x96c>
 80086cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086d2:	e73c      	b.n	800854e <_dtoa_r+0x716>
 80086d4:	3fe00000 	.word	0x3fe00000
 80086d8:	40240000 	.word	0x40240000
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	1e5c      	subs	r4, r3, #1
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	db09      	blt.n	80086fa <_dtoa_r+0x8c2>
 80086e6:	1b1c      	subs	r4, r3, r4
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f6bf af30 	bge.w	8008550 <_dtoa_r+0x718>
 80086f0:	9b00      	ldr	r3, [sp, #0]
 80086f2:	9a03      	ldr	r2, [sp, #12]
 80086f4:	1a9e      	subs	r6, r3, r2
 80086f6:	2300      	movs	r3, #0
 80086f8:	e72b      	b.n	8008552 <_dtoa_r+0x71a>
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086fe:	9408      	str	r4, [sp, #32]
 8008700:	1ae3      	subs	r3, r4, r3
 8008702:	441a      	add	r2, r3
 8008704:	9e00      	ldr	r6, [sp, #0]
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	920d      	str	r2, [sp, #52]	@ 0x34
 800870a:	2400      	movs	r4, #0
 800870c:	e721      	b.n	8008552 <_dtoa_r+0x71a>
 800870e:	9c08      	ldr	r4, [sp, #32]
 8008710:	9e00      	ldr	r6, [sp, #0]
 8008712:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008714:	e728      	b.n	8008568 <_dtoa_r+0x730>
 8008716:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800871a:	e751      	b.n	80085c0 <_dtoa_r+0x788>
 800871c:	9a08      	ldr	r2, [sp, #32]
 800871e:	9902      	ldr	r1, [sp, #8]
 8008720:	e750      	b.n	80085c4 <_dtoa_r+0x78c>
 8008722:	f8cd 8008 	str.w	r8, [sp, #8]
 8008726:	e751      	b.n	80085cc <_dtoa_r+0x794>
 8008728:	2300      	movs	r3, #0
 800872a:	e779      	b.n	8008620 <_dtoa_r+0x7e8>
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	e777      	b.n	8008620 <_dtoa_r+0x7e8>
 8008730:	2300      	movs	r3, #0
 8008732:	9308      	str	r3, [sp, #32]
 8008734:	e779      	b.n	800862a <_dtoa_r+0x7f2>
 8008736:	d093      	beq.n	8008660 <_dtoa_r+0x828>
 8008738:	9a00      	ldr	r2, [sp, #0]
 800873a:	331c      	adds	r3, #28
 800873c:	441a      	add	r2, r3
 800873e:	9200      	str	r2, [sp, #0]
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	441a      	add	r2, r3
 8008744:	441e      	add	r6, r3
 8008746:	9206      	str	r2, [sp, #24]
 8008748:	e78a      	b.n	8008660 <_dtoa_r+0x828>
 800874a:	4603      	mov	r3, r0
 800874c:	e7f4      	b.n	8008738 <_dtoa_r+0x900>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	46b8      	mov	r8, r7
 8008754:	dc20      	bgt.n	8008798 <_dtoa_r+0x960>
 8008756:	469b      	mov	fp, r3
 8008758:	9b07      	ldr	r3, [sp, #28]
 800875a:	2b02      	cmp	r3, #2
 800875c:	dd1e      	ble.n	800879c <_dtoa_r+0x964>
 800875e:	f1bb 0f00 	cmp.w	fp, #0
 8008762:	f47f adb1 	bne.w	80082c8 <_dtoa_r+0x490>
 8008766:	4621      	mov	r1, r4
 8008768:	465b      	mov	r3, fp
 800876a:	2205      	movs	r2, #5
 800876c:	4648      	mov	r0, r9
 800876e:	f000 fa95 	bl	8008c9c <__multadd>
 8008772:	4601      	mov	r1, r0
 8008774:	4604      	mov	r4, r0
 8008776:	9802      	ldr	r0, [sp, #8]
 8008778:	f000 fcea 	bl	8009150 <__mcmp>
 800877c:	2800      	cmp	r0, #0
 800877e:	f77f ada3 	ble.w	80082c8 <_dtoa_r+0x490>
 8008782:	4656      	mov	r6, sl
 8008784:	2331      	movs	r3, #49	@ 0x31
 8008786:	f806 3b01 	strb.w	r3, [r6], #1
 800878a:	f108 0801 	add.w	r8, r8, #1
 800878e:	e59f      	b.n	80082d0 <_dtoa_r+0x498>
 8008790:	9c03      	ldr	r4, [sp, #12]
 8008792:	46b8      	mov	r8, r7
 8008794:	4625      	mov	r5, r4
 8008796:	e7f4      	b.n	8008782 <_dtoa_r+0x94a>
 8008798:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800879c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 8101 	beq.w	80089a6 <_dtoa_r+0xb6e>
 80087a4:	2e00      	cmp	r6, #0
 80087a6:	dd05      	ble.n	80087b4 <_dtoa_r+0x97c>
 80087a8:	4629      	mov	r1, r5
 80087aa:	4632      	mov	r2, r6
 80087ac:	4648      	mov	r0, r9
 80087ae:	f000 fc63 	bl	8009078 <__lshift>
 80087b2:	4605      	mov	r5, r0
 80087b4:	9b08      	ldr	r3, [sp, #32]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d05c      	beq.n	8008874 <_dtoa_r+0xa3c>
 80087ba:	6869      	ldr	r1, [r5, #4]
 80087bc:	4648      	mov	r0, r9
 80087be:	f000 fa0b 	bl	8008bd8 <_Balloc>
 80087c2:	4606      	mov	r6, r0
 80087c4:	b928      	cbnz	r0, 80087d2 <_dtoa_r+0x99a>
 80087c6:	4b82      	ldr	r3, [pc, #520]	@ (80089d0 <_dtoa_r+0xb98>)
 80087c8:	4602      	mov	r2, r0
 80087ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087ce:	f7ff bb4a 	b.w	8007e66 <_dtoa_r+0x2e>
 80087d2:	692a      	ldr	r2, [r5, #16]
 80087d4:	3202      	adds	r2, #2
 80087d6:	0092      	lsls	r2, r2, #2
 80087d8:	f105 010c 	add.w	r1, r5, #12
 80087dc:	300c      	adds	r0, #12
 80087de:	f002 f8b3 	bl	800a948 <memcpy>
 80087e2:	2201      	movs	r2, #1
 80087e4:	4631      	mov	r1, r6
 80087e6:	4648      	mov	r0, r9
 80087e8:	f000 fc46 	bl	8009078 <__lshift>
 80087ec:	f10a 0301 	add.w	r3, sl, #1
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	eb0a 030b 	add.w	r3, sl, fp
 80087f6:	9308      	str	r3, [sp, #32]
 80087f8:	9b04      	ldr	r3, [sp, #16]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	462f      	mov	r7, r5
 8008800:	9306      	str	r3, [sp, #24]
 8008802:	4605      	mov	r5, r0
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	9802      	ldr	r0, [sp, #8]
 8008808:	4621      	mov	r1, r4
 800880a:	f103 3bff 	add.w	fp, r3, #4294967295
 800880e:	f7ff fa89 	bl	8007d24 <quorem>
 8008812:	4603      	mov	r3, r0
 8008814:	3330      	adds	r3, #48	@ 0x30
 8008816:	9003      	str	r0, [sp, #12]
 8008818:	4639      	mov	r1, r7
 800881a:	9802      	ldr	r0, [sp, #8]
 800881c:	9309      	str	r3, [sp, #36]	@ 0x24
 800881e:	f000 fc97 	bl	8009150 <__mcmp>
 8008822:	462a      	mov	r2, r5
 8008824:	9004      	str	r0, [sp, #16]
 8008826:	4621      	mov	r1, r4
 8008828:	4648      	mov	r0, r9
 800882a:	f000 fcad 	bl	8009188 <__mdiff>
 800882e:	68c2      	ldr	r2, [r0, #12]
 8008830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008832:	4606      	mov	r6, r0
 8008834:	bb02      	cbnz	r2, 8008878 <_dtoa_r+0xa40>
 8008836:	4601      	mov	r1, r0
 8008838:	9802      	ldr	r0, [sp, #8]
 800883a:	f000 fc89 	bl	8009150 <__mcmp>
 800883e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008840:	4602      	mov	r2, r0
 8008842:	4631      	mov	r1, r6
 8008844:	4648      	mov	r0, r9
 8008846:	920c      	str	r2, [sp, #48]	@ 0x30
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	f000 fa05 	bl	8008c58 <_Bfree>
 800884e:	9b07      	ldr	r3, [sp, #28]
 8008850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008852:	9e00      	ldr	r6, [sp, #0]
 8008854:	ea42 0103 	orr.w	r1, r2, r3
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	4319      	orrs	r1, r3
 800885c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885e:	d10d      	bne.n	800887c <_dtoa_r+0xa44>
 8008860:	2b39      	cmp	r3, #57	@ 0x39
 8008862:	d027      	beq.n	80088b4 <_dtoa_r+0xa7c>
 8008864:	9a04      	ldr	r2, [sp, #16]
 8008866:	2a00      	cmp	r2, #0
 8008868:	dd01      	ble.n	800886e <_dtoa_r+0xa36>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	3331      	adds	r3, #49	@ 0x31
 800886e:	f88b 3000 	strb.w	r3, [fp]
 8008872:	e52e      	b.n	80082d2 <_dtoa_r+0x49a>
 8008874:	4628      	mov	r0, r5
 8008876:	e7b9      	b.n	80087ec <_dtoa_r+0x9b4>
 8008878:	2201      	movs	r2, #1
 800887a:	e7e2      	b.n	8008842 <_dtoa_r+0xa0a>
 800887c:	9904      	ldr	r1, [sp, #16]
 800887e:	2900      	cmp	r1, #0
 8008880:	db04      	blt.n	800888c <_dtoa_r+0xa54>
 8008882:	9807      	ldr	r0, [sp, #28]
 8008884:	4301      	orrs	r1, r0
 8008886:	9806      	ldr	r0, [sp, #24]
 8008888:	4301      	orrs	r1, r0
 800888a:	d120      	bne.n	80088ce <_dtoa_r+0xa96>
 800888c:	2a00      	cmp	r2, #0
 800888e:	ddee      	ble.n	800886e <_dtoa_r+0xa36>
 8008890:	9902      	ldr	r1, [sp, #8]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	2201      	movs	r2, #1
 8008896:	4648      	mov	r0, r9
 8008898:	f000 fbee 	bl	8009078 <__lshift>
 800889c:	4621      	mov	r1, r4
 800889e:	9002      	str	r0, [sp, #8]
 80088a0:	f000 fc56 	bl	8009150 <__mcmp>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	9b00      	ldr	r3, [sp, #0]
 80088a8:	dc02      	bgt.n	80088b0 <_dtoa_r+0xa78>
 80088aa:	d1e0      	bne.n	800886e <_dtoa_r+0xa36>
 80088ac:	07da      	lsls	r2, r3, #31
 80088ae:	d5de      	bpl.n	800886e <_dtoa_r+0xa36>
 80088b0:	2b39      	cmp	r3, #57	@ 0x39
 80088b2:	d1da      	bne.n	800886a <_dtoa_r+0xa32>
 80088b4:	2339      	movs	r3, #57	@ 0x39
 80088b6:	f88b 3000 	strb.w	r3, [fp]
 80088ba:	4633      	mov	r3, r6
 80088bc:	461e      	mov	r6, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088c4:	2a39      	cmp	r2, #57	@ 0x39
 80088c6:	d04e      	beq.n	8008966 <_dtoa_r+0xb2e>
 80088c8:	3201      	adds	r2, #1
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	e501      	b.n	80082d2 <_dtoa_r+0x49a>
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	dd03      	ble.n	80088da <_dtoa_r+0xaa2>
 80088d2:	2b39      	cmp	r3, #57	@ 0x39
 80088d4:	d0ee      	beq.n	80088b4 <_dtoa_r+0xa7c>
 80088d6:	3301      	adds	r3, #1
 80088d8:	e7c9      	b.n	800886e <_dtoa_r+0xa36>
 80088da:	9a00      	ldr	r2, [sp, #0]
 80088dc:	9908      	ldr	r1, [sp, #32]
 80088de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088e2:	428a      	cmp	r2, r1
 80088e4:	d028      	beq.n	8008938 <_dtoa_r+0xb00>
 80088e6:	9902      	ldr	r1, [sp, #8]
 80088e8:	2300      	movs	r3, #0
 80088ea:	220a      	movs	r2, #10
 80088ec:	4648      	mov	r0, r9
 80088ee:	f000 f9d5 	bl	8008c9c <__multadd>
 80088f2:	42af      	cmp	r7, r5
 80088f4:	9002      	str	r0, [sp, #8]
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	f04f 020a 	mov.w	r2, #10
 80088fe:	4639      	mov	r1, r7
 8008900:	4648      	mov	r0, r9
 8008902:	d107      	bne.n	8008914 <_dtoa_r+0xadc>
 8008904:	f000 f9ca 	bl	8008c9c <__multadd>
 8008908:	4607      	mov	r7, r0
 800890a:	4605      	mov	r5, r0
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	3301      	adds	r3, #1
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	e777      	b.n	8008804 <_dtoa_r+0x9cc>
 8008914:	f000 f9c2 	bl	8008c9c <__multadd>
 8008918:	4629      	mov	r1, r5
 800891a:	4607      	mov	r7, r0
 800891c:	2300      	movs	r3, #0
 800891e:	220a      	movs	r2, #10
 8008920:	4648      	mov	r0, r9
 8008922:	f000 f9bb 	bl	8008c9c <__multadd>
 8008926:	4605      	mov	r5, r0
 8008928:	e7f0      	b.n	800890c <_dtoa_r+0xad4>
 800892a:	f1bb 0f00 	cmp.w	fp, #0
 800892e:	bfcc      	ite	gt
 8008930:	465e      	movgt	r6, fp
 8008932:	2601      	movle	r6, #1
 8008934:	4456      	add	r6, sl
 8008936:	2700      	movs	r7, #0
 8008938:	9902      	ldr	r1, [sp, #8]
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	2201      	movs	r2, #1
 800893e:	4648      	mov	r0, r9
 8008940:	f000 fb9a 	bl	8009078 <__lshift>
 8008944:	4621      	mov	r1, r4
 8008946:	9002      	str	r0, [sp, #8]
 8008948:	f000 fc02 	bl	8009150 <__mcmp>
 800894c:	2800      	cmp	r0, #0
 800894e:	dcb4      	bgt.n	80088ba <_dtoa_r+0xa82>
 8008950:	d102      	bne.n	8008958 <_dtoa_r+0xb20>
 8008952:	9b00      	ldr	r3, [sp, #0]
 8008954:	07db      	lsls	r3, r3, #31
 8008956:	d4b0      	bmi.n	80088ba <_dtoa_r+0xa82>
 8008958:	4633      	mov	r3, r6
 800895a:	461e      	mov	r6, r3
 800895c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008960:	2a30      	cmp	r2, #48	@ 0x30
 8008962:	d0fa      	beq.n	800895a <_dtoa_r+0xb22>
 8008964:	e4b5      	b.n	80082d2 <_dtoa_r+0x49a>
 8008966:	459a      	cmp	sl, r3
 8008968:	d1a8      	bne.n	80088bc <_dtoa_r+0xa84>
 800896a:	2331      	movs	r3, #49	@ 0x31
 800896c:	f108 0801 	add.w	r8, r8, #1
 8008970:	f88a 3000 	strb.w	r3, [sl]
 8008974:	e4ad      	b.n	80082d2 <_dtoa_r+0x49a>
 8008976:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008978:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80089d4 <_dtoa_r+0xb9c>
 800897c:	b11b      	cbz	r3, 8008986 <_dtoa_r+0xb4e>
 800897e:	f10a 0308 	add.w	r3, sl, #8
 8008982:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	4650      	mov	r0, sl
 8008988:	b017      	add	sp, #92	@ 0x5c
 800898a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898e:	9b07      	ldr	r3, [sp, #28]
 8008990:	2b01      	cmp	r3, #1
 8008992:	f77f ae2e 	ble.w	80085f2 <_dtoa_r+0x7ba>
 8008996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	2001      	movs	r0, #1
 800899c:	e64d      	b.n	800863a <_dtoa_r+0x802>
 800899e:	f1bb 0f00 	cmp.w	fp, #0
 80089a2:	f77f aed9 	ble.w	8008758 <_dtoa_r+0x920>
 80089a6:	4656      	mov	r6, sl
 80089a8:	9802      	ldr	r0, [sp, #8]
 80089aa:	4621      	mov	r1, r4
 80089ac:	f7ff f9ba 	bl	8007d24 <quorem>
 80089b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80089b4:	f806 3b01 	strb.w	r3, [r6], #1
 80089b8:	eba6 020a 	sub.w	r2, r6, sl
 80089bc:	4593      	cmp	fp, r2
 80089be:	ddb4      	ble.n	800892a <_dtoa_r+0xaf2>
 80089c0:	9902      	ldr	r1, [sp, #8]
 80089c2:	2300      	movs	r3, #0
 80089c4:	220a      	movs	r2, #10
 80089c6:	4648      	mov	r0, r9
 80089c8:	f000 f968 	bl	8008c9c <__multadd>
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	e7eb      	b.n	80089a8 <_dtoa_r+0xb70>
 80089d0:	0800b4b2 	.word	0x0800b4b2
 80089d4:	0800b436 	.word	0x0800b436

080089d8 <_free_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4605      	mov	r5, r0
 80089dc:	2900      	cmp	r1, #0
 80089de:	d041      	beq.n	8008a64 <_free_r+0x8c>
 80089e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e4:	1f0c      	subs	r4, r1, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bfb8      	it	lt
 80089ea:	18e4      	addlt	r4, r4, r3
 80089ec:	f000 f8e8 	bl	8008bc0 <__malloc_lock>
 80089f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a68 <_free_r+0x90>)
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	b933      	cbnz	r3, 8008a04 <_free_r+0x2c>
 80089f6:	6063      	str	r3, [r4, #4]
 80089f8:	6014      	str	r4, [r2, #0]
 80089fa:	4628      	mov	r0, r5
 80089fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a00:	f000 b8e4 	b.w	8008bcc <__malloc_unlock>
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	d908      	bls.n	8008a1a <_free_r+0x42>
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	1821      	adds	r1, r4, r0
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	bf01      	itttt	eq
 8008a10:	6819      	ldreq	r1, [r3, #0]
 8008a12:	685b      	ldreq	r3, [r3, #4]
 8008a14:	1809      	addeq	r1, r1, r0
 8008a16:	6021      	streq	r1, [r4, #0]
 8008a18:	e7ed      	b.n	80089f6 <_free_r+0x1e>
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	b10b      	cbz	r3, 8008a24 <_free_r+0x4c>
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	d9fa      	bls.n	8008a1a <_free_r+0x42>
 8008a24:	6811      	ldr	r1, [r2, #0]
 8008a26:	1850      	adds	r0, r2, r1
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d10b      	bne.n	8008a44 <_free_r+0x6c>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	4401      	add	r1, r0
 8008a30:	1850      	adds	r0, r2, r1
 8008a32:	4283      	cmp	r3, r0
 8008a34:	6011      	str	r1, [r2, #0]
 8008a36:	d1e0      	bne.n	80089fa <_free_r+0x22>
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	6053      	str	r3, [r2, #4]
 8008a3e:	4408      	add	r0, r1
 8008a40:	6010      	str	r0, [r2, #0]
 8008a42:	e7da      	b.n	80089fa <_free_r+0x22>
 8008a44:	d902      	bls.n	8008a4c <_free_r+0x74>
 8008a46:	230c      	movs	r3, #12
 8008a48:	602b      	str	r3, [r5, #0]
 8008a4a:	e7d6      	b.n	80089fa <_free_r+0x22>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	1821      	adds	r1, r4, r0
 8008a50:	428b      	cmp	r3, r1
 8008a52:	bf04      	itt	eq
 8008a54:	6819      	ldreq	r1, [r3, #0]
 8008a56:	685b      	ldreq	r3, [r3, #4]
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	bf04      	itt	eq
 8008a5c:	1809      	addeq	r1, r1, r0
 8008a5e:	6021      	streq	r1, [r4, #0]
 8008a60:	6054      	str	r4, [r2, #4]
 8008a62:	e7ca      	b.n	80089fa <_free_r+0x22>
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop
 8008a68:	2000048c 	.word	0x2000048c

08008a6c <malloc>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	@ (8008a78 <malloc+0xc>)
 8008a6e:	4601      	mov	r1, r0
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f000 b825 	b.w	8008ac0 <_malloc_r>
 8008a76:	bf00      	nop
 8008a78:	20000018 	.word	0x20000018

08008a7c <sbrk_aligned>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008abc <sbrk_aligned+0x40>)
 8008a80:	460c      	mov	r4, r1
 8008a82:	6831      	ldr	r1, [r6, #0]
 8008a84:	4605      	mov	r5, r0
 8008a86:	b911      	cbnz	r1, 8008a8e <sbrk_aligned+0x12>
 8008a88:	f001 ff4e 	bl	800a928 <_sbrk_r>
 8008a8c:	6030      	str	r0, [r6, #0]
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f001 ff49 	bl	800a928 <_sbrk_r>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d103      	bne.n	8008aa2 <sbrk_aligned+0x26>
 8008a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	bd70      	pop	{r4, r5, r6, pc}
 8008aa2:	1cc4      	adds	r4, r0, #3
 8008aa4:	f024 0403 	bic.w	r4, r4, #3
 8008aa8:	42a0      	cmp	r0, r4
 8008aaa:	d0f8      	beq.n	8008a9e <sbrk_aligned+0x22>
 8008aac:	1a21      	subs	r1, r4, r0
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f001 ff3a 	bl	800a928 <_sbrk_r>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d1f2      	bne.n	8008a9e <sbrk_aligned+0x22>
 8008ab8:	e7ef      	b.n	8008a9a <sbrk_aligned+0x1e>
 8008aba:	bf00      	nop
 8008abc:	20000488 	.word	0x20000488

08008ac0 <_malloc_r>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	1ccd      	adds	r5, r1, #3
 8008ac6:	f025 0503 	bic.w	r5, r5, #3
 8008aca:	3508      	adds	r5, #8
 8008acc:	2d0c      	cmp	r5, #12
 8008ace:	bf38      	it	cc
 8008ad0:	250c      	movcc	r5, #12
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	db01      	blt.n	8008adc <_malloc_r+0x1c>
 8008ad8:	42a9      	cmp	r1, r5
 8008ada:	d904      	bls.n	8008ae6 <_malloc_r+0x26>
 8008adc:	230c      	movs	r3, #12
 8008ade:	6033      	str	r3, [r6, #0]
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bbc <_malloc_r+0xfc>
 8008aea:	f000 f869 	bl	8008bc0 <__malloc_lock>
 8008aee:	f8d8 3000 	ldr.w	r3, [r8]
 8008af2:	461c      	mov	r4, r3
 8008af4:	bb44      	cbnz	r4, 8008b48 <_malloc_r+0x88>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7ff ffbf 	bl	8008a7c <sbrk_aligned>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	4604      	mov	r4, r0
 8008b02:	d158      	bne.n	8008bb6 <_malloc_r+0xf6>
 8008b04:	f8d8 4000 	ldr.w	r4, [r8]
 8008b08:	4627      	mov	r7, r4
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	d143      	bne.n	8008b96 <_malloc_r+0xd6>
 8008b0e:	2c00      	cmp	r4, #0
 8008b10:	d04b      	beq.n	8008baa <_malloc_r+0xea>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	4639      	mov	r1, r7
 8008b16:	4630      	mov	r0, r6
 8008b18:	eb04 0903 	add.w	r9, r4, r3
 8008b1c:	f001 ff04 	bl	800a928 <_sbrk_r>
 8008b20:	4581      	cmp	r9, r0
 8008b22:	d142      	bne.n	8008baa <_malloc_r+0xea>
 8008b24:	6821      	ldr	r1, [r4, #0]
 8008b26:	1a6d      	subs	r5, r5, r1
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ffa6 	bl	8008a7c <sbrk_aligned>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d03a      	beq.n	8008baa <_malloc_r+0xea>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	442b      	add	r3, r5
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	bb62      	cbnz	r2, 8008b9c <_malloc_r+0xdc>
 8008b42:	f8c8 7000 	str.w	r7, [r8]
 8008b46:	e00f      	b.n	8008b68 <_malloc_r+0xa8>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	1b52      	subs	r2, r2, r5
 8008b4c:	d420      	bmi.n	8008b90 <_malloc_r+0xd0>
 8008b4e:	2a0b      	cmp	r2, #11
 8008b50:	d917      	bls.n	8008b82 <_malloc_r+0xc2>
 8008b52:	1961      	adds	r1, r4, r5
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	6025      	str	r5, [r4, #0]
 8008b58:	bf18      	it	ne
 8008b5a:	6059      	strne	r1, [r3, #4]
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	bf08      	it	eq
 8008b60:	f8c8 1000 	streq.w	r1, [r8]
 8008b64:	5162      	str	r2, [r4, r5]
 8008b66:	604b      	str	r3, [r1, #4]
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 f82f 	bl	8008bcc <__malloc_unlock>
 8008b6e:	f104 000b 	add.w	r0, r4, #11
 8008b72:	1d23      	adds	r3, r4, #4
 8008b74:	f020 0007 	bic.w	r0, r0, #7
 8008b78:	1ac2      	subs	r2, r0, r3
 8008b7a:	bf1c      	itt	ne
 8008b7c:	1a1b      	subne	r3, r3, r0
 8008b7e:	50a3      	strne	r3, [r4, r2]
 8008b80:	e7af      	b.n	8008ae2 <_malloc_r+0x22>
 8008b82:	6862      	ldr	r2, [r4, #4]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	bf0c      	ite	eq
 8008b88:	f8c8 2000 	streq.w	r2, [r8]
 8008b8c:	605a      	strne	r2, [r3, #4]
 8008b8e:	e7eb      	b.n	8008b68 <_malloc_r+0xa8>
 8008b90:	4623      	mov	r3, r4
 8008b92:	6864      	ldr	r4, [r4, #4]
 8008b94:	e7ae      	b.n	8008af4 <_malloc_r+0x34>
 8008b96:	463c      	mov	r4, r7
 8008b98:	687f      	ldr	r7, [r7, #4]
 8008b9a:	e7b6      	b.n	8008b0a <_malloc_r+0x4a>
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d1fb      	bne.n	8008b9c <_malloc_r+0xdc>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	6053      	str	r3, [r2, #4]
 8008ba8:	e7de      	b.n	8008b68 <_malloc_r+0xa8>
 8008baa:	230c      	movs	r3, #12
 8008bac:	6033      	str	r3, [r6, #0]
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f80c 	bl	8008bcc <__malloc_unlock>
 8008bb4:	e794      	b.n	8008ae0 <_malloc_r+0x20>
 8008bb6:	6005      	str	r5, [r0, #0]
 8008bb8:	e7d6      	b.n	8008b68 <_malloc_r+0xa8>
 8008bba:	bf00      	nop
 8008bbc:	2000048c 	.word	0x2000048c

08008bc0 <__malloc_lock>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__malloc_lock+0x8>)
 8008bc2:	f7ff b8a6 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	20000484 	.word	0x20000484

08008bcc <__malloc_unlock>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	@ (8008bd4 <__malloc_unlock+0x8>)
 8008bce:	f7ff b8a1 	b.w	8007d14 <__retarget_lock_release_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	20000484 	.word	0x20000484

08008bd8 <_Balloc>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	69c6      	ldr	r6, [r0, #28]
 8008bdc:	4604      	mov	r4, r0
 8008bde:	460d      	mov	r5, r1
 8008be0:	b976      	cbnz	r6, 8008c00 <_Balloc+0x28>
 8008be2:	2010      	movs	r0, #16
 8008be4:	f7ff ff42 	bl	8008a6c <malloc>
 8008be8:	4602      	mov	r2, r0
 8008bea:	61e0      	str	r0, [r4, #28]
 8008bec:	b920      	cbnz	r0, 8008bf8 <_Balloc+0x20>
 8008bee:	4b18      	ldr	r3, [pc, #96]	@ (8008c50 <_Balloc+0x78>)
 8008bf0:	4818      	ldr	r0, [pc, #96]	@ (8008c54 <_Balloc+0x7c>)
 8008bf2:	216b      	movs	r1, #107	@ 0x6b
 8008bf4:	f001 fec0 	bl	800a978 <__assert_func>
 8008bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bfc:	6006      	str	r6, [r0, #0]
 8008bfe:	60c6      	str	r6, [r0, #12]
 8008c00:	69e6      	ldr	r6, [r4, #28]
 8008c02:	68f3      	ldr	r3, [r6, #12]
 8008c04:	b183      	cbz	r3, 8008c28 <_Balloc+0x50>
 8008c06:	69e3      	ldr	r3, [r4, #28]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c0e:	b9b8      	cbnz	r0, 8008c40 <_Balloc+0x68>
 8008c10:	2101      	movs	r1, #1
 8008c12:	fa01 f605 	lsl.w	r6, r1, r5
 8008c16:	1d72      	adds	r2, r6, #5
 8008c18:	0092      	lsls	r2, r2, #2
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f001 feca 	bl	800a9b4 <_calloc_r>
 8008c20:	b160      	cbz	r0, 8008c3c <_Balloc+0x64>
 8008c22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c26:	e00e      	b.n	8008c46 <_Balloc+0x6e>
 8008c28:	2221      	movs	r2, #33	@ 0x21
 8008c2a:	2104      	movs	r1, #4
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f001 fec1 	bl	800a9b4 <_calloc_r>
 8008c32:	69e3      	ldr	r3, [r4, #28]
 8008c34:	60f0      	str	r0, [r6, #12]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e4      	bne.n	8008c06 <_Balloc+0x2e>
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	6802      	ldr	r2, [r0, #0]
 8008c42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c46:	2300      	movs	r3, #0
 8008c48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c4c:	e7f7      	b.n	8008c3e <_Balloc+0x66>
 8008c4e:	bf00      	nop
 8008c50:	0800b443 	.word	0x0800b443
 8008c54:	0800b4c3 	.word	0x0800b4c3

08008c58 <_Bfree>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	69c6      	ldr	r6, [r0, #28]
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	b976      	cbnz	r6, 8008c80 <_Bfree+0x28>
 8008c62:	2010      	movs	r0, #16
 8008c64:	f7ff ff02 	bl	8008a6c <malloc>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	61e8      	str	r0, [r5, #28]
 8008c6c:	b920      	cbnz	r0, 8008c78 <_Bfree+0x20>
 8008c6e:	4b09      	ldr	r3, [pc, #36]	@ (8008c94 <_Bfree+0x3c>)
 8008c70:	4809      	ldr	r0, [pc, #36]	@ (8008c98 <_Bfree+0x40>)
 8008c72:	218f      	movs	r1, #143	@ 0x8f
 8008c74:	f001 fe80 	bl	800a978 <__assert_func>
 8008c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c7c:	6006      	str	r6, [r0, #0]
 8008c7e:	60c6      	str	r6, [r0, #12]
 8008c80:	b13c      	cbz	r4, 8008c92 <_Bfree+0x3a>
 8008c82:	69eb      	ldr	r3, [r5, #28]
 8008c84:	6862      	ldr	r2, [r4, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c8c:	6021      	str	r1, [r4, #0]
 8008c8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	0800b443 	.word	0x0800b443
 8008c98:	0800b4c3 	.word	0x0800b4c3

08008c9c <__multadd>:
 8008c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca0:	690d      	ldr	r5, [r1, #16]
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	461e      	mov	r6, r3
 8008ca8:	f101 0c14 	add.w	ip, r1, #20
 8008cac:	2000      	movs	r0, #0
 8008cae:	f8dc 3000 	ldr.w	r3, [ip]
 8008cb2:	b299      	uxth	r1, r3
 8008cb4:	fb02 6101 	mla	r1, r2, r1, r6
 8008cb8:	0c1e      	lsrs	r6, r3, #16
 8008cba:	0c0b      	lsrs	r3, r1, #16
 8008cbc:	fb02 3306 	mla	r3, r2, r6, r3
 8008cc0:	b289      	uxth	r1, r1
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cc8:	4285      	cmp	r5, r0
 8008cca:	f84c 1b04 	str.w	r1, [ip], #4
 8008cce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cd2:	dcec      	bgt.n	8008cae <__multadd+0x12>
 8008cd4:	b30e      	cbz	r6, 8008d1a <__multadd+0x7e>
 8008cd6:	68a3      	ldr	r3, [r4, #8]
 8008cd8:	42ab      	cmp	r3, r5
 8008cda:	dc19      	bgt.n	8008d10 <__multadd+0x74>
 8008cdc:	6861      	ldr	r1, [r4, #4]
 8008cde:	4638      	mov	r0, r7
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	f7ff ff79 	bl	8008bd8 <_Balloc>
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	b928      	cbnz	r0, 8008cf6 <__multadd+0x5a>
 8008cea:	4602      	mov	r2, r0
 8008cec:	4b0c      	ldr	r3, [pc, #48]	@ (8008d20 <__multadd+0x84>)
 8008cee:	480d      	ldr	r0, [pc, #52]	@ (8008d24 <__multadd+0x88>)
 8008cf0:	21ba      	movs	r1, #186	@ 0xba
 8008cf2:	f001 fe41 	bl	800a978 <__assert_func>
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	3202      	adds	r2, #2
 8008cfa:	f104 010c 	add.w	r1, r4, #12
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	300c      	adds	r0, #12
 8008d02:	f001 fe21 	bl	800a948 <memcpy>
 8008d06:	4621      	mov	r1, r4
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff ffa5 	bl	8008c58 <_Bfree>
 8008d0e:	4644      	mov	r4, r8
 8008d10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d14:	3501      	adds	r5, #1
 8008d16:	615e      	str	r6, [r3, #20]
 8008d18:	6125      	str	r5, [r4, #16]
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	0800b4b2 	.word	0x0800b4b2
 8008d24:	0800b4c3 	.word	0x0800b4c3

08008d28 <__s2b>:
 8008d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	4615      	mov	r5, r2
 8008d30:	461f      	mov	r7, r3
 8008d32:	2209      	movs	r2, #9
 8008d34:	3308      	adds	r3, #8
 8008d36:	4606      	mov	r6, r0
 8008d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	2201      	movs	r2, #1
 8008d40:	429a      	cmp	r2, r3
 8008d42:	db09      	blt.n	8008d58 <__s2b+0x30>
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7ff ff47 	bl	8008bd8 <_Balloc>
 8008d4a:	b940      	cbnz	r0, 8008d5e <__s2b+0x36>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	4b19      	ldr	r3, [pc, #100]	@ (8008db4 <__s2b+0x8c>)
 8008d50:	4819      	ldr	r0, [pc, #100]	@ (8008db8 <__s2b+0x90>)
 8008d52:	21d3      	movs	r1, #211	@ 0xd3
 8008d54:	f001 fe10 	bl	800a978 <__assert_func>
 8008d58:	0052      	lsls	r2, r2, #1
 8008d5a:	3101      	adds	r1, #1
 8008d5c:	e7f0      	b.n	8008d40 <__s2b+0x18>
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	6143      	str	r3, [r0, #20]
 8008d62:	2d09      	cmp	r5, #9
 8008d64:	f04f 0301 	mov.w	r3, #1
 8008d68:	6103      	str	r3, [r0, #16]
 8008d6a:	dd16      	ble.n	8008d9a <__s2b+0x72>
 8008d6c:	f104 0909 	add.w	r9, r4, #9
 8008d70:	46c8      	mov	r8, r9
 8008d72:	442c      	add	r4, r5
 8008d74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d78:	4601      	mov	r1, r0
 8008d7a:	3b30      	subs	r3, #48	@ 0x30
 8008d7c:	220a      	movs	r2, #10
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f7ff ff8c 	bl	8008c9c <__multadd>
 8008d84:	45a0      	cmp	r8, r4
 8008d86:	d1f5      	bne.n	8008d74 <__s2b+0x4c>
 8008d88:	f1a5 0408 	sub.w	r4, r5, #8
 8008d8c:	444c      	add	r4, r9
 8008d8e:	1b2d      	subs	r5, r5, r4
 8008d90:	1963      	adds	r3, r4, r5
 8008d92:	42bb      	cmp	r3, r7
 8008d94:	db04      	blt.n	8008da0 <__s2b+0x78>
 8008d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d9a:	340a      	adds	r4, #10
 8008d9c:	2509      	movs	r5, #9
 8008d9e:	e7f6      	b.n	8008d8e <__s2b+0x66>
 8008da0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008da4:	4601      	mov	r1, r0
 8008da6:	3b30      	subs	r3, #48	@ 0x30
 8008da8:	220a      	movs	r2, #10
 8008daa:	4630      	mov	r0, r6
 8008dac:	f7ff ff76 	bl	8008c9c <__multadd>
 8008db0:	e7ee      	b.n	8008d90 <__s2b+0x68>
 8008db2:	bf00      	nop
 8008db4:	0800b4b2 	.word	0x0800b4b2
 8008db8:	0800b4c3 	.word	0x0800b4c3

08008dbc <__hi0bits>:
 8008dbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	bf36      	itet	cc
 8008dc4:	0403      	lslcc	r3, r0, #16
 8008dc6:	2000      	movcs	r0, #0
 8008dc8:	2010      	movcc	r0, #16
 8008dca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dce:	bf3c      	itt	cc
 8008dd0:	021b      	lslcc	r3, r3, #8
 8008dd2:	3008      	addcc	r0, #8
 8008dd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dd8:	bf3c      	itt	cc
 8008dda:	011b      	lslcc	r3, r3, #4
 8008ddc:	3004      	addcc	r0, #4
 8008dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de2:	bf3c      	itt	cc
 8008de4:	009b      	lslcc	r3, r3, #2
 8008de6:	3002      	addcc	r0, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	db05      	blt.n	8008df8 <__hi0bits+0x3c>
 8008dec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008df0:	f100 0001 	add.w	r0, r0, #1
 8008df4:	bf08      	it	eq
 8008df6:	2020      	moveq	r0, #32
 8008df8:	4770      	bx	lr

08008dfa <__lo0bits>:
 8008dfa:	6803      	ldr	r3, [r0, #0]
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	f013 0007 	ands.w	r0, r3, #7
 8008e02:	d00b      	beq.n	8008e1c <__lo0bits+0x22>
 8008e04:	07d9      	lsls	r1, r3, #31
 8008e06:	d421      	bmi.n	8008e4c <__lo0bits+0x52>
 8008e08:	0798      	lsls	r0, r3, #30
 8008e0a:	bf49      	itett	mi
 8008e0c:	085b      	lsrmi	r3, r3, #1
 8008e0e:	089b      	lsrpl	r3, r3, #2
 8008e10:	2001      	movmi	r0, #1
 8008e12:	6013      	strmi	r3, [r2, #0]
 8008e14:	bf5c      	itt	pl
 8008e16:	6013      	strpl	r3, [r2, #0]
 8008e18:	2002      	movpl	r0, #2
 8008e1a:	4770      	bx	lr
 8008e1c:	b299      	uxth	r1, r3
 8008e1e:	b909      	cbnz	r1, 8008e24 <__lo0bits+0x2a>
 8008e20:	0c1b      	lsrs	r3, r3, #16
 8008e22:	2010      	movs	r0, #16
 8008e24:	b2d9      	uxtb	r1, r3
 8008e26:	b909      	cbnz	r1, 8008e2c <__lo0bits+0x32>
 8008e28:	3008      	adds	r0, #8
 8008e2a:	0a1b      	lsrs	r3, r3, #8
 8008e2c:	0719      	lsls	r1, r3, #28
 8008e2e:	bf04      	itt	eq
 8008e30:	091b      	lsreq	r3, r3, #4
 8008e32:	3004      	addeq	r0, #4
 8008e34:	0799      	lsls	r1, r3, #30
 8008e36:	bf04      	itt	eq
 8008e38:	089b      	lsreq	r3, r3, #2
 8008e3a:	3002      	addeq	r0, #2
 8008e3c:	07d9      	lsls	r1, r3, #31
 8008e3e:	d403      	bmi.n	8008e48 <__lo0bits+0x4e>
 8008e40:	085b      	lsrs	r3, r3, #1
 8008e42:	f100 0001 	add.w	r0, r0, #1
 8008e46:	d003      	beq.n	8008e50 <__lo0bits+0x56>
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	4770      	bx	lr
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4770      	bx	lr
 8008e50:	2020      	movs	r0, #32
 8008e52:	4770      	bx	lr

08008e54 <__i2b>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	460c      	mov	r4, r1
 8008e58:	2101      	movs	r1, #1
 8008e5a:	f7ff febd 	bl	8008bd8 <_Balloc>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	b928      	cbnz	r0, 8008e6e <__i2b+0x1a>
 8008e62:	4b05      	ldr	r3, [pc, #20]	@ (8008e78 <__i2b+0x24>)
 8008e64:	4805      	ldr	r0, [pc, #20]	@ (8008e7c <__i2b+0x28>)
 8008e66:	f240 1145 	movw	r1, #325	@ 0x145
 8008e6a:	f001 fd85 	bl	800a978 <__assert_func>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	6144      	str	r4, [r0, #20]
 8008e72:	6103      	str	r3, [r0, #16]
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	bf00      	nop
 8008e78:	0800b4b2 	.word	0x0800b4b2
 8008e7c:	0800b4c3 	.word	0x0800b4c3

08008e80 <__multiply>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	4617      	mov	r7, r2
 8008e86:	690a      	ldr	r2, [r1, #16]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	bfa8      	it	ge
 8008e8e:	463b      	movge	r3, r7
 8008e90:	4689      	mov	r9, r1
 8008e92:	bfa4      	itt	ge
 8008e94:	460f      	movge	r7, r1
 8008e96:	4699      	movge	r9, r3
 8008e98:	693d      	ldr	r5, [r7, #16]
 8008e9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	eb05 060a 	add.w	r6, r5, sl
 8008ea6:	42b3      	cmp	r3, r6
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	bfb8      	it	lt
 8008eac:	3101      	addlt	r1, #1
 8008eae:	f7ff fe93 	bl	8008bd8 <_Balloc>
 8008eb2:	b930      	cbnz	r0, 8008ec2 <__multiply+0x42>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4b41      	ldr	r3, [pc, #260]	@ (8008fbc <__multiply+0x13c>)
 8008eb8:	4841      	ldr	r0, [pc, #260]	@ (8008fc0 <__multiply+0x140>)
 8008eba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ebe:	f001 fd5b 	bl	800a978 <__assert_func>
 8008ec2:	f100 0414 	add.w	r4, r0, #20
 8008ec6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008eca:	4623      	mov	r3, r4
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4573      	cmp	r3, lr
 8008ed0:	d320      	bcc.n	8008f14 <__multiply+0x94>
 8008ed2:	f107 0814 	add.w	r8, r7, #20
 8008ed6:	f109 0114 	add.w	r1, r9, #20
 8008eda:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ede:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ee2:	9302      	str	r3, [sp, #8]
 8008ee4:	1beb      	subs	r3, r5, r7
 8008ee6:	3b15      	subs	r3, #21
 8008ee8:	f023 0303 	bic.w	r3, r3, #3
 8008eec:	3304      	adds	r3, #4
 8008eee:	3715      	adds	r7, #21
 8008ef0:	42bd      	cmp	r5, r7
 8008ef2:	bf38      	it	cc
 8008ef4:	2304      	movcc	r3, #4
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	9103      	str	r1, [sp, #12]
 8008efc:	428b      	cmp	r3, r1
 8008efe:	d80c      	bhi.n	8008f1a <__multiply+0x9a>
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	dd03      	ble.n	8008f0c <__multiply+0x8c>
 8008f04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d055      	beq.n	8008fb8 <__multiply+0x138>
 8008f0c:	6106      	str	r6, [r0, #16]
 8008f0e:	b005      	add	sp, #20
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	f843 2b04 	str.w	r2, [r3], #4
 8008f18:	e7d9      	b.n	8008ece <__multiply+0x4e>
 8008f1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f1e:	f1ba 0f00 	cmp.w	sl, #0
 8008f22:	d01f      	beq.n	8008f64 <__multiply+0xe4>
 8008f24:	46c4      	mov	ip, r8
 8008f26:	46a1      	mov	r9, r4
 8008f28:	2700      	movs	r7, #0
 8008f2a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f2e:	f8d9 3000 	ldr.w	r3, [r9]
 8008f32:	fa1f fb82 	uxth.w	fp, r2
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f3c:	443b      	add	r3, r7
 8008f3e:	f8d9 7000 	ldr.w	r7, [r9]
 8008f42:	0c12      	lsrs	r2, r2, #16
 8008f44:	0c3f      	lsrs	r7, r7, #16
 8008f46:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f4a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f54:	4565      	cmp	r5, ip
 8008f56:	f849 3b04 	str.w	r3, [r9], #4
 8008f5a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f5e:	d8e4      	bhi.n	8008f2a <__multiply+0xaa>
 8008f60:	9b01      	ldr	r3, [sp, #4]
 8008f62:	50e7      	str	r7, [r4, r3]
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f6a:	3104      	adds	r1, #4
 8008f6c:	f1b9 0f00 	cmp.w	r9, #0
 8008f70:	d020      	beq.n	8008fb4 <__multiply+0x134>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	4647      	mov	r7, r8
 8008f76:	46a4      	mov	ip, r4
 8008f78:	f04f 0a00 	mov.w	sl, #0
 8008f7c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f80:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f84:	fb09 220b 	mla	r2, r9, fp, r2
 8008f88:	4452      	add	r2, sl
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f90:	f84c 3b04 	str.w	r3, [ip], #4
 8008f94:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f9c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008fa0:	fb09 330a 	mla	r3, r9, sl, r3
 8008fa4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008fa8:	42bd      	cmp	r5, r7
 8008faa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fae:	d8e5      	bhi.n	8008f7c <__multiply+0xfc>
 8008fb0:	9a01      	ldr	r2, [sp, #4]
 8008fb2:	50a3      	str	r3, [r4, r2]
 8008fb4:	3404      	adds	r4, #4
 8008fb6:	e79f      	b.n	8008ef8 <__multiply+0x78>
 8008fb8:	3e01      	subs	r6, #1
 8008fba:	e7a1      	b.n	8008f00 <__multiply+0x80>
 8008fbc:	0800b4b2 	.word	0x0800b4b2
 8008fc0:	0800b4c3 	.word	0x0800b4c3

08008fc4 <__pow5mult>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	4615      	mov	r5, r2
 8008fca:	f012 0203 	ands.w	r2, r2, #3
 8008fce:	4607      	mov	r7, r0
 8008fd0:	460e      	mov	r6, r1
 8008fd2:	d007      	beq.n	8008fe4 <__pow5mult+0x20>
 8008fd4:	4c25      	ldr	r4, [pc, #148]	@ (800906c <__pow5mult+0xa8>)
 8008fd6:	3a01      	subs	r2, #1
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fde:	f7ff fe5d 	bl	8008c9c <__multadd>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	10ad      	asrs	r5, r5, #2
 8008fe6:	d03d      	beq.n	8009064 <__pow5mult+0xa0>
 8008fe8:	69fc      	ldr	r4, [r7, #28]
 8008fea:	b97c      	cbnz	r4, 800900c <__pow5mult+0x48>
 8008fec:	2010      	movs	r0, #16
 8008fee:	f7ff fd3d 	bl	8008a6c <malloc>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	61f8      	str	r0, [r7, #28]
 8008ff6:	b928      	cbnz	r0, 8009004 <__pow5mult+0x40>
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8009070 <__pow5mult+0xac>)
 8008ffa:	481e      	ldr	r0, [pc, #120]	@ (8009074 <__pow5mult+0xb0>)
 8008ffc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009000:	f001 fcba 	bl	800a978 <__assert_func>
 8009004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009008:	6004      	str	r4, [r0, #0]
 800900a:	60c4      	str	r4, [r0, #12]
 800900c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009014:	b94c      	cbnz	r4, 800902a <__pow5mult+0x66>
 8009016:	f240 2171 	movw	r1, #625	@ 0x271
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ff1a 	bl	8008e54 <__i2b>
 8009020:	2300      	movs	r3, #0
 8009022:	f8c8 0008 	str.w	r0, [r8, #8]
 8009026:	4604      	mov	r4, r0
 8009028:	6003      	str	r3, [r0, #0]
 800902a:	f04f 0900 	mov.w	r9, #0
 800902e:	07eb      	lsls	r3, r5, #31
 8009030:	d50a      	bpl.n	8009048 <__pow5mult+0x84>
 8009032:	4631      	mov	r1, r6
 8009034:	4622      	mov	r2, r4
 8009036:	4638      	mov	r0, r7
 8009038:	f7ff ff22 	bl	8008e80 <__multiply>
 800903c:	4631      	mov	r1, r6
 800903e:	4680      	mov	r8, r0
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff fe09 	bl	8008c58 <_Bfree>
 8009046:	4646      	mov	r6, r8
 8009048:	106d      	asrs	r5, r5, #1
 800904a:	d00b      	beq.n	8009064 <__pow5mult+0xa0>
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	b938      	cbnz	r0, 8009060 <__pow5mult+0x9c>
 8009050:	4622      	mov	r2, r4
 8009052:	4621      	mov	r1, r4
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ff13 	bl	8008e80 <__multiply>
 800905a:	6020      	str	r0, [r4, #0]
 800905c:	f8c0 9000 	str.w	r9, [r0]
 8009060:	4604      	mov	r4, r0
 8009062:	e7e4      	b.n	800902e <__pow5mult+0x6a>
 8009064:	4630      	mov	r0, r6
 8009066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906a:	bf00      	nop
 800906c:	0800b5d4 	.word	0x0800b5d4
 8009070:	0800b443 	.word	0x0800b443
 8009074:	0800b4c3 	.word	0x0800b4c3

08009078 <__lshift>:
 8009078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	460c      	mov	r4, r1
 800907e:	6849      	ldr	r1, [r1, #4]
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	4607      	mov	r7, r0
 800908a:	4691      	mov	r9, r2
 800908c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009090:	f108 0601 	add.w	r6, r8, #1
 8009094:	42b3      	cmp	r3, r6
 8009096:	db0b      	blt.n	80090b0 <__lshift+0x38>
 8009098:	4638      	mov	r0, r7
 800909a:	f7ff fd9d 	bl	8008bd8 <_Balloc>
 800909e:	4605      	mov	r5, r0
 80090a0:	b948      	cbnz	r0, 80090b6 <__lshift+0x3e>
 80090a2:	4602      	mov	r2, r0
 80090a4:	4b28      	ldr	r3, [pc, #160]	@ (8009148 <__lshift+0xd0>)
 80090a6:	4829      	ldr	r0, [pc, #164]	@ (800914c <__lshift+0xd4>)
 80090a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090ac:	f001 fc64 	bl	800a978 <__assert_func>
 80090b0:	3101      	adds	r1, #1
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	e7ee      	b.n	8009094 <__lshift+0x1c>
 80090b6:	2300      	movs	r3, #0
 80090b8:	f100 0114 	add.w	r1, r0, #20
 80090bc:	f100 0210 	add.w	r2, r0, #16
 80090c0:	4618      	mov	r0, r3
 80090c2:	4553      	cmp	r3, sl
 80090c4:	db33      	blt.n	800912e <__lshift+0xb6>
 80090c6:	6920      	ldr	r0, [r4, #16]
 80090c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090cc:	f104 0314 	add.w	r3, r4, #20
 80090d0:	f019 091f 	ands.w	r9, r9, #31
 80090d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090dc:	d02b      	beq.n	8009136 <__lshift+0xbe>
 80090de:	f1c9 0e20 	rsb	lr, r9, #32
 80090e2:	468a      	mov	sl, r1
 80090e4:	2200      	movs	r2, #0
 80090e6:	6818      	ldr	r0, [r3, #0]
 80090e8:	fa00 f009 	lsl.w	r0, r0, r9
 80090ec:	4310      	orrs	r0, r2
 80090ee:	f84a 0b04 	str.w	r0, [sl], #4
 80090f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f6:	459c      	cmp	ip, r3
 80090f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090fc:	d8f3      	bhi.n	80090e6 <__lshift+0x6e>
 80090fe:	ebac 0304 	sub.w	r3, ip, r4
 8009102:	3b15      	subs	r3, #21
 8009104:	f023 0303 	bic.w	r3, r3, #3
 8009108:	3304      	adds	r3, #4
 800910a:	f104 0015 	add.w	r0, r4, #21
 800910e:	4560      	cmp	r0, ip
 8009110:	bf88      	it	hi
 8009112:	2304      	movhi	r3, #4
 8009114:	50ca      	str	r2, [r1, r3]
 8009116:	b10a      	cbz	r2, 800911c <__lshift+0xa4>
 8009118:	f108 0602 	add.w	r6, r8, #2
 800911c:	3e01      	subs	r6, #1
 800911e:	4638      	mov	r0, r7
 8009120:	612e      	str	r6, [r5, #16]
 8009122:	4621      	mov	r1, r4
 8009124:	f7ff fd98 	bl	8008c58 <_Bfree>
 8009128:	4628      	mov	r0, r5
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009132:	3301      	adds	r3, #1
 8009134:	e7c5      	b.n	80090c2 <__lshift+0x4a>
 8009136:	3904      	subs	r1, #4
 8009138:	f853 2b04 	ldr.w	r2, [r3], #4
 800913c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009140:	459c      	cmp	ip, r3
 8009142:	d8f9      	bhi.n	8009138 <__lshift+0xc0>
 8009144:	e7ea      	b.n	800911c <__lshift+0xa4>
 8009146:	bf00      	nop
 8009148:	0800b4b2 	.word	0x0800b4b2
 800914c:	0800b4c3 	.word	0x0800b4c3

08009150 <__mcmp>:
 8009150:	690a      	ldr	r2, [r1, #16]
 8009152:	4603      	mov	r3, r0
 8009154:	6900      	ldr	r0, [r0, #16]
 8009156:	1a80      	subs	r0, r0, r2
 8009158:	b530      	push	{r4, r5, lr}
 800915a:	d10e      	bne.n	800917a <__mcmp+0x2a>
 800915c:	3314      	adds	r3, #20
 800915e:	3114      	adds	r1, #20
 8009160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800916c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009170:	4295      	cmp	r5, r2
 8009172:	d003      	beq.n	800917c <__mcmp+0x2c>
 8009174:	d205      	bcs.n	8009182 <__mcmp+0x32>
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	bd30      	pop	{r4, r5, pc}
 800917c:	42a3      	cmp	r3, r4
 800917e:	d3f3      	bcc.n	8009168 <__mcmp+0x18>
 8009180:	e7fb      	b.n	800917a <__mcmp+0x2a>
 8009182:	2001      	movs	r0, #1
 8009184:	e7f9      	b.n	800917a <__mcmp+0x2a>
	...

08009188 <__mdiff>:
 8009188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	4689      	mov	r9, r1
 800918e:	4606      	mov	r6, r0
 8009190:	4611      	mov	r1, r2
 8009192:	4648      	mov	r0, r9
 8009194:	4614      	mov	r4, r2
 8009196:	f7ff ffdb 	bl	8009150 <__mcmp>
 800919a:	1e05      	subs	r5, r0, #0
 800919c:	d112      	bne.n	80091c4 <__mdiff+0x3c>
 800919e:	4629      	mov	r1, r5
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff fd19 	bl	8008bd8 <_Balloc>
 80091a6:	4602      	mov	r2, r0
 80091a8:	b928      	cbnz	r0, 80091b6 <__mdiff+0x2e>
 80091aa:	4b3f      	ldr	r3, [pc, #252]	@ (80092a8 <__mdiff+0x120>)
 80091ac:	f240 2137 	movw	r1, #567	@ 0x237
 80091b0:	483e      	ldr	r0, [pc, #248]	@ (80092ac <__mdiff+0x124>)
 80091b2:	f001 fbe1 	bl	800a978 <__assert_func>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091bc:	4610      	mov	r0, r2
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	bfbc      	itt	lt
 80091c6:	464b      	movlt	r3, r9
 80091c8:	46a1      	movlt	r9, r4
 80091ca:	4630      	mov	r0, r6
 80091cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091d0:	bfba      	itte	lt
 80091d2:	461c      	movlt	r4, r3
 80091d4:	2501      	movlt	r5, #1
 80091d6:	2500      	movge	r5, #0
 80091d8:	f7ff fcfe 	bl	8008bd8 <_Balloc>
 80091dc:	4602      	mov	r2, r0
 80091de:	b918      	cbnz	r0, 80091e8 <__mdiff+0x60>
 80091e0:	4b31      	ldr	r3, [pc, #196]	@ (80092a8 <__mdiff+0x120>)
 80091e2:	f240 2145 	movw	r1, #581	@ 0x245
 80091e6:	e7e3      	b.n	80091b0 <__mdiff+0x28>
 80091e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091ec:	6926      	ldr	r6, [r4, #16]
 80091ee:	60c5      	str	r5, [r0, #12]
 80091f0:	f109 0310 	add.w	r3, r9, #16
 80091f4:	f109 0514 	add.w	r5, r9, #20
 80091f8:	f104 0e14 	add.w	lr, r4, #20
 80091fc:	f100 0b14 	add.w	fp, r0, #20
 8009200:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009204:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	46d9      	mov	r9, fp
 800920c:	f04f 0c00 	mov.w	ip, #0
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009216:	f853 af04 	ldr.w	sl, [r3, #4]!
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	fa1f f38a 	uxth.w	r3, sl
 8009220:	4619      	mov	r1, r3
 8009222:	b283      	uxth	r3, r0
 8009224:	1acb      	subs	r3, r1, r3
 8009226:	0c00      	lsrs	r0, r0, #16
 8009228:	4463      	add	r3, ip
 800922a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800922e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009232:	b29b      	uxth	r3, r3
 8009234:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009238:	4576      	cmp	r6, lr
 800923a:	f849 3b04 	str.w	r3, [r9], #4
 800923e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009242:	d8e5      	bhi.n	8009210 <__mdiff+0x88>
 8009244:	1b33      	subs	r3, r6, r4
 8009246:	3b15      	subs	r3, #21
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	3415      	adds	r4, #21
 800924e:	3304      	adds	r3, #4
 8009250:	42a6      	cmp	r6, r4
 8009252:	bf38      	it	cc
 8009254:	2304      	movcc	r3, #4
 8009256:	441d      	add	r5, r3
 8009258:	445b      	add	r3, fp
 800925a:	461e      	mov	r6, r3
 800925c:	462c      	mov	r4, r5
 800925e:	4544      	cmp	r4, r8
 8009260:	d30e      	bcc.n	8009280 <__mdiff+0xf8>
 8009262:	f108 0103 	add.w	r1, r8, #3
 8009266:	1b49      	subs	r1, r1, r5
 8009268:	f021 0103 	bic.w	r1, r1, #3
 800926c:	3d03      	subs	r5, #3
 800926e:	45a8      	cmp	r8, r5
 8009270:	bf38      	it	cc
 8009272:	2100      	movcc	r1, #0
 8009274:	440b      	add	r3, r1
 8009276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800927a:	b191      	cbz	r1, 80092a2 <__mdiff+0x11a>
 800927c:	6117      	str	r7, [r2, #16]
 800927e:	e79d      	b.n	80091bc <__mdiff+0x34>
 8009280:	f854 1b04 	ldr.w	r1, [r4], #4
 8009284:	46e6      	mov	lr, ip
 8009286:	0c08      	lsrs	r0, r1, #16
 8009288:	fa1c fc81 	uxtah	ip, ip, r1
 800928c:	4471      	add	r1, lr
 800928e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009292:	b289      	uxth	r1, r1
 8009294:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009298:	f846 1b04 	str.w	r1, [r6], #4
 800929c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092a0:	e7dd      	b.n	800925e <__mdiff+0xd6>
 80092a2:	3f01      	subs	r7, #1
 80092a4:	e7e7      	b.n	8009276 <__mdiff+0xee>
 80092a6:	bf00      	nop
 80092a8:	0800b4b2 	.word	0x0800b4b2
 80092ac:	0800b4c3 	.word	0x0800b4c3

080092b0 <__ulp>:
 80092b0:	b082      	sub	sp, #8
 80092b2:	ed8d 0b00 	vstr	d0, [sp]
 80092b6:	9a01      	ldr	r2, [sp, #4]
 80092b8:	4b0f      	ldr	r3, [pc, #60]	@ (80092f8 <__ulp+0x48>)
 80092ba:	4013      	ands	r3, r2
 80092bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc08      	bgt.n	80092d6 <__ulp+0x26>
 80092c4:	425b      	negs	r3, r3
 80092c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80092ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092ce:	da04      	bge.n	80092da <__ulp+0x2a>
 80092d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092d4:	4113      	asrs	r3, r2
 80092d6:	2200      	movs	r2, #0
 80092d8:	e008      	b.n	80092ec <__ulp+0x3c>
 80092da:	f1a2 0314 	sub.w	r3, r2, #20
 80092de:	2b1e      	cmp	r3, #30
 80092e0:	bfda      	itte	le
 80092e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092e6:	40da      	lsrle	r2, r3
 80092e8:	2201      	movgt	r2, #1
 80092ea:	2300      	movs	r3, #0
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	ec41 0b10 	vmov	d0, r0, r1
 80092f4:	b002      	add	sp, #8
 80092f6:	4770      	bx	lr
 80092f8:	7ff00000 	.word	0x7ff00000

080092fc <__b2d>:
 80092fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	6906      	ldr	r6, [r0, #16]
 8009302:	f100 0814 	add.w	r8, r0, #20
 8009306:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800930a:	1f37      	subs	r7, r6, #4
 800930c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009310:	4610      	mov	r0, r2
 8009312:	f7ff fd53 	bl	8008dbc <__hi0bits>
 8009316:	f1c0 0320 	rsb	r3, r0, #32
 800931a:	280a      	cmp	r0, #10
 800931c:	600b      	str	r3, [r1, #0]
 800931e:	491b      	ldr	r1, [pc, #108]	@ (800938c <__b2d+0x90>)
 8009320:	dc15      	bgt.n	800934e <__b2d+0x52>
 8009322:	f1c0 0c0b 	rsb	ip, r0, #11
 8009326:	fa22 f30c 	lsr.w	r3, r2, ip
 800932a:	45b8      	cmp	r8, r7
 800932c:	ea43 0501 	orr.w	r5, r3, r1
 8009330:	bf34      	ite	cc
 8009332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009336:	2300      	movcs	r3, #0
 8009338:	3015      	adds	r0, #21
 800933a:	fa02 f000 	lsl.w	r0, r2, r0
 800933e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009342:	4303      	orrs	r3, r0
 8009344:	461c      	mov	r4, r3
 8009346:	ec45 4b10 	vmov	d0, r4, r5
 800934a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934e:	45b8      	cmp	r8, r7
 8009350:	bf3a      	itte	cc
 8009352:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009356:	f1a6 0708 	subcc.w	r7, r6, #8
 800935a:	2300      	movcs	r3, #0
 800935c:	380b      	subs	r0, #11
 800935e:	d012      	beq.n	8009386 <__b2d+0x8a>
 8009360:	f1c0 0120 	rsb	r1, r0, #32
 8009364:	fa23 f401 	lsr.w	r4, r3, r1
 8009368:	4082      	lsls	r2, r0
 800936a:	4322      	orrs	r2, r4
 800936c:	4547      	cmp	r7, r8
 800936e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009372:	bf8c      	ite	hi
 8009374:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009378:	2200      	movls	r2, #0
 800937a:	4083      	lsls	r3, r0
 800937c:	40ca      	lsrs	r2, r1
 800937e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009382:	4313      	orrs	r3, r2
 8009384:	e7de      	b.n	8009344 <__b2d+0x48>
 8009386:	ea42 0501 	orr.w	r5, r2, r1
 800938a:	e7db      	b.n	8009344 <__b2d+0x48>
 800938c:	3ff00000 	.word	0x3ff00000

08009390 <__d2b>:
 8009390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009394:	460f      	mov	r7, r1
 8009396:	2101      	movs	r1, #1
 8009398:	ec59 8b10 	vmov	r8, r9, d0
 800939c:	4616      	mov	r6, r2
 800939e:	f7ff fc1b 	bl	8008bd8 <_Balloc>
 80093a2:	4604      	mov	r4, r0
 80093a4:	b930      	cbnz	r0, 80093b4 <__d2b+0x24>
 80093a6:	4602      	mov	r2, r0
 80093a8:	4b23      	ldr	r3, [pc, #140]	@ (8009438 <__d2b+0xa8>)
 80093aa:	4824      	ldr	r0, [pc, #144]	@ (800943c <__d2b+0xac>)
 80093ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80093b0:	f001 fae2 	bl	800a978 <__assert_func>
 80093b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093bc:	b10d      	cbz	r5, 80093c2 <__d2b+0x32>
 80093be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	f1b8 0300 	subs.w	r3, r8, #0
 80093c8:	d023      	beq.n	8009412 <__d2b+0x82>
 80093ca:	4668      	mov	r0, sp
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	f7ff fd14 	bl	8008dfa <__lo0bits>
 80093d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093d6:	b1d0      	cbz	r0, 800940e <__d2b+0x7e>
 80093d8:	f1c0 0320 	rsb	r3, r0, #32
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	430b      	orrs	r3, r1
 80093e2:	40c2      	lsrs	r2, r0
 80093e4:	6163      	str	r3, [r4, #20]
 80093e6:	9201      	str	r2, [sp, #4]
 80093e8:	9b01      	ldr	r3, [sp, #4]
 80093ea:	61a3      	str	r3, [r4, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bf0c      	ite	eq
 80093f0:	2201      	moveq	r2, #1
 80093f2:	2202      	movne	r2, #2
 80093f4:	6122      	str	r2, [r4, #16]
 80093f6:	b1a5      	cbz	r5, 8009422 <__d2b+0x92>
 80093f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093fc:	4405      	add	r5, r0
 80093fe:	603d      	str	r5, [r7, #0]
 8009400:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009404:	6030      	str	r0, [r6, #0]
 8009406:	4620      	mov	r0, r4
 8009408:	b003      	add	sp, #12
 800940a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800940e:	6161      	str	r1, [r4, #20]
 8009410:	e7ea      	b.n	80093e8 <__d2b+0x58>
 8009412:	a801      	add	r0, sp, #4
 8009414:	f7ff fcf1 	bl	8008dfa <__lo0bits>
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	6163      	str	r3, [r4, #20]
 800941c:	3020      	adds	r0, #32
 800941e:	2201      	movs	r2, #1
 8009420:	e7e8      	b.n	80093f4 <__d2b+0x64>
 8009422:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009426:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800942a:	6038      	str	r0, [r7, #0]
 800942c:	6918      	ldr	r0, [r3, #16]
 800942e:	f7ff fcc5 	bl	8008dbc <__hi0bits>
 8009432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009436:	e7e5      	b.n	8009404 <__d2b+0x74>
 8009438:	0800b4b2 	.word	0x0800b4b2
 800943c:	0800b4c3 	.word	0x0800b4c3

08009440 <__ratio>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	b085      	sub	sp, #20
 8009446:	e9cd 1000 	strd	r1, r0, [sp]
 800944a:	a902      	add	r1, sp, #8
 800944c:	f7ff ff56 	bl	80092fc <__b2d>
 8009450:	9800      	ldr	r0, [sp, #0]
 8009452:	a903      	add	r1, sp, #12
 8009454:	ec55 4b10 	vmov	r4, r5, d0
 8009458:	f7ff ff50 	bl	80092fc <__b2d>
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	6919      	ldr	r1, [r3, #16]
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	1ac9      	subs	r1, r1, r3
 8009466:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	ec5b ab10 	vmov	sl, fp, d0
 8009470:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009474:	2b00      	cmp	r3, #0
 8009476:	bfce      	itee	gt
 8009478:	462a      	movgt	r2, r5
 800947a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800947e:	465a      	movle	r2, fp
 8009480:	462f      	mov	r7, r5
 8009482:	46d9      	mov	r9, fp
 8009484:	bfcc      	ite	gt
 8009486:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800948a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800948e:	464b      	mov	r3, r9
 8009490:	4652      	mov	r2, sl
 8009492:	4620      	mov	r0, r4
 8009494:	4639      	mov	r1, r7
 8009496:	f7f7 f9e1 	bl	800085c <__aeabi_ddiv>
 800949a:	ec41 0b10 	vmov	d0, r0, r1
 800949e:	b005      	add	sp, #20
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094a4 <__copybits>:
 80094a4:	3901      	subs	r1, #1
 80094a6:	b570      	push	{r4, r5, r6, lr}
 80094a8:	1149      	asrs	r1, r1, #5
 80094aa:	6914      	ldr	r4, [r2, #16]
 80094ac:	3101      	adds	r1, #1
 80094ae:	f102 0314 	add.w	r3, r2, #20
 80094b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094ba:	1f05      	subs	r5, r0, #4
 80094bc:	42a3      	cmp	r3, r4
 80094be:	d30c      	bcc.n	80094da <__copybits+0x36>
 80094c0:	1aa3      	subs	r3, r4, r2
 80094c2:	3b11      	subs	r3, #17
 80094c4:	f023 0303 	bic.w	r3, r3, #3
 80094c8:	3211      	adds	r2, #17
 80094ca:	42a2      	cmp	r2, r4
 80094cc:	bf88      	it	hi
 80094ce:	2300      	movhi	r3, #0
 80094d0:	4418      	add	r0, r3
 80094d2:	2300      	movs	r3, #0
 80094d4:	4288      	cmp	r0, r1
 80094d6:	d305      	bcc.n	80094e4 <__copybits+0x40>
 80094d8:	bd70      	pop	{r4, r5, r6, pc}
 80094da:	f853 6b04 	ldr.w	r6, [r3], #4
 80094de:	f845 6f04 	str.w	r6, [r5, #4]!
 80094e2:	e7eb      	b.n	80094bc <__copybits+0x18>
 80094e4:	f840 3b04 	str.w	r3, [r0], #4
 80094e8:	e7f4      	b.n	80094d4 <__copybits+0x30>

080094ea <__any_on>:
 80094ea:	f100 0214 	add.w	r2, r0, #20
 80094ee:	6900      	ldr	r0, [r0, #16]
 80094f0:	114b      	asrs	r3, r1, #5
 80094f2:	4298      	cmp	r0, r3
 80094f4:	b510      	push	{r4, lr}
 80094f6:	db11      	blt.n	800951c <__any_on+0x32>
 80094f8:	dd0a      	ble.n	8009510 <__any_on+0x26>
 80094fa:	f011 011f 	ands.w	r1, r1, #31
 80094fe:	d007      	beq.n	8009510 <__any_on+0x26>
 8009500:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009504:	fa24 f001 	lsr.w	r0, r4, r1
 8009508:	fa00 f101 	lsl.w	r1, r0, r1
 800950c:	428c      	cmp	r4, r1
 800950e:	d10b      	bne.n	8009528 <__any_on+0x3e>
 8009510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009514:	4293      	cmp	r3, r2
 8009516:	d803      	bhi.n	8009520 <__any_on+0x36>
 8009518:	2000      	movs	r0, #0
 800951a:	bd10      	pop	{r4, pc}
 800951c:	4603      	mov	r3, r0
 800951e:	e7f7      	b.n	8009510 <__any_on+0x26>
 8009520:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009524:	2900      	cmp	r1, #0
 8009526:	d0f5      	beq.n	8009514 <__any_on+0x2a>
 8009528:	2001      	movs	r0, #1
 800952a:	e7f6      	b.n	800951a <__any_on+0x30>

0800952c <sulp>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	4604      	mov	r4, r0
 8009530:	460d      	mov	r5, r1
 8009532:	ec45 4b10 	vmov	d0, r4, r5
 8009536:	4616      	mov	r6, r2
 8009538:	f7ff feba 	bl	80092b0 <__ulp>
 800953c:	ec51 0b10 	vmov	r0, r1, d0
 8009540:	b17e      	cbz	r6, 8009562 <sulp+0x36>
 8009542:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009546:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800954a:	2b00      	cmp	r3, #0
 800954c:	dd09      	ble.n	8009562 <sulp+0x36>
 800954e:	051b      	lsls	r3, r3, #20
 8009550:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009554:	2400      	movs	r4, #0
 8009556:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800955a:	4622      	mov	r2, r4
 800955c:	462b      	mov	r3, r5
 800955e:	f7f7 f853 	bl	8000608 <__aeabi_dmul>
 8009562:	ec41 0b10 	vmov	d0, r0, r1
 8009566:	bd70      	pop	{r4, r5, r6, pc}

08009568 <_strtod_l>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	b09f      	sub	sp, #124	@ 0x7c
 800956e:	460c      	mov	r4, r1
 8009570:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009572:	2200      	movs	r2, #0
 8009574:	921a      	str	r2, [sp, #104]	@ 0x68
 8009576:	9005      	str	r0, [sp, #20]
 8009578:	f04f 0a00 	mov.w	sl, #0
 800957c:	f04f 0b00 	mov.w	fp, #0
 8009580:	460a      	mov	r2, r1
 8009582:	9219      	str	r2, [sp, #100]	@ 0x64
 8009584:	7811      	ldrb	r1, [r2, #0]
 8009586:	292b      	cmp	r1, #43	@ 0x2b
 8009588:	d04a      	beq.n	8009620 <_strtod_l+0xb8>
 800958a:	d838      	bhi.n	80095fe <_strtod_l+0x96>
 800958c:	290d      	cmp	r1, #13
 800958e:	d832      	bhi.n	80095f6 <_strtod_l+0x8e>
 8009590:	2908      	cmp	r1, #8
 8009592:	d832      	bhi.n	80095fa <_strtod_l+0x92>
 8009594:	2900      	cmp	r1, #0
 8009596:	d03b      	beq.n	8009610 <_strtod_l+0xa8>
 8009598:	2200      	movs	r2, #0
 800959a:	920e      	str	r2, [sp, #56]	@ 0x38
 800959c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800959e:	782a      	ldrb	r2, [r5, #0]
 80095a0:	2a30      	cmp	r2, #48	@ 0x30
 80095a2:	f040 80b2 	bne.w	800970a <_strtod_l+0x1a2>
 80095a6:	786a      	ldrb	r2, [r5, #1]
 80095a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095ac:	2a58      	cmp	r2, #88	@ 0x58
 80095ae:	d16e      	bne.n	800968e <_strtod_l+0x126>
 80095b0:	9302      	str	r3, [sp, #8]
 80095b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	4a8f      	ldr	r2, [pc, #572]	@ (80097f8 <_strtod_l+0x290>)
 80095bc:	9805      	ldr	r0, [sp, #20]
 80095be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095c0:	a919      	add	r1, sp, #100	@ 0x64
 80095c2:	f001 fa73 	bl	800aaac <__gethex>
 80095c6:	f010 060f 	ands.w	r6, r0, #15
 80095ca:	4604      	mov	r4, r0
 80095cc:	d005      	beq.n	80095da <_strtod_l+0x72>
 80095ce:	2e06      	cmp	r6, #6
 80095d0:	d128      	bne.n	8009624 <_strtod_l+0xbc>
 80095d2:	3501      	adds	r5, #1
 80095d4:	2300      	movs	r3, #0
 80095d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80095d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80095da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f040 858e 	bne.w	800a0fe <_strtod_l+0xb96>
 80095e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e4:	b1cb      	cbz	r3, 800961a <_strtod_l+0xb2>
 80095e6:	4652      	mov	r2, sl
 80095e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80095ec:	ec43 2b10 	vmov	d0, r2, r3
 80095f0:	b01f      	add	sp, #124	@ 0x7c
 80095f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f6:	2920      	cmp	r1, #32
 80095f8:	d1ce      	bne.n	8009598 <_strtod_l+0x30>
 80095fa:	3201      	adds	r2, #1
 80095fc:	e7c1      	b.n	8009582 <_strtod_l+0x1a>
 80095fe:	292d      	cmp	r1, #45	@ 0x2d
 8009600:	d1ca      	bne.n	8009598 <_strtod_l+0x30>
 8009602:	2101      	movs	r1, #1
 8009604:	910e      	str	r1, [sp, #56]	@ 0x38
 8009606:	1c51      	adds	r1, r2, #1
 8009608:	9119      	str	r1, [sp, #100]	@ 0x64
 800960a:	7852      	ldrb	r2, [r2, #1]
 800960c:	2a00      	cmp	r2, #0
 800960e:	d1c5      	bne.n	800959c <_strtod_l+0x34>
 8009610:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009612:	9419      	str	r4, [sp, #100]	@ 0x64
 8009614:	2b00      	cmp	r3, #0
 8009616:	f040 8570 	bne.w	800a0fa <_strtod_l+0xb92>
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	e7e5      	b.n	80095ec <_strtod_l+0x84>
 8009620:	2100      	movs	r1, #0
 8009622:	e7ef      	b.n	8009604 <_strtod_l+0x9c>
 8009624:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009626:	b13a      	cbz	r2, 8009638 <_strtod_l+0xd0>
 8009628:	2135      	movs	r1, #53	@ 0x35
 800962a:	a81c      	add	r0, sp, #112	@ 0x70
 800962c:	f7ff ff3a 	bl	80094a4 <__copybits>
 8009630:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009632:	9805      	ldr	r0, [sp, #20]
 8009634:	f7ff fb10 	bl	8008c58 <_Bfree>
 8009638:	3e01      	subs	r6, #1
 800963a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800963c:	2e04      	cmp	r6, #4
 800963e:	d806      	bhi.n	800964e <_strtod_l+0xe6>
 8009640:	e8df f006 	tbb	[pc, r6]
 8009644:	201d0314 	.word	0x201d0314
 8009648:	14          	.byte	0x14
 8009649:	00          	.byte	0x00
 800964a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800964e:	05e1      	lsls	r1, r4, #23
 8009650:	bf48      	it	mi
 8009652:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800965a:	0d1b      	lsrs	r3, r3, #20
 800965c:	051b      	lsls	r3, r3, #20
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1bb      	bne.n	80095da <_strtod_l+0x72>
 8009662:	f7fe fb2b 	bl	8007cbc <__errno>
 8009666:	2322      	movs	r3, #34	@ 0x22
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	e7b6      	b.n	80095da <_strtod_l+0x72>
 800966c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009670:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009674:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009678:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800967c:	e7e7      	b.n	800964e <_strtod_l+0xe6>
 800967e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009800 <_strtod_l+0x298>
 8009682:	e7e4      	b.n	800964e <_strtod_l+0xe6>
 8009684:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009688:	f04f 3aff 	mov.w	sl, #4294967295
 800968c:	e7df      	b.n	800964e <_strtod_l+0xe6>
 800968e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	9219      	str	r2, [sp, #100]	@ 0x64
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	2b30      	cmp	r3, #48	@ 0x30
 8009698:	d0f9      	beq.n	800968e <_strtod_l+0x126>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d09d      	beq.n	80095da <_strtod_l+0x72>
 800969e:	2301      	movs	r3, #1
 80096a0:	2700      	movs	r7, #0
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80096a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80096aa:	46b9      	mov	r9, r7
 80096ac:	220a      	movs	r2, #10
 80096ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80096b0:	7805      	ldrb	r5, [r0, #0]
 80096b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80096b6:	b2d9      	uxtb	r1, r3
 80096b8:	2909      	cmp	r1, #9
 80096ba:	d928      	bls.n	800970e <_strtod_l+0x1a6>
 80096bc:	494f      	ldr	r1, [pc, #316]	@ (80097fc <_strtod_l+0x294>)
 80096be:	2201      	movs	r2, #1
 80096c0:	f001 f8fe 	bl	800a8c0 <strncmp>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d032      	beq.n	800972e <_strtod_l+0x1c6>
 80096c8:	2000      	movs	r0, #0
 80096ca:	462a      	mov	r2, r5
 80096cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80096ce:	464d      	mov	r5, r9
 80096d0:	4603      	mov	r3, r0
 80096d2:	2a65      	cmp	r2, #101	@ 0x65
 80096d4:	d001      	beq.n	80096da <_strtod_l+0x172>
 80096d6:	2a45      	cmp	r2, #69	@ 0x45
 80096d8:	d114      	bne.n	8009704 <_strtod_l+0x19c>
 80096da:	b91d      	cbnz	r5, 80096e4 <_strtod_l+0x17c>
 80096dc:	9a08      	ldr	r2, [sp, #32]
 80096de:	4302      	orrs	r2, r0
 80096e0:	d096      	beq.n	8009610 <_strtod_l+0xa8>
 80096e2:	2500      	movs	r5, #0
 80096e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096e6:	1c62      	adds	r2, r4, #1
 80096e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80096ea:	7862      	ldrb	r2, [r4, #1]
 80096ec:	2a2b      	cmp	r2, #43	@ 0x2b
 80096ee:	d07a      	beq.n	80097e6 <_strtod_l+0x27e>
 80096f0:	2a2d      	cmp	r2, #45	@ 0x2d
 80096f2:	d07e      	beq.n	80097f2 <_strtod_l+0x28a>
 80096f4:	f04f 0c00 	mov.w	ip, #0
 80096f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80096fc:	2909      	cmp	r1, #9
 80096fe:	f240 8085 	bls.w	800980c <_strtod_l+0x2a4>
 8009702:	9419      	str	r4, [sp, #100]	@ 0x64
 8009704:	f04f 0800 	mov.w	r8, #0
 8009708:	e0a5      	b.n	8009856 <_strtod_l+0x2ee>
 800970a:	2300      	movs	r3, #0
 800970c:	e7c8      	b.n	80096a0 <_strtod_l+0x138>
 800970e:	f1b9 0f08 	cmp.w	r9, #8
 8009712:	bfd8      	it	le
 8009714:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009716:	f100 0001 	add.w	r0, r0, #1
 800971a:	bfda      	itte	le
 800971c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009720:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009722:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009726:	f109 0901 	add.w	r9, r9, #1
 800972a:	9019      	str	r0, [sp, #100]	@ 0x64
 800972c:	e7bf      	b.n	80096ae <_strtod_l+0x146>
 800972e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	9219      	str	r2, [sp, #100]	@ 0x64
 8009734:	785a      	ldrb	r2, [r3, #1]
 8009736:	f1b9 0f00 	cmp.w	r9, #0
 800973a:	d03b      	beq.n	80097b4 <_strtod_l+0x24c>
 800973c:	900a      	str	r0, [sp, #40]	@ 0x28
 800973e:	464d      	mov	r5, r9
 8009740:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009744:	2b09      	cmp	r3, #9
 8009746:	d912      	bls.n	800976e <_strtod_l+0x206>
 8009748:	2301      	movs	r3, #1
 800974a:	e7c2      	b.n	80096d2 <_strtod_l+0x16a>
 800974c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	9219      	str	r2, [sp, #100]	@ 0x64
 8009752:	785a      	ldrb	r2, [r3, #1]
 8009754:	3001      	adds	r0, #1
 8009756:	2a30      	cmp	r2, #48	@ 0x30
 8009758:	d0f8      	beq.n	800974c <_strtod_l+0x1e4>
 800975a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800975e:	2b08      	cmp	r3, #8
 8009760:	f200 84d2 	bhi.w	800a108 <_strtod_l+0xba0>
 8009764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009766:	900a      	str	r0, [sp, #40]	@ 0x28
 8009768:	2000      	movs	r0, #0
 800976a:	930c      	str	r3, [sp, #48]	@ 0x30
 800976c:	4605      	mov	r5, r0
 800976e:	3a30      	subs	r2, #48	@ 0x30
 8009770:	f100 0301 	add.w	r3, r0, #1
 8009774:	d018      	beq.n	80097a8 <_strtod_l+0x240>
 8009776:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009778:	4419      	add	r1, r3
 800977a:	910a      	str	r1, [sp, #40]	@ 0x28
 800977c:	462e      	mov	r6, r5
 800977e:	f04f 0e0a 	mov.w	lr, #10
 8009782:	1c71      	adds	r1, r6, #1
 8009784:	eba1 0c05 	sub.w	ip, r1, r5
 8009788:	4563      	cmp	r3, ip
 800978a:	dc15      	bgt.n	80097b8 <_strtod_l+0x250>
 800978c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009790:	182b      	adds	r3, r5, r0
 8009792:	2b08      	cmp	r3, #8
 8009794:	f105 0501 	add.w	r5, r5, #1
 8009798:	4405      	add	r5, r0
 800979a:	dc1a      	bgt.n	80097d2 <_strtod_l+0x26a>
 800979c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800979e:	230a      	movs	r3, #10
 80097a0:	fb03 2301 	mla	r3, r3, r1, r2
 80097a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097a6:	2300      	movs	r3, #0
 80097a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097aa:	1c51      	adds	r1, r2, #1
 80097ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80097ae:	7852      	ldrb	r2, [r2, #1]
 80097b0:	4618      	mov	r0, r3
 80097b2:	e7c5      	b.n	8009740 <_strtod_l+0x1d8>
 80097b4:	4648      	mov	r0, r9
 80097b6:	e7ce      	b.n	8009756 <_strtod_l+0x1ee>
 80097b8:	2e08      	cmp	r6, #8
 80097ba:	dc05      	bgt.n	80097c8 <_strtod_l+0x260>
 80097bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80097be:	fb0e f606 	mul.w	r6, lr, r6
 80097c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80097c4:	460e      	mov	r6, r1
 80097c6:	e7dc      	b.n	8009782 <_strtod_l+0x21a>
 80097c8:	2910      	cmp	r1, #16
 80097ca:	bfd8      	it	le
 80097cc:	fb0e f707 	mulle.w	r7, lr, r7
 80097d0:	e7f8      	b.n	80097c4 <_strtod_l+0x25c>
 80097d2:	2b0f      	cmp	r3, #15
 80097d4:	bfdc      	itt	le
 80097d6:	230a      	movle	r3, #10
 80097d8:	fb03 2707 	mlale	r7, r3, r7, r2
 80097dc:	e7e3      	b.n	80097a6 <_strtod_l+0x23e>
 80097de:	2300      	movs	r3, #0
 80097e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097e2:	2301      	movs	r3, #1
 80097e4:	e77a      	b.n	80096dc <_strtod_l+0x174>
 80097e6:	f04f 0c00 	mov.w	ip, #0
 80097ea:	1ca2      	adds	r2, r4, #2
 80097ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80097ee:	78a2      	ldrb	r2, [r4, #2]
 80097f0:	e782      	b.n	80096f8 <_strtod_l+0x190>
 80097f2:	f04f 0c01 	mov.w	ip, #1
 80097f6:	e7f8      	b.n	80097ea <_strtod_l+0x282>
 80097f8:	0800b6e4 	.word	0x0800b6e4
 80097fc:	0800b51c 	.word	0x0800b51c
 8009800:	7ff00000 	.word	0x7ff00000
 8009804:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009806:	1c51      	adds	r1, r2, #1
 8009808:	9119      	str	r1, [sp, #100]	@ 0x64
 800980a:	7852      	ldrb	r2, [r2, #1]
 800980c:	2a30      	cmp	r2, #48	@ 0x30
 800980e:	d0f9      	beq.n	8009804 <_strtod_l+0x29c>
 8009810:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009814:	2908      	cmp	r1, #8
 8009816:	f63f af75 	bhi.w	8009704 <_strtod_l+0x19c>
 800981a:	3a30      	subs	r2, #48	@ 0x30
 800981c:	9209      	str	r2, [sp, #36]	@ 0x24
 800981e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009820:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009822:	f04f 080a 	mov.w	r8, #10
 8009826:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009828:	1c56      	adds	r6, r2, #1
 800982a:	9619      	str	r6, [sp, #100]	@ 0x64
 800982c:	7852      	ldrb	r2, [r2, #1]
 800982e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009832:	f1be 0f09 	cmp.w	lr, #9
 8009836:	d939      	bls.n	80098ac <_strtod_l+0x344>
 8009838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800983a:	1a76      	subs	r6, r6, r1
 800983c:	2e08      	cmp	r6, #8
 800983e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009842:	dc03      	bgt.n	800984c <_strtod_l+0x2e4>
 8009844:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009846:	4588      	cmp	r8, r1
 8009848:	bfa8      	it	ge
 800984a:	4688      	movge	r8, r1
 800984c:	f1bc 0f00 	cmp.w	ip, #0
 8009850:	d001      	beq.n	8009856 <_strtod_l+0x2ee>
 8009852:	f1c8 0800 	rsb	r8, r8, #0
 8009856:	2d00      	cmp	r5, #0
 8009858:	d14e      	bne.n	80098f8 <_strtod_l+0x390>
 800985a:	9908      	ldr	r1, [sp, #32]
 800985c:	4308      	orrs	r0, r1
 800985e:	f47f aebc 	bne.w	80095da <_strtod_l+0x72>
 8009862:	2b00      	cmp	r3, #0
 8009864:	f47f aed4 	bne.w	8009610 <_strtod_l+0xa8>
 8009868:	2a69      	cmp	r2, #105	@ 0x69
 800986a:	d028      	beq.n	80098be <_strtod_l+0x356>
 800986c:	dc25      	bgt.n	80098ba <_strtod_l+0x352>
 800986e:	2a49      	cmp	r2, #73	@ 0x49
 8009870:	d025      	beq.n	80098be <_strtod_l+0x356>
 8009872:	2a4e      	cmp	r2, #78	@ 0x4e
 8009874:	f47f aecc 	bne.w	8009610 <_strtod_l+0xa8>
 8009878:	499a      	ldr	r1, [pc, #616]	@ (8009ae4 <_strtod_l+0x57c>)
 800987a:	a819      	add	r0, sp, #100	@ 0x64
 800987c:	f001 fb38 	bl	800aef0 <__match>
 8009880:	2800      	cmp	r0, #0
 8009882:	f43f aec5 	beq.w	8009610 <_strtod_l+0xa8>
 8009886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b28      	cmp	r3, #40	@ 0x28
 800988c:	d12e      	bne.n	80098ec <_strtod_l+0x384>
 800988e:	4996      	ldr	r1, [pc, #600]	@ (8009ae8 <_strtod_l+0x580>)
 8009890:	aa1c      	add	r2, sp, #112	@ 0x70
 8009892:	a819      	add	r0, sp, #100	@ 0x64
 8009894:	f001 fb40 	bl	800af18 <__hexnan>
 8009898:	2805      	cmp	r0, #5
 800989a:	d127      	bne.n	80098ec <_strtod_l+0x384>
 800989c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800989e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80098a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80098a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80098aa:	e696      	b.n	80095da <_strtod_l+0x72>
 80098ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098ae:	fb08 2101 	mla	r1, r8, r1, r2
 80098b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80098b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80098b8:	e7b5      	b.n	8009826 <_strtod_l+0x2be>
 80098ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80098bc:	e7da      	b.n	8009874 <_strtod_l+0x30c>
 80098be:	498b      	ldr	r1, [pc, #556]	@ (8009aec <_strtod_l+0x584>)
 80098c0:	a819      	add	r0, sp, #100	@ 0x64
 80098c2:	f001 fb15 	bl	800aef0 <__match>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f43f aea2 	beq.w	8009610 <_strtod_l+0xa8>
 80098cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098ce:	4988      	ldr	r1, [pc, #544]	@ (8009af0 <_strtod_l+0x588>)
 80098d0:	3b01      	subs	r3, #1
 80098d2:	a819      	add	r0, sp, #100	@ 0x64
 80098d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80098d6:	f001 fb0b 	bl	800aef0 <__match>
 80098da:	b910      	cbnz	r0, 80098e2 <_strtod_l+0x37a>
 80098dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098de:	3301      	adds	r3, #1
 80098e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80098e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009b00 <_strtod_l+0x598>
 80098e6:	f04f 0a00 	mov.w	sl, #0
 80098ea:	e676      	b.n	80095da <_strtod_l+0x72>
 80098ec:	4881      	ldr	r0, [pc, #516]	@ (8009af4 <_strtod_l+0x58c>)
 80098ee:	f001 f83b 	bl	800a968 <nan>
 80098f2:	ec5b ab10 	vmov	sl, fp, d0
 80098f6:	e670      	b.n	80095da <_strtod_l+0x72>
 80098f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80098fc:	eba8 0303 	sub.w	r3, r8, r3
 8009900:	f1b9 0f00 	cmp.w	r9, #0
 8009904:	bf08      	it	eq
 8009906:	46a9      	moveq	r9, r5
 8009908:	2d10      	cmp	r5, #16
 800990a:	9309      	str	r3, [sp, #36]	@ 0x24
 800990c:	462c      	mov	r4, r5
 800990e:	bfa8      	it	ge
 8009910:	2410      	movge	r4, #16
 8009912:	f7f6 fdff 	bl	8000514 <__aeabi_ui2d>
 8009916:	2d09      	cmp	r5, #9
 8009918:	4682      	mov	sl, r0
 800991a:	468b      	mov	fp, r1
 800991c:	dc13      	bgt.n	8009946 <_strtod_l+0x3de>
 800991e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	f43f ae5a 	beq.w	80095da <_strtod_l+0x72>
 8009926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009928:	dd78      	ble.n	8009a1c <_strtod_l+0x4b4>
 800992a:	2b16      	cmp	r3, #22
 800992c:	dc5f      	bgt.n	80099ee <_strtod_l+0x486>
 800992e:	4972      	ldr	r1, [pc, #456]	@ (8009af8 <_strtod_l+0x590>)
 8009930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009938:	4652      	mov	r2, sl
 800993a:	465b      	mov	r3, fp
 800993c:	f7f6 fe64 	bl	8000608 <__aeabi_dmul>
 8009940:	4682      	mov	sl, r0
 8009942:	468b      	mov	fp, r1
 8009944:	e649      	b.n	80095da <_strtod_l+0x72>
 8009946:	4b6c      	ldr	r3, [pc, #432]	@ (8009af8 <_strtod_l+0x590>)
 8009948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800994c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009950:	f7f6 fe5a 	bl	8000608 <__aeabi_dmul>
 8009954:	4682      	mov	sl, r0
 8009956:	4638      	mov	r0, r7
 8009958:	468b      	mov	fp, r1
 800995a:	f7f6 fddb 	bl	8000514 <__aeabi_ui2d>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4650      	mov	r0, sl
 8009964:	4659      	mov	r1, fp
 8009966:	f7f6 fc99 	bl	800029c <__adddf3>
 800996a:	2d0f      	cmp	r5, #15
 800996c:	4682      	mov	sl, r0
 800996e:	468b      	mov	fp, r1
 8009970:	ddd5      	ble.n	800991e <_strtod_l+0x3b6>
 8009972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009974:	1b2c      	subs	r4, r5, r4
 8009976:	441c      	add	r4, r3
 8009978:	2c00      	cmp	r4, #0
 800997a:	f340 8093 	ble.w	8009aa4 <_strtod_l+0x53c>
 800997e:	f014 030f 	ands.w	r3, r4, #15
 8009982:	d00a      	beq.n	800999a <_strtod_l+0x432>
 8009984:	495c      	ldr	r1, [pc, #368]	@ (8009af8 <_strtod_l+0x590>)
 8009986:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800998a:	4652      	mov	r2, sl
 800998c:	465b      	mov	r3, fp
 800998e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009992:	f7f6 fe39 	bl	8000608 <__aeabi_dmul>
 8009996:	4682      	mov	sl, r0
 8009998:	468b      	mov	fp, r1
 800999a:	f034 040f 	bics.w	r4, r4, #15
 800999e:	d073      	beq.n	8009a88 <_strtod_l+0x520>
 80099a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80099a4:	dd49      	ble.n	8009a3a <_strtod_l+0x4d2>
 80099a6:	2400      	movs	r4, #0
 80099a8:	46a0      	mov	r8, r4
 80099aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099ac:	46a1      	mov	r9, r4
 80099ae:	9a05      	ldr	r2, [sp, #20]
 80099b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009b00 <_strtod_l+0x598>
 80099b4:	2322      	movs	r3, #34	@ 0x22
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	f04f 0a00 	mov.w	sl, #0
 80099bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f43f ae0b 	beq.w	80095da <_strtod_l+0x72>
 80099c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099c6:	9805      	ldr	r0, [sp, #20]
 80099c8:	f7ff f946 	bl	8008c58 <_Bfree>
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	4649      	mov	r1, r9
 80099d0:	f7ff f942 	bl	8008c58 <_Bfree>
 80099d4:	9805      	ldr	r0, [sp, #20]
 80099d6:	4641      	mov	r1, r8
 80099d8:	f7ff f93e 	bl	8008c58 <_Bfree>
 80099dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099de:	9805      	ldr	r0, [sp, #20]
 80099e0:	f7ff f93a 	bl	8008c58 <_Bfree>
 80099e4:	9805      	ldr	r0, [sp, #20]
 80099e6:	4621      	mov	r1, r4
 80099e8:	f7ff f936 	bl	8008c58 <_Bfree>
 80099ec:	e5f5      	b.n	80095da <_strtod_l+0x72>
 80099ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80099f4:	4293      	cmp	r3, r2
 80099f6:	dbbc      	blt.n	8009972 <_strtod_l+0x40a>
 80099f8:	4c3f      	ldr	r4, [pc, #252]	@ (8009af8 <_strtod_l+0x590>)
 80099fa:	f1c5 050f 	rsb	r5, r5, #15
 80099fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a02:	4652      	mov	r2, sl
 8009a04:	465b      	mov	r3, fp
 8009a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a0a:	f7f6 fdfd 	bl	8000608 <__aeabi_dmul>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a10:	1b5d      	subs	r5, r3, r5
 8009a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a1a:	e78f      	b.n	800993c <_strtod_l+0x3d4>
 8009a1c:	3316      	adds	r3, #22
 8009a1e:	dba8      	blt.n	8009972 <_strtod_l+0x40a>
 8009a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a22:	eba3 0808 	sub.w	r8, r3, r8
 8009a26:	4b34      	ldr	r3, [pc, #208]	@ (8009af8 <_strtod_l+0x590>)
 8009a28:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a30:	4650      	mov	r0, sl
 8009a32:	4659      	mov	r1, fp
 8009a34:	f7f6 ff12 	bl	800085c <__aeabi_ddiv>
 8009a38:	e782      	b.n	8009940 <_strtod_l+0x3d8>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	4f2f      	ldr	r7, [pc, #188]	@ (8009afc <_strtod_l+0x594>)
 8009a3e:	1124      	asrs	r4, r4, #4
 8009a40:	4650      	mov	r0, sl
 8009a42:	4659      	mov	r1, fp
 8009a44:	461e      	mov	r6, r3
 8009a46:	2c01      	cmp	r4, #1
 8009a48:	dc21      	bgt.n	8009a8e <_strtod_l+0x526>
 8009a4a:	b10b      	cbz	r3, 8009a50 <_strtod_l+0x4e8>
 8009a4c:	4682      	mov	sl, r0
 8009a4e:	468b      	mov	fp, r1
 8009a50:	492a      	ldr	r1, [pc, #168]	@ (8009afc <_strtod_l+0x594>)
 8009a52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a62:	f7f6 fdd1 	bl	8000608 <__aeabi_dmul>
 8009a66:	4b26      	ldr	r3, [pc, #152]	@ (8009b00 <_strtod_l+0x598>)
 8009a68:	460a      	mov	r2, r1
 8009a6a:	400b      	ands	r3, r1
 8009a6c:	4925      	ldr	r1, [pc, #148]	@ (8009b04 <_strtod_l+0x59c>)
 8009a6e:	428b      	cmp	r3, r1
 8009a70:	4682      	mov	sl, r0
 8009a72:	d898      	bhi.n	80099a6 <_strtod_l+0x43e>
 8009a74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a78:	428b      	cmp	r3, r1
 8009a7a:	bf86      	itte	hi
 8009a7c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009b08 <_strtod_l+0x5a0>
 8009a80:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	e076      	b.n	8009b7c <_strtod_l+0x614>
 8009a8e:	07e2      	lsls	r2, r4, #31
 8009a90:	d504      	bpl.n	8009a9c <_strtod_l+0x534>
 8009a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a96:	f7f6 fdb7 	bl	8000608 <__aeabi_dmul>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	3601      	adds	r6, #1
 8009a9e:	1064      	asrs	r4, r4, #1
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	e7d0      	b.n	8009a46 <_strtod_l+0x4de>
 8009aa4:	d0f0      	beq.n	8009a88 <_strtod_l+0x520>
 8009aa6:	4264      	negs	r4, r4
 8009aa8:	f014 020f 	ands.w	r2, r4, #15
 8009aac:	d00a      	beq.n	8009ac4 <_strtod_l+0x55c>
 8009aae:	4b12      	ldr	r3, [pc, #72]	@ (8009af8 <_strtod_l+0x590>)
 8009ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ab4:	4650      	mov	r0, sl
 8009ab6:	4659      	mov	r1, fp
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f7f6 fece 	bl	800085c <__aeabi_ddiv>
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	468b      	mov	fp, r1
 8009ac4:	1124      	asrs	r4, r4, #4
 8009ac6:	d0df      	beq.n	8009a88 <_strtod_l+0x520>
 8009ac8:	2c1f      	cmp	r4, #31
 8009aca:	dd1f      	ble.n	8009b0c <_strtod_l+0x5a4>
 8009acc:	2400      	movs	r4, #0
 8009ace:	46a0      	mov	r8, r4
 8009ad0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ad2:	46a1      	mov	r9, r4
 8009ad4:	9a05      	ldr	r2, [sp, #20]
 8009ad6:	2322      	movs	r3, #34	@ 0x22
 8009ad8:	f04f 0a00 	mov.w	sl, #0
 8009adc:	f04f 0b00 	mov.w	fp, #0
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	e76b      	b.n	80099bc <_strtod_l+0x454>
 8009ae4:	0800b40a 	.word	0x0800b40a
 8009ae8:	0800b6d0 	.word	0x0800b6d0
 8009aec:	0800b402 	.word	0x0800b402
 8009af0:	0800b439 	.word	0x0800b439
 8009af4:	0800b572 	.word	0x0800b572
 8009af8:	0800b608 	.word	0x0800b608
 8009afc:	0800b5e0 	.word	0x0800b5e0
 8009b00:	7ff00000 	.word	0x7ff00000
 8009b04:	7ca00000 	.word	0x7ca00000
 8009b08:	7fefffff 	.word	0x7fefffff
 8009b0c:	f014 0310 	ands.w	r3, r4, #16
 8009b10:	bf18      	it	ne
 8009b12:	236a      	movne	r3, #106	@ 0x6a
 8009b14:	4ea9      	ldr	r6, [pc, #676]	@ (8009dbc <_strtod_l+0x854>)
 8009b16:	9308      	str	r3, [sp, #32]
 8009b18:	4650      	mov	r0, sl
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	07e7      	lsls	r7, r4, #31
 8009b20:	d504      	bpl.n	8009b2c <_strtod_l+0x5c4>
 8009b22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b26:	f7f6 fd6f 	bl	8000608 <__aeabi_dmul>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	1064      	asrs	r4, r4, #1
 8009b2e:	f106 0608 	add.w	r6, r6, #8
 8009b32:	d1f4      	bne.n	8009b1e <_strtod_l+0x5b6>
 8009b34:	b10b      	cbz	r3, 8009b3a <_strtod_l+0x5d2>
 8009b36:	4682      	mov	sl, r0
 8009b38:	468b      	mov	fp, r1
 8009b3a:	9b08      	ldr	r3, [sp, #32]
 8009b3c:	b1b3      	cbz	r3, 8009b6c <_strtod_l+0x604>
 8009b3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	4659      	mov	r1, fp
 8009b4a:	dd0f      	ble.n	8009b6c <_strtod_l+0x604>
 8009b4c:	2b1f      	cmp	r3, #31
 8009b4e:	dd56      	ble.n	8009bfe <_strtod_l+0x696>
 8009b50:	2b34      	cmp	r3, #52	@ 0x34
 8009b52:	bfde      	ittt	le
 8009b54:	f04f 33ff 	movle.w	r3, #4294967295
 8009b58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b5c:	4093      	lslle	r3, r2
 8009b5e:	f04f 0a00 	mov.w	sl, #0
 8009b62:	bfcc      	ite	gt
 8009b64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b68:	ea03 0b01 	andle.w	fp, r3, r1
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2300      	movs	r3, #0
 8009b70:	4650      	mov	r0, sl
 8009b72:	4659      	mov	r1, fp
 8009b74:	f7f6 ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d1a7      	bne.n	8009acc <_strtod_l+0x564>
 8009b7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b82:	9805      	ldr	r0, [sp, #20]
 8009b84:	462b      	mov	r3, r5
 8009b86:	464a      	mov	r2, r9
 8009b88:	f7ff f8ce 	bl	8008d28 <__s2b>
 8009b8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f43f af09 	beq.w	80099a6 <_strtod_l+0x43e>
 8009b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b98:	2a00      	cmp	r2, #0
 8009b9a:	eba3 0308 	sub.w	r3, r3, r8
 8009b9e:	bfa8      	it	ge
 8009ba0:	2300      	movge	r3, #0
 8009ba2:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ba4:	2400      	movs	r4, #0
 8009ba6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009baa:	9316      	str	r3, [sp, #88]	@ 0x58
 8009bac:	46a0      	mov	r8, r4
 8009bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bb0:	9805      	ldr	r0, [sp, #20]
 8009bb2:	6859      	ldr	r1, [r3, #4]
 8009bb4:	f7ff f810 	bl	8008bd8 <_Balloc>
 8009bb8:	4681      	mov	r9, r0
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	f43f aef7 	beq.w	80099ae <_strtod_l+0x446>
 8009bc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bc2:	691a      	ldr	r2, [r3, #16]
 8009bc4:	3202      	adds	r2, #2
 8009bc6:	f103 010c 	add.w	r1, r3, #12
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	300c      	adds	r0, #12
 8009bce:	f000 febb 	bl	800a948 <memcpy>
 8009bd2:	ec4b ab10 	vmov	d0, sl, fp
 8009bd6:	9805      	ldr	r0, [sp, #20]
 8009bd8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009bda:	a91b      	add	r1, sp, #108	@ 0x6c
 8009bdc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009be0:	f7ff fbd6 	bl	8009390 <__d2b>
 8009be4:	901a      	str	r0, [sp, #104]	@ 0x68
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f43f aee1 	beq.w	80099ae <_strtod_l+0x446>
 8009bec:	9805      	ldr	r0, [sp, #20]
 8009bee:	2101      	movs	r1, #1
 8009bf0:	f7ff f930 	bl	8008e54 <__i2b>
 8009bf4:	4680      	mov	r8, r0
 8009bf6:	b948      	cbnz	r0, 8009c0c <_strtod_l+0x6a4>
 8009bf8:	f04f 0800 	mov.w	r8, #0
 8009bfc:	e6d7      	b.n	80099ae <_strtod_l+0x446>
 8009bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009c02:	fa02 f303 	lsl.w	r3, r2, r3
 8009c06:	ea03 0a0a 	and.w	sl, r3, sl
 8009c0a:	e7af      	b.n	8009b6c <_strtod_l+0x604>
 8009c0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009c0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	bfab      	itete	ge
 8009c14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009c1c:	bfac      	ite	ge
 8009c1e:	18ef      	addge	r7, r5, r3
 8009c20:	1b5e      	sublt	r6, r3, r5
 8009c22:	9b08      	ldr	r3, [sp, #32]
 8009c24:	1aed      	subs	r5, r5, r3
 8009c26:	4415      	add	r5, r2
 8009c28:	4b65      	ldr	r3, [pc, #404]	@ (8009dc0 <_strtod_l+0x858>)
 8009c2a:	3d01      	subs	r5, #1
 8009c2c:	429d      	cmp	r5, r3
 8009c2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c32:	da50      	bge.n	8009cd6 <_strtod_l+0x76e>
 8009c34:	1b5b      	subs	r3, r3, r5
 8009c36:	2b1f      	cmp	r3, #31
 8009c38:	eba2 0203 	sub.w	r2, r2, r3
 8009c3c:	f04f 0101 	mov.w	r1, #1
 8009c40:	dc3d      	bgt.n	8009cbe <_strtod_l+0x756>
 8009c42:	fa01 f303 	lsl.w	r3, r1, r3
 8009c46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c48:	2300      	movs	r3, #0
 8009c4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c4c:	18bd      	adds	r5, r7, r2
 8009c4e:	9b08      	ldr	r3, [sp, #32]
 8009c50:	42af      	cmp	r7, r5
 8009c52:	4416      	add	r6, r2
 8009c54:	441e      	add	r6, r3
 8009c56:	463b      	mov	r3, r7
 8009c58:	bfa8      	it	ge
 8009c5a:	462b      	movge	r3, r5
 8009c5c:	42b3      	cmp	r3, r6
 8009c5e:	bfa8      	it	ge
 8009c60:	4633      	movge	r3, r6
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bfc2      	ittt	gt
 8009c66:	1aed      	subgt	r5, r5, r3
 8009c68:	1af6      	subgt	r6, r6, r3
 8009c6a:	1aff      	subgt	r7, r7, r3
 8009c6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dd16      	ble.n	8009ca0 <_strtod_l+0x738>
 8009c72:	4641      	mov	r1, r8
 8009c74:	9805      	ldr	r0, [sp, #20]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f7ff f9a4 	bl	8008fc4 <__pow5mult>
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d0ba      	beq.n	8009bf8 <_strtod_l+0x690>
 8009c82:	4601      	mov	r1, r0
 8009c84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c86:	9805      	ldr	r0, [sp, #20]
 8009c88:	f7ff f8fa 	bl	8008e80 <__multiply>
 8009c8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f43f ae8d 	beq.w	80099ae <_strtod_l+0x446>
 8009c94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c96:	9805      	ldr	r0, [sp, #20]
 8009c98:	f7fe ffde 	bl	8008c58 <_Bfree>
 8009c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ca0:	2d00      	cmp	r5, #0
 8009ca2:	dc1d      	bgt.n	8009ce0 <_strtod_l+0x778>
 8009ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dd23      	ble.n	8009cf2 <_strtod_l+0x78a>
 8009caa:	4649      	mov	r1, r9
 8009cac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009cae:	9805      	ldr	r0, [sp, #20]
 8009cb0:	f7ff f988 	bl	8008fc4 <__pow5mult>
 8009cb4:	4681      	mov	r9, r0
 8009cb6:	b9e0      	cbnz	r0, 8009cf2 <_strtod_l+0x78a>
 8009cb8:	f04f 0900 	mov.w	r9, #0
 8009cbc:	e677      	b.n	80099ae <_strtod_l+0x446>
 8009cbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009cc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009cc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009cca:	35e2      	adds	r5, #226	@ 0xe2
 8009ccc:	fa01 f305 	lsl.w	r3, r1, r5
 8009cd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009cd4:	e7ba      	b.n	8009c4c <_strtod_l+0x6e4>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cda:	2301      	movs	r3, #1
 8009cdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cde:	e7b5      	b.n	8009c4c <_strtod_l+0x6e4>
 8009ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ce2:	9805      	ldr	r0, [sp, #20]
 8009ce4:	462a      	mov	r2, r5
 8009ce6:	f7ff f9c7 	bl	8009078 <__lshift>
 8009cea:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d1d9      	bne.n	8009ca4 <_strtod_l+0x73c>
 8009cf0:	e65d      	b.n	80099ae <_strtod_l+0x446>
 8009cf2:	2e00      	cmp	r6, #0
 8009cf4:	dd07      	ble.n	8009d06 <_strtod_l+0x79e>
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	9805      	ldr	r0, [sp, #20]
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	f7ff f9bc 	bl	8009078 <__lshift>
 8009d00:	4681      	mov	r9, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d0d8      	beq.n	8009cb8 <_strtod_l+0x750>
 8009d06:	2f00      	cmp	r7, #0
 8009d08:	dd08      	ble.n	8009d1c <_strtod_l+0x7b4>
 8009d0a:	4641      	mov	r1, r8
 8009d0c:	9805      	ldr	r0, [sp, #20]
 8009d0e:	463a      	mov	r2, r7
 8009d10:	f7ff f9b2 	bl	8009078 <__lshift>
 8009d14:	4680      	mov	r8, r0
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f43f ae49 	beq.w	80099ae <_strtod_l+0x446>
 8009d1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d1e:	9805      	ldr	r0, [sp, #20]
 8009d20:	464a      	mov	r2, r9
 8009d22:	f7ff fa31 	bl	8009188 <__mdiff>
 8009d26:	4604      	mov	r4, r0
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f43f ae40 	beq.w	80099ae <_strtod_l+0x446>
 8009d2e:	68c3      	ldr	r3, [r0, #12]
 8009d30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d32:	2300      	movs	r3, #0
 8009d34:	60c3      	str	r3, [r0, #12]
 8009d36:	4641      	mov	r1, r8
 8009d38:	f7ff fa0a 	bl	8009150 <__mcmp>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	da45      	bge.n	8009dcc <_strtod_l+0x864>
 8009d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d42:	ea53 030a 	orrs.w	r3, r3, sl
 8009d46:	d16b      	bne.n	8009e20 <_strtod_l+0x8b8>
 8009d48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d167      	bne.n	8009e20 <_strtod_l+0x8b8>
 8009d50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d54:	0d1b      	lsrs	r3, r3, #20
 8009d56:	051b      	lsls	r3, r3, #20
 8009d58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d5c:	d960      	bls.n	8009e20 <_strtod_l+0x8b8>
 8009d5e:	6963      	ldr	r3, [r4, #20]
 8009d60:	b913      	cbnz	r3, 8009d68 <_strtod_l+0x800>
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	dd5b      	ble.n	8009e20 <_strtod_l+0x8b8>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	9805      	ldr	r0, [sp, #20]
 8009d6e:	f7ff f983 	bl	8009078 <__lshift>
 8009d72:	4641      	mov	r1, r8
 8009d74:	4604      	mov	r4, r0
 8009d76:	f7ff f9eb 	bl	8009150 <__mcmp>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	dd50      	ble.n	8009e20 <_strtod_l+0x8b8>
 8009d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d82:	9a08      	ldr	r2, [sp, #32]
 8009d84:	0d1b      	lsrs	r3, r3, #20
 8009d86:	051b      	lsls	r3, r3, #20
 8009d88:	2a00      	cmp	r2, #0
 8009d8a:	d06a      	beq.n	8009e62 <_strtod_l+0x8fa>
 8009d8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d90:	d867      	bhi.n	8009e62 <_strtod_l+0x8fa>
 8009d92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d96:	f67f ae9d 	bls.w	8009ad4 <_strtod_l+0x56c>
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc4 <_strtod_l+0x85c>)
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	4659      	mov	r1, fp
 8009da0:	2200      	movs	r2, #0
 8009da2:	f7f6 fc31 	bl	8000608 <__aeabi_dmul>
 8009da6:	4b08      	ldr	r3, [pc, #32]	@ (8009dc8 <_strtod_l+0x860>)
 8009da8:	400b      	ands	r3, r1
 8009daa:	4682      	mov	sl, r0
 8009dac:	468b      	mov	fp, r1
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f47f ae08 	bne.w	80099c4 <_strtod_l+0x45c>
 8009db4:	9a05      	ldr	r2, [sp, #20]
 8009db6:	2322      	movs	r3, #34	@ 0x22
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	e603      	b.n	80099c4 <_strtod_l+0x45c>
 8009dbc:	0800b6f8 	.word	0x0800b6f8
 8009dc0:	fffffc02 	.word	0xfffffc02
 8009dc4:	39500000 	.word	0x39500000
 8009dc8:	7ff00000 	.word	0x7ff00000
 8009dcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009dd0:	d165      	bne.n	8009e9e <_strtod_l+0x936>
 8009dd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dd8:	b35a      	cbz	r2, 8009e32 <_strtod_l+0x8ca>
 8009dda:	4a9f      	ldr	r2, [pc, #636]	@ (800a058 <_strtod_l+0xaf0>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d12b      	bne.n	8009e38 <_strtod_l+0x8d0>
 8009de0:	9b08      	ldr	r3, [sp, #32]
 8009de2:	4651      	mov	r1, sl
 8009de4:	b303      	cbz	r3, 8009e28 <_strtod_l+0x8c0>
 8009de6:	4b9d      	ldr	r3, [pc, #628]	@ (800a05c <_strtod_l+0xaf4>)
 8009de8:	465a      	mov	r2, fp
 8009dea:	4013      	ands	r3, r2
 8009dec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295
 8009df4:	d81b      	bhi.n	8009e2e <_strtod_l+0x8c6>
 8009df6:	0d1b      	lsrs	r3, r3, #20
 8009df8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009e00:	4299      	cmp	r1, r3
 8009e02:	d119      	bne.n	8009e38 <_strtod_l+0x8d0>
 8009e04:	4b96      	ldr	r3, [pc, #600]	@ (800a060 <_strtod_l+0xaf8>)
 8009e06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d102      	bne.n	8009e12 <_strtod_l+0x8aa>
 8009e0c:	3101      	adds	r1, #1
 8009e0e:	f43f adce 	beq.w	80099ae <_strtod_l+0x446>
 8009e12:	4b92      	ldr	r3, [pc, #584]	@ (800a05c <_strtod_l+0xaf4>)
 8009e14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e16:	401a      	ands	r2, r3
 8009e18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e1c:	f04f 0a00 	mov.w	sl, #0
 8009e20:	9b08      	ldr	r3, [sp, #32]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1b9      	bne.n	8009d9a <_strtod_l+0x832>
 8009e26:	e5cd      	b.n	80099c4 <_strtod_l+0x45c>
 8009e28:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2c:	e7e8      	b.n	8009e00 <_strtod_l+0x898>
 8009e2e:	4613      	mov	r3, r2
 8009e30:	e7e6      	b.n	8009e00 <_strtod_l+0x898>
 8009e32:	ea53 030a 	orrs.w	r3, r3, sl
 8009e36:	d0a2      	beq.n	8009d7e <_strtod_l+0x816>
 8009e38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e3a:	b1db      	cbz	r3, 8009e74 <_strtod_l+0x90c>
 8009e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e3e:	4213      	tst	r3, r2
 8009e40:	d0ee      	beq.n	8009e20 <_strtod_l+0x8b8>
 8009e42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e44:	9a08      	ldr	r2, [sp, #32]
 8009e46:	4650      	mov	r0, sl
 8009e48:	4659      	mov	r1, fp
 8009e4a:	b1bb      	cbz	r3, 8009e7c <_strtod_l+0x914>
 8009e4c:	f7ff fb6e 	bl	800952c <sulp>
 8009e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e54:	ec53 2b10 	vmov	r2, r3, d0
 8009e58:	f7f6 fa20 	bl	800029c <__adddf3>
 8009e5c:	4682      	mov	sl, r0
 8009e5e:	468b      	mov	fp, r1
 8009e60:	e7de      	b.n	8009e20 <_strtod_l+0x8b8>
 8009e62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e6e:	f04f 3aff 	mov.w	sl, #4294967295
 8009e72:	e7d5      	b.n	8009e20 <_strtod_l+0x8b8>
 8009e74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e76:	ea13 0f0a 	tst.w	r3, sl
 8009e7a:	e7e1      	b.n	8009e40 <_strtod_l+0x8d8>
 8009e7c:	f7ff fb56 	bl	800952c <sulp>
 8009e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e84:	ec53 2b10 	vmov	r2, r3, d0
 8009e88:	f7f6 fa06 	bl	8000298 <__aeabi_dsub>
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4682      	mov	sl, r0
 8009e92:	468b      	mov	fp, r1
 8009e94:	f7f6 fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d0c1      	beq.n	8009e20 <_strtod_l+0x8b8>
 8009e9c:	e61a      	b.n	8009ad4 <_strtod_l+0x56c>
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f7ff facd 	bl	8009440 <__ratio>
 8009ea6:	ec57 6b10 	vmov	r6, r7, d0
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	f7f6 fe24 	bl	8000b00 <__aeabi_dcmple>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d06f      	beq.n	8009f9c <_strtod_l+0xa34>
 8009ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d17a      	bne.n	8009fb8 <_strtod_l+0xa50>
 8009ec2:	f1ba 0f00 	cmp.w	sl, #0
 8009ec6:	d158      	bne.n	8009f7a <_strtod_l+0xa12>
 8009ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d15a      	bne.n	8009f88 <_strtod_l+0xa20>
 8009ed2:	4b64      	ldr	r3, [pc, #400]	@ (800a064 <_strtod_l+0xafc>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 fe07 	bl	8000aec <__aeabi_dcmplt>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d159      	bne.n	8009f96 <_strtod_l+0xa2e>
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	4b60      	ldr	r3, [pc, #384]	@ (800a068 <_strtod_l+0xb00>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f7f6 fb8d 	bl	8000608 <__aeabi_dmul>
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ef6:	9606      	str	r6, [sp, #24]
 8009ef8:	9307      	str	r3, [sp, #28]
 8009efa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009efe:	4d57      	ldr	r5, [pc, #348]	@ (800a05c <_strtod_l+0xaf4>)
 8009f00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f06:	401d      	ands	r5, r3
 8009f08:	4b58      	ldr	r3, [pc, #352]	@ (800a06c <_strtod_l+0xb04>)
 8009f0a:	429d      	cmp	r5, r3
 8009f0c:	f040 80b2 	bne.w	800a074 <_strtod_l+0xb0c>
 8009f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f16:	ec4b ab10 	vmov	d0, sl, fp
 8009f1a:	f7ff f9c9 	bl	80092b0 <__ulp>
 8009f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f22:	ec51 0b10 	vmov	r0, r1, d0
 8009f26:	f7f6 fb6f 	bl	8000608 <__aeabi_dmul>
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	f7f6 f9b5 	bl	800029c <__adddf3>
 8009f32:	460b      	mov	r3, r1
 8009f34:	4949      	ldr	r1, [pc, #292]	@ (800a05c <_strtod_l+0xaf4>)
 8009f36:	4a4e      	ldr	r2, [pc, #312]	@ (800a070 <_strtod_l+0xb08>)
 8009f38:	4019      	ands	r1, r3
 8009f3a:	4291      	cmp	r1, r2
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	d942      	bls.n	8009fc6 <_strtod_l+0xa5e>
 8009f40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f42:	4b47      	ldr	r3, [pc, #284]	@ (800a060 <_strtod_l+0xaf8>)
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d103      	bne.n	8009f50 <_strtod_l+0x9e8>
 8009f48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	f43f ad2f 	beq.w	80099ae <_strtod_l+0x446>
 8009f50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a060 <_strtod_l+0xaf8>
 8009f54:	f04f 3aff 	mov.w	sl, #4294967295
 8009f58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f5a:	9805      	ldr	r0, [sp, #20]
 8009f5c:	f7fe fe7c 	bl	8008c58 <_Bfree>
 8009f60:	9805      	ldr	r0, [sp, #20]
 8009f62:	4649      	mov	r1, r9
 8009f64:	f7fe fe78 	bl	8008c58 <_Bfree>
 8009f68:	9805      	ldr	r0, [sp, #20]
 8009f6a:	4641      	mov	r1, r8
 8009f6c:	f7fe fe74 	bl	8008c58 <_Bfree>
 8009f70:	9805      	ldr	r0, [sp, #20]
 8009f72:	4621      	mov	r1, r4
 8009f74:	f7fe fe70 	bl	8008c58 <_Bfree>
 8009f78:	e619      	b.n	8009bae <_strtod_l+0x646>
 8009f7a:	f1ba 0f01 	cmp.w	sl, #1
 8009f7e:	d103      	bne.n	8009f88 <_strtod_l+0xa20>
 8009f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f43f ada6 	beq.w	8009ad4 <_strtod_l+0x56c>
 8009f88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a038 <_strtod_l+0xad0>
 8009f8c:	4f35      	ldr	r7, [pc, #212]	@ (800a064 <_strtod_l+0xafc>)
 8009f8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f92:	2600      	movs	r6, #0
 8009f94:	e7b1      	b.n	8009efa <_strtod_l+0x992>
 8009f96:	4f34      	ldr	r7, [pc, #208]	@ (800a068 <_strtod_l+0xb00>)
 8009f98:	2600      	movs	r6, #0
 8009f9a:	e7aa      	b.n	8009ef2 <_strtod_l+0x98a>
 8009f9c:	4b32      	ldr	r3, [pc, #200]	@ (800a068 <_strtod_l+0xb00>)
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f7f6 fb30 	bl	8000608 <__aeabi_dmul>
 8009fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009faa:	4606      	mov	r6, r0
 8009fac:	460f      	mov	r7, r1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d09f      	beq.n	8009ef2 <_strtod_l+0x98a>
 8009fb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009fb6:	e7a0      	b.n	8009efa <_strtod_l+0x992>
 8009fb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a040 <_strtod_l+0xad8>
 8009fbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fc0:	ec57 6b17 	vmov	r6, r7, d7
 8009fc4:	e799      	b.n	8009efa <_strtod_l+0x992>
 8009fc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009fca:	9b08      	ldr	r3, [sp, #32]
 8009fcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1c1      	bne.n	8009f58 <_strtod_l+0x9f0>
 8009fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fd8:	0d1b      	lsrs	r3, r3, #20
 8009fda:	051b      	lsls	r3, r3, #20
 8009fdc:	429d      	cmp	r5, r3
 8009fde:	d1bb      	bne.n	8009f58 <_strtod_l+0x9f0>
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 fec0 	bl	8000d68 <__aeabi_d2lz>
 8009fe8:	f7f6 fae0 	bl	80005ac <__aeabi_l2d>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 f950 	bl	8000298 <__aeabi_dsub>
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a000:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a006:	ea46 060a 	orr.w	r6, r6, sl
 800a00a:	431e      	orrs	r6, r3
 800a00c:	d06f      	beq.n	800a0ee <_strtod_l+0xb86>
 800a00e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a048 <_strtod_l+0xae0>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f7f6 fd6a 	bl	8000aec <__aeabi_dcmplt>
 800a018:	2800      	cmp	r0, #0
 800a01a:	f47f acd3 	bne.w	80099c4 <_strtod_l+0x45c>
 800a01e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a050 <_strtod_l+0xae8>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a028:	f7f6 fd7e 	bl	8000b28 <__aeabi_dcmpgt>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d093      	beq.n	8009f58 <_strtod_l+0x9f0>
 800a030:	e4c8      	b.n	80099c4 <_strtod_l+0x45c>
 800a032:	bf00      	nop
 800a034:	f3af 8000 	nop.w
 800a038:	00000000 	.word	0x00000000
 800a03c:	bff00000 	.word	0xbff00000
 800a040:	00000000 	.word	0x00000000
 800a044:	3ff00000 	.word	0x3ff00000
 800a048:	94a03595 	.word	0x94a03595
 800a04c:	3fdfffff 	.word	0x3fdfffff
 800a050:	35afe535 	.word	0x35afe535
 800a054:	3fe00000 	.word	0x3fe00000
 800a058:	000fffff 	.word	0x000fffff
 800a05c:	7ff00000 	.word	0x7ff00000
 800a060:	7fefffff 	.word	0x7fefffff
 800a064:	3ff00000 	.word	0x3ff00000
 800a068:	3fe00000 	.word	0x3fe00000
 800a06c:	7fe00000 	.word	0x7fe00000
 800a070:	7c9fffff 	.word	0x7c9fffff
 800a074:	9b08      	ldr	r3, [sp, #32]
 800a076:	b323      	cbz	r3, 800a0c2 <_strtod_l+0xb5a>
 800a078:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a07c:	d821      	bhi.n	800a0c2 <_strtod_l+0xb5a>
 800a07e:	a328      	add	r3, pc, #160	@ (adr r3, 800a120 <_strtod_l+0xbb8>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	4630      	mov	r0, r6
 800a086:	4639      	mov	r1, r7
 800a088:	f7f6 fd3a 	bl	8000b00 <__aeabi_dcmple>
 800a08c:	b1a0      	cbz	r0, 800a0b8 <_strtod_l+0xb50>
 800a08e:	4639      	mov	r1, r7
 800a090:	4630      	mov	r0, r6
 800a092:	f7f6 fd91 	bl	8000bb8 <__aeabi_d2uiz>
 800a096:	2801      	cmp	r0, #1
 800a098:	bf38      	it	cc
 800a09a:	2001      	movcc	r0, #1
 800a09c:	f7f6 fa3a 	bl	8000514 <__aeabi_ui2d>
 800a0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	b9fb      	cbnz	r3, 800a0e8 <_strtod_l+0xb80>
 800a0a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800a0ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a0b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a0be:	1b5b      	subs	r3, r3, r5
 800a0c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a0c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0ca:	f7ff f8f1 	bl	80092b0 <__ulp>
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	ec53 2b10 	vmov	r2, r3, d0
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	f7f6 fa97 	bl	8000608 <__aeabi_dmul>
 800a0da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0de:	f7f6 f8dd 	bl	800029c <__adddf3>
 800a0e2:	4682      	mov	sl, r0
 800a0e4:	468b      	mov	fp, r1
 800a0e6:	e770      	b.n	8009fca <_strtod_l+0xa62>
 800a0e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0ec:	e7e0      	b.n	800a0b0 <_strtod_l+0xb48>
 800a0ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800a128 <_strtod_l+0xbc0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 fcfa 	bl	8000aec <__aeabi_dcmplt>
 800a0f8:	e798      	b.n	800a02c <_strtod_l+0xac4>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	f7ff ba6d 	b.w	80095e2 <_strtod_l+0x7a>
 800a108:	2a65      	cmp	r2, #101	@ 0x65
 800a10a:	f43f ab68 	beq.w	80097de <_strtod_l+0x276>
 800a10e:	2a45      	cmp	r2, #69	@ 0x45
 800a110:	f43f ab65 	beq.w	80097de <_strtod_l+0x276>
 800a114:	2301      	movs	r3, #1
 800a116:	f7ff bba0 	b.w	800985a <_strtod_l+0x2f2>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	ffc00000 	.word	0xffc00000
 800a124:	41dfffff 	.word	0x41dfffff
 800a128:	94a03595 	.word	0x94a03595
 800a12c:	3fcfffff 	.word	0x3fcfffff

0800a130 <_strtod_r>:
 800a130:	4b01      	ldr	r3, [pc, #4]	@ (800a138 <_strtod_r+0x8>)
 800a132:	f7ff ba19 	b.w	8009568 <_strtod_l>
 800a136:	bf00      	nop
 800a138:	20000068 	.word	0x20000068

0800a13c <__ssputs_r>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	688e      	ldr	r6, [r1, #8]
 800a142:	461f      	mov	r7, r3
 800a144:	42be      	cmp	r6, r7
 800a146:	680b      	ldr	r3, [r1, #0]
 800a148:	4682      	mov	sl, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	4690      	mov	r8, r2
 800a14e:	d82d      	bhi.n	800a1ac <__ssputs_r+0x70>
 800a150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a158:	d026      	beq.n	800a1a8 <__ssputs_r+0x6c>
 800a15a:	6965      	ldr	r5, [r4, #20]
 800a15c:	6909      	ldr	r1, [r1, #16]
 800a15e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a162:	eba3 0901 	sub.w	r9, r3, r1
 800a166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a16a:	1c7b      	adds	r3, r7, #1
 800a16c:	444b      	add	r3, r9
 800a16e:	106d      	asrs	r5, r5, #1
 800a170:	429d      	cmp	r5, r3
 800a172:	bf38      	it	cc
 800a174:	461d      	movcc	r5, r3
 800a176:	0553      	lsls	r3, r2, #21
 800a178:	d527      	bpl.n	800a1ca <__ssputs_r+0x8e>
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7fe fca0 	bl	8008ac0 <_malloc_r>
 800a180:	4606      	mov	r6, r0
 800a182:	b360      	cbz	r0, 800a1de <__ssputs_r+0xa2>
 800a184:	6921      	ldr	r1, [r4, #16]
 800a186:	464a      	mov	r2, r9
 800a188:	f000 fbde 	bl	800a948 <memcpy>
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	6126      	str	r6, [r4, #16]
 800a19a:	6165      	str	r5, [r4, #20]
 800a19c:	444e      	add	r6, r9
 800a19e:	eba5 0509 	sub.w	r5, r5, r9
 800a1a2:	6026      	str	r6, [r4, #0]
 800a1a4:	60a5      	str	r5, [r4, #8]
 800a1a6:	463e      	mov	r6, r7
 800a1a8:	42be      	cmp	r6, r7
 800a1aa:	d900      	bls.n	800a1ae <__ssputs_r+0x72>
 800a1ac:	463e      	mov	r6, r7
 800a1ae:	6820      	ldr	r0, [r4, #0]
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	4641      	mov	r1, r8
 800a1b4:	f000 fb6a 	bl	800a88c <memmove>
 800a1b8:	68a3      	ldr	r3, [r4, #8]
 800a1ba:	1b9b      	subs	r3, r3, r6
 800a1bc:	60a3      	str	r3, [r4, #8]
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	4433      	add	r3, r6
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	f000 ff51 	bl	800b072 <_realloc_r>
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1e0      	bne.n	800a198 <__ssputs_r+0x5c>
 800a1d6:	6921      	ldr	r1, [r4, #16]
 800a1d8:	4650      	mov	r0, sl
 800a1da:	f7fe fbfd 	bl	80089d8 <_free_r>
 800a1de:	230c      	movs	r3, #12
 800a1e0:	f8ca 3000 	str.w	r3, [sl]
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	e7e9      	b.n	800a1c6 <__ssputs_r+0x8a>
	...

0800a1f4 <_svfiprintf_r>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	4698      	mov	r8, r3
 800a1fa:	898b      	ldrh	r3, [r1, #12]
 800a1fc:	061b      	lsls	r3, r3, #24
 800a1fe:	b09d      	sub	sp, #116	@ 0x74
 800a200:	4607      	mov	r7, r0
 800a202:	460d      	mov	r5, r1
 800a204:	4614      	mov	r4, r2
 800a206:	d510      	bpl.n	800a22a <_svfiprintf_r+0x36>
 800a208:	690b      	ldr	r3, [r1, #16]
 800a20a:	b973      	cbnz	r3, 800a22a <_svfiprintf_r+0x36>
 800a20c:	2140      	movs	r1, #64	@ 0x40
 800a20e:	f7fe fc57 	bl	8008ac0 <_malloc_r>
 800a212:	6028      	str	r0, [r5, #0]
 800a214:	6128      	str	r0, [r5, #16]
 800a216:	b930      	cbnz	r0, 800a226 <_svfiprintf_r+0x32>
 800a218:	230c      	movs	r3, #12
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	b01d      	add	sp, #116	@ 0x74
 800a222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a226:	2340      	movs	r3, #64	@ 0x40
 800a228:	616b      	str	r3, [r5, #20]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a22e:	2320      	movs	r3, #32
 800a230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a234:	f8cd 800c 	str.w	r8, [sp, #12]
 800a238:	2330      	movs	r3, #48	@ 0x30
 800a23a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a3d8 <_svfiprintf_r+0x1e4>
 800a23e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a242:	f04f 0901 	mov.w	r9, #1
 800a246:	4623      	mov	r3, r4
 800a248:	469a      	mov	sl, r3
 800a24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24e:	b10a      	cbz	r2, 800a254 <_svfiprintf_r+0x60>
 800a250:	2a25      	cmp	r2, #37	@ 0x25
 800a252:	d1f9      	bne.n	800a248 <_svfiprintf_r+0x54>
 800a254:	ebba 0b04 	subs.w	fp, sl, r4
 800a258:	d00b      	beq.n	800a272 <_svfiprintf_r+0x7e>
 800a25a:	465b      	mov	r3, fp
 800a25c:	4622      	mov	r2, r4
 800a25e:	4629      	mov	r1, r5
 800a260:	4638      	mov	r0, r7
 800a262:	f7ff ff6b 	bl	800a13c <__ssputs_r>
 800a266:	3001      	adds	r0, #1
 800a268:	f000 80a7 	beq.w	800a3ba <_svfiprintf_r+0x1c6>
 800a26c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a26e:	445a      	add	r2, fp
 800a270:	9209      	str	r2, [sp, #36]	@ 0x24
 800a272:	f89a 3000 	ldrb.w	r3, [sl]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 809f 	beq.w	800a3ba <_svfiprintf_r+0x1c6>
 800a27c:	2300      	movs	r3, #0
 800a27e:	f04f 32ff 	mov.w	r2, #4294967295
 800a282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a286:	f10a 0a01 	add.w	sl, sl, #1
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	9307      	str	r3, [sp, #28]
 800a28e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a292:	931a      	str	r3, [sp, #104]	@ 0x68
 800a294:	4654      	mov	r4, sl
 800a296:	2205      	movs	r2, #5
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	484e      	ldr	r0, [pc, #312]	@ (800a3d8 <_svfiprintf_r+0x1e4>)
 800a29e:	f7f5 ff9f 	bl	80001e0 <memchr>
 800a2a2:	9a04      	ldr	r2, [sp, #16]
 800a2a4:	b9d8      	cbnz	r0, 800a2de <_svfiprintf_r+0xea>
 800a2a6:	06d0      	lsls	r0, r2, #27
 800a2a8:	bf44      	itt	mi
 800a2aa:	2320      	movmi	r3, #32
 800a2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2b0:	0711      	lsls	r1, r2, #28
 800a2b2:	bf44      	itt	mi
 800a2b4:	232b      	movmi	r3, #43	@ 0x2b
 800a2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a2be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2c0:	d015      	beq.n	800a2ee <_svfiprintf_r+0xfa>
 800a2c2:	9a07      	ldr	r2, [sp, #28]
 800a2c4:	4654      	mov	r4, sl
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f04f 0c0a 	mov.w	ip, #10
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2d2:	3b30      	subs	r3, #48	@ 0x30
 800a2d4:	2b09      	cmp	r3, #9
 800a2d6:	d94b      	bls.n	800a370 <_svfiprintf_r+0x17c>
 800a2d8:	b1b0      	cbz	r0, 800a308 <_svfiprintf_r+0x114>
 800a2da:	9207      	str	r2, [sp, #28]
 800a2dc:	e014      	b.n	800a308 <_svfiprintf_r+0x114>
 800a2de:	eba0 0308 	sub.w	r3, r0, r8
 800a2e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	46a2      	mov	sl, r4
 800a2ec:	e7d2      	b.n	800a294 <_svfiprintf_r+0xa0>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	1d19      	adds	r1, r3, #4
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	9103      	str	r1, [sp, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bfbb      	ittet	lt
 800a2fa:	425b      	neglt	r3, r3
 800a2fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a300:	9307      	strge	r3, [sp, #28]
 800a302:	9307      	strlt	r3, [sp, #28]
 800a304:	bfb8      	it	lt
 800a306:	9204      	strlt	r2, [sp, #16]
 800a308:	7823      	ldrb	r3, [r4, #0]
 800a30a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a30c:	d10a      	bne.n	800a324 <_svfiprintf_r+0x130>
 800a30e:	7863      	ldrb	r3, [r4, #1]
 800a310:	2b2a      	cmp	r3, #42	@ 0x2a
 800a312:	d132      	bne.n	800a37a <_svfiprintf_r+0x186>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	1d1a      	adds	r2, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9203      	str	r2, [sp, #12]
 800a31c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a320:	3402      	adds	r4, #2
 800a322:	9305      	str	r3, [sp, #20]
 800a324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3e8 <_svfiprintf_r+0x1f4>
 800a328:	7821      	ldrb	r1, [r4, #0]
 800a32a:	2203      	movs	r2, #3
 800a32c:	4650      	mov	r0, sl
 800a32e:	f7f5 ff57 	bl	80001e0 <memchr>
 800a332:	b138      	cbz	r0, 800a344 <_svfiprintf_r+0x150>
 800a334:	9b04      	ldr	r3, [sp, #16]
 800a336:	eba0 000a 	sub.w	r0, r0, sl
 800a33a:	2240      	movs	r2, #64	@ 0x40
 800a33c:	4082      	lsls	r2, r0
 800a33e:	4313      	orrs	r3, r2
 800a340:	3401      	adds	r4, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a348:	4824      	ldr	r0, [pc, #144]	@ (800a3dc <_svfiprintf_r+0x1e8>)
 800a34a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a34e:	2206      	movs	r2, #6
 800a350:	f7f5 ff46 	bl	80001e0 <memchr>
 800a354:	2800      	cmp	r0, #0
 800a356:	d036      	beq.n	800a3c6 <_svfiprintf_r+0x1d2>
 800a358:	4b21      	ldr	r3, [pc, #132]	@ (800a3e0 <_svfiprintf_r+0x1ec>)
 800a35a:	bb1b      	cbnz	r3, 800a3a4 <_svfiprintf_r+0x1b0>
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	3307      	adds	r3, #7
 800a360:	f023 0307 	bic.w	r3, r3, #7
 800a364:	3308      	adds	r3, #8
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a36a:	4433      	add	r3, r6
 800a36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a36e:	e76a      	b.n	800a246 <_svfiprintf_r+0x52>
 800a370:	fb0c 3202 	mla	r2, ip, r2, r3
 800a374:	460c      	mov	r4, r1
 800a376:	2001      	movs	r0, #1
 800a378:	e7a8      	b.n	800a2cc <_svfiprintf_r+0xd8>
 800a37a:	2300      	movs	r3, #0
 800a37c:	3401      	adds	r4, #1
 800a37e:	9305      	str	r3, [sp, #20]
 800a380:	4619      	mov	r1, r3
 800a382:	f04f 0c0a 	mov.w	ip, #10
 800a386:	4620      	mov	r0, r4
 800a388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38c:	3a30      	subs	r2, #48	@ 0x30
 800a38e:	2a09      	cmp	r2, #9
 800a390:	d903      	bls.n	800a39a <_svfiprintf_r+0x1a6>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0c6      	beq.n	800a324 <_svfiprintf_r+0x130>
 800a396:	9105      	str	r1, [sp, #20]
 800a398:	e7c4      	b.n	800a324 <_svfiprintf_r+0x130>
 800a39a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a39e:	4604      	mov	r4, r0
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e7f0      	b.n	800a386 <_svfiprintf_r+0x192>
 800a3a4:	ab03      	add	r3, sp, #12
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	462a      	mov	r2, r5
 800a3aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e4 <_svfiprintf_r+0x1f0>)
 800a3ac:	a904      	add	r1, sp, #16
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7fc fc06 	bl	8006bc0 <_printf_float>
 800a3b4:	1c42      	adds	r2, r0, #1
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	d1d6      	bne.n	800a368 <_svfiprintf_r+0x174>
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	065b      	lsls	r3, r3, #25
 800a3be:	f53f af2d 	bmi.w	800a21c <_svfiprintf_r+0x28>
 800a3c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3c4:	e72c      	b.n	800a220 <_svfiprintf_r+0x2c>
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <_svfiprintf_r+0x1f0>)
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7fc fe8d 	bl	80070f0 <_printf_i>
 800a3d6:	e7ed      	b.n	800a3b4 <_svfiprintf_r+0x1c0>
 800a3d8:	0800b51e 	.word	0x0800b51e
 800a3dc:	0800b528 	.word	0x0800b528
 800a3e0:	08006bc1 	.word	0x08006bc1
 800a3e4:	0800a13d 	.word	0x0800a13d
 800a3e8:	0800b524 	.word	0x0800b524

0800a3ec <__sfputc_r>:
 800a3ec:	6893      	ldr	r3, [r2, #8]
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	b410      	push	{r4}
 800a3f4:	6093      	str	r3, [r2, #8]
 800a3f6:	da08      	bge.n	800a40a <__sfputc_r+0x1e>
 800a3f8:	6994      	ldr	r4, [r2, #24]
 800a3fa:	42a3      	cmp	r3, r4
 800a3fc:	db01      	blt.n	800a402 <__sfputc_r+0x16>
 800a3fe:	290a      	cmp	r1, #10
 800a400:	d103      	bne.n	800a40a <__sfputc_r+0x1e>
 800a402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a406:	f7fd bb73 	b.w	8007af0 <__swbuf_r>
 800a40a:	6813      	ldr	r3, [r2, #0]
 800a40c:	1c58      	adds	r0, r3, #1
 800a40e:	6010      	str	r0, [r2, #0]
 800a410:	7019      	strb	r1, [r3, #0]
 800a412:	4608      	mov	r0, r1
 800a414:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <__sfputs_r>:
 800a41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	4614      	mov	r4, r2
 800a422:	18d5      	adds	r5, r2, r3
 800a424:	42ac      	cmp	r4, r5
 800a426:	d101      	bne.n	800a42c <__sfputs_r+0x12>
 800a428:	2000      	movs	r0, #0
 800a42a:	e007      	b.n	800a43c <__sfputs_r+0x22>
 800a42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a430:	463a      	mov	r2, r7
 800a432:	4630      	mov	r0, r6
 800a434:	f7ff ffda 	bl	800a3ec <__sfputc_r>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d1f3      	bne.n	800a424 <__sfputs_r+0xa>
 800a43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a440 <_vfiprintf_r>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	460d      	mov	r5, r1
 800a446:	b09d      	sub	sp, #116	@ 0x74
 800a448:	4614      	mov	r4, r2
 800a44a:	4698      	mov	r8, r3
 800a44c:	4606      	mov	r6, r0
 800a44e:	b118      	cbz	r0, 800a458 <_vfiprintf_r+0x18>
 800a450:	6a03      	ldr	r3, [r0, #32]
 800a452:	b90b      	cbnz	r3, 800a458 <_vfiprintf_r+0x18>
 800a454:	f7fd fa04 	bl	8007860 <__sinit>
 800a458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a45a:	07d9      	lsls	r1, r3, #31
 800a45c:	d405      	bmi.n	800a46a <_vfiprintf_r+0x2a>
 800a45e:	89ab      	ldrh	r3, [r5, #12]
 800a460:	059a      	lsls	r2, r3, #22
 800a462:	d402      	bmi.n	800a46a <_vfiprintf_r+0x2a>
 800a464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a466:	f7fd fc54 	bl	8007d12 <__retarget_lock_acquire_recursive>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	071b      	lsls	r3, r3, #28
 800a46e:	d501      	bpl.n	800a474 <_vfiprintf_r+0x34>
 800a470:	692b      	ldr	r3, [r5, #16]
 800a472:	b99b      	cbnz	r3, 800a49c <_vfiprintf_r+0x5c>
 800a474:	4629      	mov	r1, r5
 800a476:	4630      	mov	r0, r6
 800a478:	f7fd fb78 	bl	8007b6c <__swsetup_r>
 800a47c:	b170      	cbz	r0, 800a49c <_vfiprintf_r+0x5c>
 800a47e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a480:	07dc      	lsls	r4, r3, #31
 800a482:	d504      	bpl.n	800a48e <_vfiprintf_r+0x4e>
 800a484:	f04f 30ff 	mov.w	r0, #4294967295
 800a488:	b01d      	add	sp, #116	@ 0x74
 800a48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	0598      	lsls	r0, r3, #22
 800a492:	d4f7      	bmi.n	800a484 <_vfiprintf_r+0x44>
 800a494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a496:	f7fd fc3d 	bl	8007d14 <__retarget_lock_release_recursive>
 800a49a:	e7f3      	b.n	800a484 <_vfiprintf_r+0x44>
 800a49c:	2300      	movs	r3, #0
 800a49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4aa:	2330      	movs	r3, #48	@ 0x30
 800a4ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a65c <_vfiprintf_r+0x21c>
 800a4b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4b4:	f04f 0901 	mov.w	r9, #1
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	469a      	mov	sl, r3
 800a4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c0:	b10a      	cbz	r2, 800a4c6 <_vfiprintf_r+0x86>
 800a4c2:	2a25      	cmp	r2, #37	@ 0x25
 800a4c4:	d1f9      	bne.n	800a4ba <_vfiprintf_r+0x7a>
 800a4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ca:	d00b      	beq.n	800a4e4 <_vfiprintf_r+0xa4>
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff ffa1 	bl	800a41a <__sfputs_r>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f000 80a7 	beq.w	800a62c <_vfiprintf_r+0x1ec>
 800a4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4e0:	445a      	add	r2, fp
 800a4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 809f 	beq.w	800a62c <_vfiprintf_r+0x1ec>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f8:	f10a 0a01 	add.w	sl, sl, #1
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	9307      	str	r3, [sp, #28]
 800a500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a504:	931a      	str	r3, [sp, #104]	@ 0x68
 800a506:	4654      	mov	r4, sl
 800a508:	2205      	movs	r2, #5
 800a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50e:	4853      	ldr	r0, [pc, #332]	@ (800a65c <_vfiprintf_r+0x21c>)
 800a510:	f7f5 fe66 	bl	80001e0 <memchr>
 800a514:	9a04      	ldr	r2, [sp, #16]
 800a516:	b9d8      	cbnz	r0, 800a550 <_vfiprintf_r+0x110>
 800a518:	06d1      	lsls	r1, r2, #27
 800a51a:	bf44      	itt	mi
 800a51c:	2320      	movmi	r3, #32
 800a51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a522:	0713      	lsls	r3, r2, #28
 800a524:	bf44      	itt	mi
 800a526:	232b      	movmi	r3, #43	@ 0x2b
 800a528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a52c:	f89a 3000 	ldrb.w	r3, [sl]
 800a530:	2b2a      	cmp	r3, #42	@ 0x2a
 800a532:	d015      	beq.n	800a560 <_vfiprintf_r+0x120>
 800a534:	9a07      	ldr	r2, [sp, #28]
 800a536:	4654      	mov	r4, sl
 800a538:	2000      	movs	r0, #0
 800a53a:	f04f 0c0a 	mov.w	ip, #10
 800a53e:	4621      	mov	r1, r4
 800a540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a544:	3b30      	subs	r3, #48	@ 0x30
 800a546:	2b09      	cmp	r3, #9
 800a548:	d94b      	bls.n	800a5e2 <_vfiprintf_r+0x1a2>
 800a54a:	b1b0      	cbz	r0, 800a57a <_vfiprintf_r+0x13a>
 800a54c:	9207      	str	r2, [sp, #28]
 800a54e:	e014      	b.n	800a57a <_vfiprintf_r+0x13a>
 800a550:	eba0 0308 	sub.w	r3, r0, r8
 800a554:	fa09 f303 	lsl.w	r3, r9, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	9304      	str	r3, [sp, #16]
 800a55c:	46a2      	mov	sl, r4
 800a55e:	e7d2      	b.n	800a506 <_vfiprintf_r+0xc6>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d19      	adds	r1, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9103      	str	r1, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfbb      	ittet	lt
 800a56c:	425b      	neglt	r3, r3
 800a56e:	f042 0202 	orrlt.w	r2, r2, #2
 800a572:	9307      	strge	r3, [sp, #28]
 800a574:	9307      	strlt	r3, [sp, #28]
 800a576:	bfb8      	it	lt
 800a578:	9204      	strlt	r2, [sp, #16]
 800a57a:	7823      	ldrb	r3, [r4, #0]
 800a57c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a57e:	d10a      	bne.n	800a596 <_vfiprintf_r+0x156>
 800a580:	7863      	ldrb	r3, [r4, #1]
 800a582:	2b2a      	cmp	r3, #42	@ 0x2a
 800a584:	d132      	bne.n	800a5ec <_vfiprintf_r+0x1ac>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	1d1a      	adds	r2, r3, #4
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	9203      	str	r2, [sp, #12]
 800a58e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a592:	3402      	adds	r4, #2
 800a594:	9305      	str	r3, [sp, #20]
 800a596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a66c <_vfiprintf_r+0x22c>
 800a59a:	7821      	ldrb	r1, [r4, #0]
 800a59c:	2203      	movs	r2, #3
 800a59e:	4650      	mov	r0, sl
 800a5a0:	f7f5 fe1e 	bl	80001e0 <memchr>
 800a5a4:	b138      	cbz	r0, 800a5b6 <_vfiprintf_r+0x176>
 800a5a6:	9b04      	ldr	r3, [sp, #16]
 800a5a8:	eba0 000a 	sub.w	r0, r0, sl
 800a5ac:	2240      	movs	r2, #64	@ 0x40
 800a5ae:	4082      	lsls	r2, r0
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	3401      	adds	r4, #1
 800a5b4:	9304      	str	r3, [sp, #16]
 800a5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ba:	4829      	ldr	r0, [pc, #164]	@ (800a660 <_vfiprintf_r+0x220>)
 800a5bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5c0:	2206      	movs	r2, #6
 800a5c2:	f7f5 fe0d 	bl	80001e0 <memchr>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d03f      	beq.n	800a64a <_vfiprintf_r+0x20a>
 800a5ca:	4b26      	ldr	r3, [pc, #152]	@ (800a664 <_vfiprintf_r+0x224>)
 800a5cc:	bb1b      	cbnz	r3, 800a616 <_vfiprintf_r+0x1d6>
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	3307      	adds	r3, #7
 800a5d2:	f023 0307 	bic.w	r3, r3, #7
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	9303      	str	r3, [sp, #12]
 800a5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5dc:	443b      	add	r3, r7
 800a5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5e0:	e76a      	b.n	800a4b8 <_vfiprintf_r+0x78>
 800a5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	e7a8      	b.n	800a53e <_vfiprintf_r+0xfe>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	3401      	adds	r4, #1
 800a5f0:	9305      	str	r3, [sp, #20]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	f04f 0c0a 	mov.w	ip, #10
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5fe:	3a30      	subs	r2, #48	@ 0x30
 800a600:	2a09      	cmp	r2, #9
 800a602:	d903      	bls.n	800a60c <_vfiprintf_r+0x1cc>
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0c6      	beq.n	800a596 <_vfiprintf_r+0x156>
 800a608:	9105      	str	r1, [sp, #20]
 800a60a:	e7c4      	b.n	800a596 <_vfiprintf_r+0x156>
 800a60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a610:	4604      	mov	r4, r0
 800a612:	2301      	movs	r3, #1
 800a614:	e7f0      	b.n	800a5f8 <_vfiprintf_r+0x1b8>
 800a616:	ab03      	add	r3, sp, #12
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	462a      	mov	r2, r5
 800a61c:	4b12      	ldr	r3, [pc, #72]	@ (800a668 <_vfiprintf_r+0x228>)
 800a61e:	a904      	add	r1, sp, #16
 800a620:	4630      	mov	r0, r6
 800a622:	f7fc facd 	bl	8006bc0 <_printf_float>
 800a626:	4607      	mov	r7, r0
 800a628:	1c78      	adds	r0, r7, #1
 800a62a:	d1d6      	bne.n	800a5da <_vfiprintf_r+0x19a>
 800a62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a62e:	07d9      	lsls	r1, r3, #31
 800a630:	d405      	bmi.n	800a63e <_vfiprintf_r+0x1fe>
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	059a      	lsls	r2, r3, #22
 800a636:	d402      	bmi.n	800a63e <_vfiprintf_r+0x1fe>
 800a638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a63a:	f7fd fb6b 	bl	8007d14 <__retarget_lock_release_recursive>
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	065b      	lsls	r3, r3, #25
 800a642:	f53f af1f 	bmi.w	800a484 <_vfiprintf_r+0x44>
 800a646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a648:	e71e      	b.n	800a488 <_vfiprintf_r+0x48>
 800a64a:	ab03      	add	r3, sp, #12
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	462a      	mov	r2, r5
 800a650:	4b05      	ldr	r3, [pc, #20]	@ (800a668 <_vfiprintf_r+0x228>)
 800a652:	a904      	add	r1, sp, #16
 800a654:	4630      	mov	r0, r6
 800a656:	f7fc fd4b 	bl	80070f0 <_printf_i>
 800a65a:	e7e4      	b.n	800a626 <_vfiprintf_r+0x1e6>
 800a65c:	0800b51e 	.word	0x0800b51e
 800a660:	0800b528 	.word	0x0800b528
 800a664:	08006bc1 	.word	0x08006bc1
 800a668:	0800a41b 	.word	0x0800a41b
 800a66c:	0800b524 	.word	0x0800b524

0800a670 <__sflush_r>:
 800a670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a678:	0716      	lsls	r6, r2, #28
 800a67a:	4605      	mov	r5, r0
 800a67c:	460c      	mov	r4, r1
 800a67e:	d454      	bmi.n	800a72a <__sflush_r+0xba>
 800a680:	684b      	ldr	r3, [r1, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	dc02      	bgt.n	800a68c <__sflush_r+0x1c>
 800a686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	dd48      	ble.n	800a71e <__sflush_r+0xae>
 800a68c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a68e:	2e00      	cmp	r6, #0
 800a690:	d045      	beq.n	800a71e <__sflush_r+0xae>
 800a692:	2300      	movs	r3, #0
 800a694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a698:	682f      	ldr	r7, [r5, #0]
 800a69a:	6a21      	ldr	r1, [r4, #32]
 800a69c:	602b      	str	r3, [r5, #0]
 800a69e:	d030      	beq.n	800a702 <__sflush_r+0x92>
 800a6a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	0759      	lsls	r1, r3, #29
 800a6a6:	d505      	bpl.n	800a6b4 <__sflush_r+0x44>
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	1ad2      	subs	r2, r2, r3
 800a6ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6ae:	b10b      	cbz	r3, 800a6b4 <__sflush_r+0x44>
 800a6b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6b8:	6a21      	ldr	r1, [r4, #32]
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b0      	blx	r6
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	d106      	bne.n	800a6d2 <__sflush_r+0x62>
 800a6c4:	6829      	ldr	r1, [r5, #0]
 800a6c6:	291d      	cmp	r1, #29
 800a6c8:	d82b      	bhi.n	800a722 <__sflush_r+0xb2>
 800a6ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a774 <__sflush_r+0x104>)
 800a6cc:	40ca      	lsrs	r2, r1
 800a6ce:	07d6      	lsls	r6, r2, #31
 800a6d0:	d527      	bpl.n	800a722 <__sflush_r+0xb2>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	6062      	str	r2, [r4, #4]
 800a6d6:	04d9      	lsls	r1, r3, #19
 800a6d8:	6922      	ldr	r2, [r4, #16]
 800a6da:	6022      	str	r2, [r4, #0]
 800a6dc:	d504      	bpl.n	800a6e8 <__sflush_r+0x78>
 800a6de:	1c42      	adds	r2, r0, #1
 800a6e0:	d101      	bne.n	800a6e6 <__sflush_r+0x76>
 800a6e2:	682b      	ldr	r3, [r5, #0]
 800a6e4:	b903      	cbnz	r3, 800a6e8 <__sflush_r+0x78>
 800a6e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ea:	602f      	str	r7, [r5, #0]
 800a6ec:	b1b9      	cbz	r1, 800a71e <__sflush_r+0xae>
 800a6ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6f2:	4299      	cmp	r1, r3
 800a6f4:	d002      	beq.n	800a6fc <__sflush_r+0x8c>
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f7fe f96e 	bl	80089d8 <_free_r>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a700:	e00d      	b.n	800a71e <__sflush_r+0xae>
 800a702:	2301      	movs	r3, #1
 800a704:	4628      	mov	r0, r5
 800a706:	47b0      	blx	r6
 800a708:	4602      	mov	r2, r0
 800a70a:	1c50      	adds	r0, r2, #1
 800a70c:	d1c9      	bne.n	800a6a2 <__sflush_r+0x32>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0c6      	beq.n	800a6a2 <__sflush_r+0x32>
 800a714:	2b1d      	cmp	r3, #29
 800a716:	d001      	beq.n	800a71c <__sflush_r+0xac>
 800a718:	2b16      	cmp	r3, #22
 800a71a:	d11e      	bne.n	800a75a <__sflush_r+0xea>
 800a71c:	602f      	str	r7, [r5, #0]
 800a71e:	2000      	movs	r0, #0
 800a720:	e022      	b.n	800a768 <__sflush_r+0xf8>
 800a722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a726:	b21b      	sxth	r3, r3
 800a728:	e01b      	b.n	800a762 <__sflush_r+0xf2>
 800a72a:	690f      	ldr	r7, [r1, #16]
 800a72c:	2f00      	cmp	r7, #0
 800a72e:	d0f6      	beq.n	800a71e <__sflush_r+0xae>
 800a730:	0793      	lsls	r3, r2, #30
 800a732:	680e      	ldr	r6, [r1, #0]
 800a734:	bf08      	it	eq
 800a736:	694b      	ldreq	r3, [r1, #20]
 800a738:	600f      	str	r7, [r1, #0]
 800a73a:	bf18      	it	ne
 800a73c:	2300      	movne	r3, #0
 800a73e:	eba6 0807 	sub.w	r8, r6, r7
 800a742:	608b      	str	r3, [r1, #8]
 800a744:	f1b8 0f00 	cmp.w	r8, #0
 800a748:	dde9      	ble.n	800a71e <__sflush_r+0xae>
 800a74a:	6a21      	ldr	r1, [r4, #32]
 800a74c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a74e:	4643      	mov	r3, r8
 800a750:	463a      	mov	r2, r7
 800a752:	4628      	mov	r0, r5
 800a754:	47b0      	blx	r6
 800a756:	2800      	cmp	r0, #0
 800a758:	dc08      	bgt.n	800a76c <__sflush_r+0xfc>
 800a75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76c:	4407      	add	r7, r0
 800a76e:	eba8 0800 	sub.w	r8, r8, r0
 800a772:	e7e7      	b.n	800a744 <__sflush_r+0xd4>
 800a774:	20400001 	.word	0x20400001

0800a778 <_fflush_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	690b      	ldr	r3, [r1, #16]
 800a77c:	4605      	mov	r5, r0
 800a77e:	460c      	mov	r4, r1
 800a780:	b913      	cbnz	r3, 800a788 <_fflush_r+0x10>
 800a782:	2500      	movs	r5, #0
 800a784:	4628      	mov	r0, r5
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	b118      	cbz	r0, 800a792 <_fflush_r+0x1a>
 800a78a:	6a03      	ldr	r3, [r0, #32]
 800a78c:	b90b      	cbnz	r3, 800a792 <_fflush_r+0x1a>
 800a78e:	f7fd f867 	bl	8007860 <__sinit>
 800a792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0f3      	beq.n	800a782 <_fflush_r+0xa>
 800a79a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a79c:	07d0      	lsls	r0, r2, #31
 800a79e:	d404      	bmi.n	800a7aa <_fflush_r+0x32>
 800a7a0:	0599      	lsls	r1, r3, #22
 800a7a2:	d402      	bmi.n	800a7aa <_fflush_r+0x32>
 800a7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7a6:	f7fd fab4 	bl	8007d12 <__retarget_lock_acquire_recursive>
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f7ff ff5f 	bl	800a670 <__sflush_r>
 800a7b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7b4:	07da      	lsls	r2, r3, #31
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	d4e4      	bmi.n	800a784 <_fflush_r+0xc>
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	059b      	lsls	r3, r3, #22
 800a7be:	d4e1      	bmi.n	800a784 <_fflush_r+0xc>
 800a7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7c2:	f7fd faa7 	bl	8007d14 <__retarget_lock_release_recursive>
 800a7c6:	e7dd      	b.n	800a784 <_fflush_r+0xc>

0800a7c8 <__swhatbuf_r>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	b096      	sub	sp, #88	@ 0x58
 800a7d4:	4615      	mov	r5, r2
 800a7d6:	461e      	mov	r6, r3
 800a7d8:	da0d      	bge.n	800a7f6 <__swhatbuf_r+0x2e>
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7e0:	f04f 0100 	mov.w	r1, #0
 800a7e4:	bf14      	ite	ne
 800a7e6:	2340      	movne	r3, #64	@ 0x40
 800a7e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	6031      	str	r1, [r6, #0]
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	b016      	add	sp, #88	@ 0x58
 800a7f4:	bd70      	pop	{r4, r5, r6, pc}
 800a7f6:	466a      	mov	r2, sp
 800a7f8:	f000 f874 	bl	800a8e4 <_fstat_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	dbec      	blt.n	800a7da <__swhatbuf_r+0x12>
 800a800:	9901      	ldr	r1, [sp, #4]
 800a802:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a806:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a80a:	4259      	negs	r1, r3
 800a80c:	4159      	adcs	r1, r3
 800a80e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a812:	e7eb      	b.n	800a7ec <__swhatbuf_r+0x24>

0800a814 <__smakebuf_r>:
 800a814:	898b      	ldrh	r3, [r1, #12]
 800a816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a818:	079d      	lsls	r5, r3, #30
 800a81a:	4606      	mov	r6, r0
 800a81c:	460c      	mov	r4, r1
 800a81e:	d507      	bpl.n	800a830 <__smakebuf_r+0x1c>
 800a820:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	6123      	str	r3, [r4, #16]
 800a828:	2301      	movs	r3, #1
 800a82a:	6163      	str	r3, [r4, #20]
 800a82c:	b003      	add	sp, #12
 800a82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a830:	ab01      	add	r3, sp, #4
 800a832:	466a      	mov	r2, sp
 800a834:	f7ff ffc8 	bl	800a7c8 <__swhatbuf_r>
 800a838:	9f00      	ldr	r7, [sp, #0]
 800a83a:	4605      	mov	r5, r0
 800a83c:	4639      	mov	r1, r7
 800a83e:	4630      	mov	r0, r6
 800a840:	f7fe f93e 	bl	8008ac0 <_malloc_r>
 800a844:	b948      	cbnz	r0, 800a85a <__smakebuf_r+0x46>
 800a846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a84a:	059a      	lsls	r2, r3, #22
 800a84c:	d4ee      	bmi.n	800a82c <__smakebuf_r+0x18>
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	f043 0302 	orr.w	r3, r3, #2
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	e7e2      	b.n	800a820 <__smakebuf_r+0xc>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	6020      	str	r0, [r4, #0]
 800a85e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	9b01      	ldr	r3, [sp, #4]
 800a866:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a86a:	b15b      	cbz	r3, 800a884 <__smakebuf_r+0x70>
 800a86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a870:	4630      	mov	r0, r6
 800a872:	f000 f849 	bl	800a908 <_isatty_r>
 800a876:	b128      	cbz	r0, 800a884 <__smakebuf_r+0x70>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f023 0303 	bic.w	r3, r3, #3
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	431d      	orrs	r5, r3
 800a888:	81a5      	strh	r5, [r4, #12]
 800a88a:	e7cf      	b.n	800a82c <__smakebuf_r+0x18>

0800a88c <memmove>:
 800a88c:	4288      	cmp	r0, r1
 800a88e:	b510      	push	{r4, lr}
 800a890:	eb01 0402 	add.w	r4, r1, r2
 800a894:	d902      	bls.n	800a89c <memmove+0x10>
 800a896:	4284      	cmp	r4, r0
 800a898:	4623      	mov	r3, r4
 800a89a:	d807      	bhi.n	800a8ac <memmove+0x20>
 800a89c:	1e43      	subs	r3, r0, #1
 800a89e:	42a1      	cmp	r1, r4
 800a8a0:	d008      	beq.n	800a8b4 <memmove+0x28>
 800a8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8aa:	e7f8      	b.n	800a89e <memmove+0x12>
 800a8ac:	4402      	add	r2, r0
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	428a      	cmp	r2, r1
 800a8b2:	d100      	bne.n	800a8b6 <memmove+0x2a>
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8be:	e7f7      	b.n	800a8b0 <memmove+0x24>

0800a8c0 <strncmp>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	b16a      	cbz	r2, 800a8e0 <strncmp+0x20>
 800a8c4:	3901      	subs	r1, #1
 800a8c6:	1884      	adds	r4, r0, r2
 800a8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d103      	bne.n	800a8dc <strncmp+0x1c>
 800a8d4:	42a0      	cmp	r0, r4
 800a8d6:	d001      	beq.n	800a8dc <strncmp+0x1c>
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	d1f5      	bne.n	800a8c8 <strncmp+0x8>
 800a8dc:	1ad0      	subs	r0, r2, r3
 800a8de:	bd10      	pop	{r4, pc}
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	e7fc      	b.n	800a8de <strncmp+0x1e>

0800a8e4 <_fstat_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	@ (800a904 <_fstat_r+0x20>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f7f8 f883 	bl	80029fc <_fstat>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d102      	bne.n	800a900 <_fstat_r+0x1c>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b103      	cbz	r3, 800a900 <_fstat_r+0x1c>
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop
 800a904:	20000480 	.word	0x20000480

0800a908 <_isatty_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d06      	ldr	r5, [pc, #24]	@ (800a924 <_isatty_r+0x1c>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f8 f882 	bl	8002a1c <_isatty>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_isatty_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_isatty_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	20000480 	.word	0x20000480

0800a928 <_sbrk_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d06      	ldr	r5, [pc, #24]	@ (800a944 <_sbrk_r+0x1c>)
 800a92c:	2300      	movs	r3, #0
 800a92e:	4604      	mov	r4, r0
 800a930:	4608      	mov	r0, r1
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	f7f8 f88a 	bl	8002a4c <_sbrk>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_sbrk_r+0x1a>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_sbrk_r+0x1a>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20000480 	.word	0x20000480

0800a948 <memcpy>:
 800a948:	440a      	add	r2, r1
 800a94a:	4291      	cmp	r1, r2
 800a94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a950:	d100      	bne.n	800a954 <memcpy+0xc>
 800a952:	4770      	bx	lr
 800a954:	b510      	push	{r4, lr}
 800a956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a95e:	4291      	cmp	r1, r2
 800a960:	d1f9      	bne.n	800a956 <memcpy+0xe>
 800a962:	bd10      	pop	{r4, pc}
 800a964:	0000      	movs	r0, r0
	...

0800a968 <nan>:
 800a968:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a970 <nan+0x8>
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	00000000 	.word	0x00000000
 800a974:	7ff80000 	.word	0x7ff80000

0800a978 <__assert_func>:
 800a978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a97a:	4614      	mov	r4, r2
 800a97c:	461a      	mov	r2, r3
 800a97e:	4b09      	ldr	r3, [pc, #36]	@ (800a9a4 <__assert_func+0x2c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4605      	mov	r5, r0
 800a984:	68d8      	ldr	r0, [r3, #12]
 800a986:	b14c      	cbz	r4, 800a99c <__assert_func+0x24>
 800a988:	4b07      	ldr	r3, [pc, #28]	@ (800a9a8 <__assert_func+0x30>)
 800a98a:	9100      	str	r1, [sp, #0]
 800a98c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a990:	4906      	ldr	r1, [pc, #24]	@ (800a9ac <__assert_func+0x34>)
 800a992:	462b      	mov	r3, r5
 800a994:	f000 fba8 	bl	800b0e8 <fiprintf>
 800a998:	f000 fbb8 	bl	800b10c <abort>
 800a99c:	4b04      	ldr	r3, [pc, #16]	@ (800a9b0 <__assert_func+0x38>)
 800a99e:	461c      	mov	r4, r3
 800a9a0:	e7f3      	b.n	800a98a <__assert_func+0x12>
 800a9a2:	bf00      	nop
 800a9a4:	20000018 	.word	0x20000018
 800a9a8:	0800b537 	.word	0x0800b537
 800a9ac:	0800b544 	.word	0x0800b544
 800a9b0:	0800b572 	.word	0x0800b572

0800a9b4 <_calloc_r>:
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	fba1 5402 	umull	r5, r4, r1, r2
 800a9ba:	b934      	cbnz	r4, 800a9ca <_calloc_r+0x16>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	f7fe f87f 	bl	8008ac0 <_malloc_r>
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	b928      	cbnz	r0, 800a9d2 <_calloc_r+0x1e>
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ca:	220c      	movs	r2, #12
 800a9cc:	6002      	str	r2, [r0, #0]
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	e7f9      	b.n	800a9c6 <_calloc_r+0x12>
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7fd f91f 	bl	8007c18 <memset>
 800a9da:	e7f4      	b.n	800a9c6 <_calloc_r+0x12>

0800a9dc <rshift>:
 800a9dc:	6903      	ldr	r3, [r0, #16]
 800a9de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9ea:	f100 0414 	add.w	r4, r0, #20
 800a9ee:	dd45      	ble.n	800aa7c <rshift+0xa0>
 800a9f0:	f011 011f 	ands.w	r1, r1, #31
 800a9f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9fc:	d10c      	bne.n	800aa18 <rshift+0x3c>
 800a9fe:	f100 0710 	add.w	r7, r0, #16
 800aa02:	4629      	mov	r1, r5
 800aa04:	42b1      	cmp	r1, r6
 800aa06:	d334      	bcc.n	800aa72 <rshift+0x96>
 800aa08:	1a9b      	subs	r3, r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	1eea      	subs	r2, r5, #3
 800aa0e:	4296      	cmp	r6, r2
 800aa10:	bf38      	it	cc
 800aa12:	2300      	movcc	r3, #0
 800aa14:	4423      	add	r3, r4
 800aa16:	e015      	b.n	800aa44 <rshift+0x68>
 800aa18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa1c:	f1c1 0820 	rsb	r8, r1, #32
 800aa20:	40cf      	lsrs	r7, r1
 800aa22:	f105 0e04 	add.w	lr, r5, #4
 800aa26:	46a1      	mov	r9, r4
 800aa28:	4576      	cmp	r6, lr
 800aa2a:	46f4      	mov	ip, lr
 800aa2c:	d815      	bhi.n	800aa5a <rshift+0x7e>
 800aa2e:	1a9a      	subs	r2, r3, r2
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	3a04      	subs	r2, #4
 800aa34:	3501      	adds	r5, #1
 800aa36:	42ae      	cmp	r6, r5
 800aa38:	bf38      	it	cc
 800aa3a:	2200      	movcc	r2, #0
 800aa3c:	18a3      	adds	r3, r4, r2
 800aa3e:	50a7      	str	r7, [r4, r2]
 800aa40:	b107      	cbz	r7, 800aa44 <rshift+0x68>
 800aa42:	3304      	adds	r3, #4
 800aa44:	1b1a      	subs	r2, r3, r4
 800aa46:	42a3      	cmp	r3, r4
 800aa48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa4c:	bf08      	it	eq
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	6102      	str	r2, [r0, #16]
 800aa52:	bf08      	it	eq
 800aa54:	6143      	streq	r3, [r0, #20]
 800aa56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa5a:	f8dc c000 	ldr.w	ip, [ip]
 800aa5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa62:	ea4c 0707 	orr.w	r7, ip, r7
 800aa66:	f849 7b04 	str.w	r7, [r9], #4
 800aa6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa6e:	40cf      	lsrs	r7, r1
 800aa70:	e7da      	b.n	800aa28 <rshift+0x4c>
 800aa72:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa76:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa7a:	e7c3      	b.n	800aa04 <rshift+0x28>
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	e7e1      	b.n	800aa44 <rshift+0x68>

0800aa80 <__hexdig_fun>:
 800aa80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa84:	2b09      	cmp	r3, #9
 800aa86:	d802      	bhi.n	800aa8e <__hexdig_fun+0xe>
 800aa88:	3820      	subs	r0, #32
 800aa8a:	b2c0      	uxtb	r0, r0
 800aa8c:	4770      	bx	lr
 800aa8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	d801      	bhi.n	800aa9a <__hexdig_fun+0x1a>
 800aa96:	3847      	subs	r0, #71	@ 0x47
 800aa98:	e7f7      	b.n	800aa8a <__hexdig_fun+0xa>
 800aa9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa9e:	2b05      	cmp	r3, #5
 800aaa0:	d801      	bhi.n	800aaa6 <__hexdig_fun+0x26>
 800aaa2:	3827      	subs	r0, #39	@ 0x27
 800aaa4:	e7f1      	b.n	800aa8a <__hexdig_fun+0xa>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	4770      	bx	lr
	...

0800aaac <__gethex>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	b085      	sub	sp, #20
 800aab2:	468a      	mov	sl, r1
 800aab4:	9302      	str	r3, [sp, #8]
 800aab6:	680b      	ldr	r3, [r1, #0]
 800aab8:	9001      	str	r0, [sp, #4]
 800aaba:	4690      	mov	r8, r2
 800aabc:	1c9c      	adds	r4, r3, #2
 800aabe:	46a1      	mov	r9, r4
 800aac0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aac4:	2830      	cmp	r0, #48	@ 0x30
 800aac6:	d0fa      	beq.n	800aabe <__gethex+0x12>
 800aac8:	eba9 0303 	sub.w	r3, r9, r3
 800aacc:	f1a3 0b02 	sub.w	fp, r3, #2
 800aad0:	f7ff ffd6 	bl	800aa80 <__hexdig_fun>
 800aad4:	4605      	mov	r5, r0
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d168      	bne.n	800abac <__gethex+0x100>
 800aada:	49a0      	ldr	r1, [pc, #640]	@ (800ad5c <__gethex+0x2b0>)
 800aadc:	2201      	movs	r2, #1
 800aade:	4648      	mov	r0, r9
 800aae0:	f7ff feee 	bl	800a8c0 <strncmp>
 800aae4:	4607      	mov	r7, r0
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d167      	bne.n	800abba <__gethex+0x10e>
 800aaea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aaee:	4626      	mov	r6, r4
 800aaf0:	f7ff ffc6 	bl	800aa80 <__hexdig_fun>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d062      	beq.n	800abbe <__gethex+0x112>
 800aaf8:	4623      	mov	r3, r4
 800aafa:	7818      	ldrb	r0, [r3, #0]
 800aafc:	2830      	cmp	r0, #48	@ 0x30
 800aafe:	4699      	mov	r9, r3
 800ab00:	f103 0301 	add.w	r3, r3, #1
 800ab04:	d0f9      	beq.n	800aafa <__gethex+0x4e>
 800ab06:	f7ff ffbb 	bl	800aa80 <__hexdig_fun>
 800ab0a:	fab0 f580 	clz	r5, r0
 800ab0e:	096d      	lsrs	r5, r5, #5
 800ab10:	f04f 0b01 	mov.w	fp, #1
 800ab14:	464a      	mov	r2, r9
 800ab16:	4616      	mov	r6, r2
 800ab18:	3201      	adds	r2, #1
 800ab1a:	7830      	ldrb	r0, [r6, #0]
 800ab1c:	f7ff ffb0 	bl	800aa80 <__hexdig_fun>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1f8      	bne.n	800ab16 <__gethex+0x6a>
 800ab24:	498d      	ldr	r1, [pc, #564]	@ (800ad5c <__gethex+0x2b0>)
 800ab26:	2201      	movs	r2, #1
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff fec9 	bl	800a8c0 <strncmp>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d13f      	bne.n	800abb2 <__gethex+0x106>
 800ab32:	b944      	cbnz	r4, 800ab46 <__gethex+0x9a>
 800ab34:	1c74      	adds	r4, r6, #1
 800ab36:	4622      	mov	r2, r4
 800ab38:	4616      	mov	r6, r2
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	7830      	ldrb	r0, [r6, #0]
 800ab3e:	f7ff ff9f 	bl	800aa80 <__hexdig_fun>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d1f8      	bne.n	800ab38 <__gethex+0x8c>
 800ab46:	1ba4      	subs	r4, r4, r6
 800ab48:	00a7      	lsls	r7, r4, #2
 800ab4a:	7833      	ldrb	r3, [r6, #0]
 800ab4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab50:	2b50      	cmp	r3, #80	@ 0x50
 800ab52:	d13e      	bne.n	800abd2 <__gethex+0x126>
 800ab54:	7873      	ldrb	r3, [r6, #1]
 800ab56:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab58:	d033      	beq.n	800abc2 <__gethex+0x116>
 800ab5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab5c:	d034      	beq.n	800abc8 <__gethex+0x11c>
 800ab5e:	1c71      	adds	r1, r6, #1
 800ab60:	2400      	movs	r4, #0
 800ab62:	7808      	ldrb	r0, [r1, #0]
 800ab64:	f7ff ff8c 	bl	800aa80 <__hexdig_fun>
 800ab68:	1e43      	subs	r3, r0, #1
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b18      	cmp	r3, #24
 800ab6e:	d830      	bhi.n	800abd2 <__gethex+0x126>
 800ab70:	f1a0 0210 	sub.w	r2, r0, #16
 800ab74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab78:	f7ff ff82 	bl	800aa80 <__hexdig_fun>
 800ab7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab80:	fa5f fc8c 	uxtb.w	ip, ip
 800ab84:	f1bc 0f18 	cmp.w	ip, #24
 800ab88:	f04f 030a 	mov.w	r3, #10
 800ab8c:	d91e      	bls.n	800abcc <__gethex+0x120>
 800ab8e:	b104      	cbz	r4, 800ab92 <__gethex+0xe6>
 800ab90:	4252      	negs	r2, r2
 800ab92:	4417      	add	r7, r2
 800ab94:	f8ca 1000 	str.w	r1, [sl]
 800ab98:	b1ed      	cbz	r5, 800abd6 <__gethex+0x12a>
 800ab9a:	f1bb 0f00 	cmp.w	fp, #0
 800ab9e:	bf0c      	ite	eq
 800aba0:	2506      	moveq	r5, #6
 800aba2:	2500      	movne	r5, #0
 800aba4:	4628      	mov	r0, r5
 800aba6:	b005      	add	sp, #20
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	2500      	movs	r5, #0
 800abae:	462c      	mov	r4, r5
 800abb0:	e7b0      	b.n	800ab14 <__gethex+0x68>
 800abb2:	2c00      	cmp	r4, #0
 800abb4:	d1c7      	bne.n	800ab46 <__gethex+0x9a>
 800abb6:	4627      	mov	r7, r4
 800abb8:	e7c7      	b.n	800ab4a <__gethex+0x9e>
 800abba:	464e      	mov	r6, r9
 800abbc:	462f      	mov	r7, r5
 800abbe:	2501      	movs	r5, #1
 800abc0:	e7c3      	b.n	800ab4a <__gethex+0x9e>
 800abc2:	2400      	movs	r4, #0
 800abc4:	1cb1      	adds	r1, r6, #2
 800abc6:	e7cc      	b.n	800ab62 <__gethex+0xb6>
 800abc8:	2401      	movs	r4, #1
 800abca:	e7fb      	b.n	800abc4 <__gethex+0x118>
 800abcc:	fb03 0002 	mla	r0, r3, r2, r0
 800abd0:	e7ce      	b.n	800ab70 <__gethex+0xc4>
 800abd2:	4631      	mov	r1, r6
 800abd4:	e7de      	b.n	800ab94 <__gethex+0xe8>
 800abd6:	eba6 0309 	sub.w	r3, r6, r9
 800abda:	3b01      	subs	r3, #1
 800abdc:	4629      	mov	r1, r5
 800abde:	2b07      	cmp	r3, #7
 800abe0:	dc0a      	bgt.n	800abf8 <__gethex+0x14c>
 800abe2:	9801      	ldr	r0, [sp, #4]
 800abe4:	f7fd fff8 	bl	8008bd8 <_Balloc>
 800abe8:	4604      	mov	r4, r0
 800abea:	b940      	cbnz	r0, 800abfe <__gethex+0x152>
 800abec:	4b5c      	ldr	r3, [pc, #368]	@ (800ad60 <__gethex+0x2b4>)
 800abee:	4602      	mov	r2, r0
 800abf0:	21e4      	movs	r1, #228	@ 0xe4
 800abf2:	485c      	ldr	r0, [pc, #368]	@ (800ad64 <__gethex+0x2b8>)
 800abf4:	f7ff fec0 	bl	800a978 <__assert_func>
 800abf8:	3101      	adds	r1, #1
 800abfa:	105b      	asrs	r3, r3, #1
 800abfc:	e7ef      	b.n	800abde <__gethex+0x132>
 800abfe:	f100 0a14 	add.w	sl, r0, #20
 800ac02:	2300      	movs	r3, #0
 800ac04:	4655      	mov	r5, sl
 800ac06:	469b      	mov	fp, r3
 800ac08:	45b1      	cmp	r9, r6
 800ac0a:	d337      	bcc.n	800ac7c <__gethex+0x1d0>
 800ac0c:	f845 bb04 	str.w	fp, [r5], #4
 800ac10:	eba5 050a 	sub.w	r5, r5, sl
 800ac14:	10ad      	asrs	r5, r5, #2
 800ac16:	6125      	str	r5, [r4, #16]
 800ac18:	4658      	mov	r0, fp
 800ac1a:	f7fe f8cf 	bl	8008dbc <__hi0bits>
 800ac1e:	016d      	lsls	r5, r5, #5
 800ac20:	f8d8 6000 	ldr.w	r6, [r8]
 800ac24:	1a2d      	subs	r5, r5, r0
 800ac26:	42b5      	cmp	r5, r6
 800ac28:	dd54      	ble.n	800acd4 <__gethex+0x228>
 800ac2a:	1bad      	subs	r5, r5, r6
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f7fe fc5b 	bl	80094ea <__any_on>
 800ac34:	4681      	mov	r9, r0
 800ac36:	b178      	cbz	r0, 800ac58 <__gethex+0x1ac>
 800ac38:	1e6b      	subs	r3, r5, #1
 800ac3a:	1159      	asrs	r1, r3, #5
 800ac3c:	f003 021f 	and.w	r2, r3, #31
 800ac40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac44:	f04f 0901 	mov.w	r9, #1
 800ac48:	fa09 f202 	lsl.w	r2, r9, r2
 800ac4c:	420a      	tst	r2, r1
 800ac4e:	d003      	beq.n	800ac58 <__gethex+0x1ac>
 800ac50:	454b      	cmp	r3, r9
 800ac52:	dc36      	bgt.n	800acc2 <__gethex+0x216>
 800ac54:	f04f 0902 	mov.w	r9, #2
 800ac58:	4629      	mov	r1, r5
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f7ff febe 	bl	800a9dc <rshift>
 800ac60:	442f      	add	r7, r5
 800ac62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac66:	42bb      	cmp	r3, r7
 800ac68:	da42      	bge.n	800acf0 <__gethex+0x244>
 800ac6a:	9801      	ldr	r0, [sp, #4]
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	f7fd fff3 	bl	8008c58 <_Bfree>
 800ac72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac74:	2300      	movs	r3, #0
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	25a3      	movs	r5, #163	@ 0xa3
 800ac7a:	e793      	b.n	800aba4 <__gethex+0xf8>
 800ac7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac80:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac82:	d012      	beq.n	800acaa <__gethex+0x1fe>
 800ac84:	2b20      	cmp	r3, #32
 800ac86:	d104      	bne.n	800ac92 <__gethex+0x1e6>
 800ac88:	f845 bb04 	str.w	fp, [r5], #4
 800ac8c:	f04f 0b00 	mov.w	fp, #0
 800ac90:	465b      	mov	r3, fp
 800ac92:	7830      	ldrb	r0, [r6, #0]
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	f7ff fef3 	bl	800aa80 <__hexdig_fun>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	f000 000f 	and.w	r0, r0, #15
 800aca0:	4098      	lsls	r0, r3
 800aca2:	ea4b 0b00 	orr.w	fp, fp, r0
 800aca6:	3304      	adds	r3, #4
 800aca8:	e7ae      	b.n	800ac08 <__gethex+0x15c>
 800acaa:	45b1      	cmp	r9, r6
 800acac:	d8ea      	bhi.n	800ac84 <__gethex+0x1d8>
 800acae:	492b      	ldr	r1, [pc, #172]	@ (800ad5c <__gethex+0x2b0>)
 800acb0:	9303      	str	r3, [sp, #12]
 800acb2:	2201      	movs	r2, #1
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff fe03 	bl	800a8c0 <strncmp>
 800acba:	9b03      	ldr	r3, [sp, #12]
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1e1      	bne.n	800ac84 <__gethex+0x1d8>
 800acc0:	e7a2      	b.n	800ac08 <__gethex+0x15c>
 800acc2:	1ea9      	subs	r1, r5, #2
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7fe fc10 	bl	80094ea <__any_on>
 800acca:	2800      	cmp	r0, #0
 800accc:	d0c2      	beq.n	800ac54 <__gethex+0x1a8>
 800acce:	f04f 0903 	mov.w	r9, #3
 800acd2:	e7c1      	b.n	800ac58 <__gethex+0x1ac>
 800acd4:	da09      	bge.n	800acea <__gethex+0x23e>
 800acd6:	1b75      	subs	r5, r6, r5
 800acd8:	4621      	mov	r1, r4
 800acda:	9801      	ldr	r0, [sp, #4]
 800acdc:	462a      	mov	r2, r5
 800acde:	f7fe f9cb 	bl	8009078 <__lshift>
 800ace2:	1b7f      	subs	r7, r7, r5
 800ace4:	4604      	mov	r4, r0
 800ace6:	f100 0a14 	add.w	sl, r0, #20
 800acea:	f04f 0900 	mov.w	r9, #0
 800acee:	e7b8      	b.n	800ac62 <__gethex+0x1b6>
 800acf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acf4:	42bd      	cmp	r5, r7
 800acf6:	dd6f      	ble.n	800add8 <__gethex+0x32c>
 800acf8:	1bed      	subs	r5, r5, r7
 800acfa:	42ae      	cmp	r6, r5
 800acfc:	dc34      	bgt.n	800ad68 <__gethex+0x2bc>
 800acfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d022      	beq.n	800ad4c <__gethex+0x2a0>
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d024      	beq.n	800ad54 <__gethex+0x2a8>
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d115      	bne.n	800ad3a <__gethex+0x28e>
 800ad0e:	42ae      	cmp	r6, r5
 800ad10:	d113      	bne.n	800ad3a <__gethex+0x28e>
 800ad12:	2e01      	cmp	r6, #1
 800ad14:	d10b      	bne.n	800ad2e <__gethex+0x282>
 800ad16:	9a02      	ldr	r2, [sp, #8]
 800ad18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad1c:	6013      	str	r3, [r2, #0]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	f8ca 3000 	str.w	r3, [sl]
 800ad26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad28:	2562      	movs	r5, #98	@ 0x62
 800ad2a:	601c      	str	r4, [r3, #0]
 800ad2c:	e73a      	b.n	800aba4 <__gethex+0xf8>
 800ad2e:	1e71      	subs	r1, r6, #1
 800ad30:	4620      	mov	r0, r4
 800ad32:	f7fe fbda 	bl	80094ea <__any_on>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d1ed      	bne.n	800ad16 <__gethex+0x26a>
 800ad3a:	9801      	ldr	r0, [sp, #4]
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	f7fd ff8b 	bl	8008c58 <_Bfree>
 800ad42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad44:	2300      	movs	r3, #0
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	2550      	movs	r5, #80	@ 0x50
 800ad4a:	e72b      	b.n	800aba4 <__gethex+0xf8>
 800ad4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1f3      	bne.n	800ad3a <__gethex+0x28e>
 800ad52:	e7e0      	b.n	800ad16 <__gethex+0x26a>
 800ad54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1dd      	bne.n	800ad16 <__gethex+0x26a>
 800ad5a:	e7ee      	b.n	800ad3a <__gethex+0x28e>
 800ad5c:	0800b51c 	.word	0x0800b51c
 800ad60:	0800b4b2 	.word	0x0800b4b2
 800ad64:	0800b573 	.word	0x0800b573
 800ad68:	1e6f      	subs	r7, r5, #1
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	d130      	bne.n	800add2 <__gethex+0x326>
 800ad70:	b127      	cbz	r7, 800ad7c <__gethex+0x2d0>
 800ad72:	4639      	mov	r1, r7
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7fe fbb8 	bl	80094ea <__any_on>
 800ad7a:	4681      	mov	r9, r0
 800ad7c:	117a      	asrs	r2, r7, #5
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad84:	f007 071f 	and.w	r7, r7, #31
 800ad88:	40bb      	lsls	r3, r7
 800ad8a:	4213      	tst	r3, r2
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4620      	mov	r0, r4
 800ad90:	bf18      	it	ne
 800ad92:	f049 0902 	orrne.w	r9, r9, #2
 800ad96:	f7ff fe21 	bl	800a9dc <rshift>
 800ad9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad9e:	1b76      	subs	r6, r6, r5
 800ada0:	2502      	movs	r5, #2
 800ada2:	f1b9 0f00 	cmp.w	r9, #0
 800ada6:	d047      	beq.n	800ae38 <__gethex+0x38c>
 800ada8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adac:	2b02      	cmp	r3, #2
 800adae:	d015      	beq.n	800addc <__gethex+0x330>
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	d017      	beq.n	800ade4 <__gethex+0x338>
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d109      	bne.n	800adcc <__gethex+0x320>
 800adb8:	f019 0f02 	tst.w	r9, #2
 800adbc:	d006      	beq.n	800adcc <__gethex+0x320>
 800adbe:	f8da 3000 	ldr.w	r3, [sl]
 800adc2:	ea49 0903 	orr.w	r9, r9, r3
 800adc6:	f019 0f01 	tst.w	r9, #1
 800adca:	d10e      	bne.n	800adea <__gethex+0x33e>
 800adcc:	f045 0510 	orr.w	r5, r5, #16
 800add0:	e032      	b.n	800ae38 <__gethex+0x38c>
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	e7d1      	b.n	800ad7c <__gethex+0x2d0>
 800add8:	2501      	movs	r5, #1
 800adda:	e7e2      	b.n	800ada2 <__gethex+0x2f6>
 800addc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adde:	f1c3 0301 	rsb	r3, r3, #1
 800ade2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ade4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d0f0      	beq.n	800adcc <__gethex+0x320>
 800adea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adee:	f104 0314 	add.w	r3, r4, #20
 800adf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adf6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adfa:	f04f 0c00 	mov.w	ip, #0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae08:	d01b      	beq.n	800ae42 <__gethex+0x396>
 800ae0a:	3201      	adds	r2, #1
 800ae0c:	6002      	str	r2, [r0, #0]
 800ae0e:	2d02      	cmp	r5, #2
 800ae10:	f104 0314 	add.w	r3, r4, #20
 800ae14:	d13c      	bne.n	800ae90 <__gethex+0x3e4>
 800ae16:	f8d8 2000 	ldr.w	r2, [r8]
 800ae1a:	3a01      	subs	r2, #1
 800ae1c:	42b2      	cmp	r2, r6
 800ae1e:	d109      	bne.n	800ae34 <__gethex+0x388>
 800ae20:	1171      	asrs	r1, r6, #5
 800ae22:	2201      	movs	r2, #1
 800ae24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae28:	f006 061f 	and.w	r6, r6, #31
 800ae2c:	fa02 f606 	lsl.w	r6, r2, r6
 800ae30:	421e      	tst	r6, r3
 800ae32:	d13a      	bne.n	800aeaa <__gethex+0x3fe>
 800ae34:	f045 0520 	orr.w	r5, r5, #32
 800ae38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae3a:	601c      	str	r4, [r3, #0]
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	601f      	str	r7, [r3, #0]
 800ae40:	e6b0      	b.n	800aba4 <__gethex+0xf8>
 800ae42:	4299      	cmp	r1, r3
 800ae44:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae48:	d8d9      	bhi.n	800adfe <__gethex+0x352>
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	459b      	cmp	fp, r3
 800ae4e:	db17      	blt.n	800ae80 <__gethex+0x3d4>
 800ae50:	6861      	ldr	r1, [r4, #4]
 800ae52:	9801      	ldr	r0, [sp, #4]
 800ae54:	3101      	adds	r1, #1
 800ae56:	f7fd febf 	bl	8008bd8 <_Balloc>
 800ae5a:	4681      	mov	r9, r0
 800ae5c:	b918      	cbnz	r0, 800ae66 <__gethex+0x3ba>
 800ae5e:	4b1a      	ldr	r3, [pc, #104]	@ (800aec8 <__gethex+0x41c>)
 800ae60:	4602      	mov	r2, r0
 800ae62:	2184      	movs	r1, #132	@ 0x84
 800ae64:	e6c5      	b.n	800abf2 <__gethex+0x146>
 800ae66:	6922      	ldr	r2, [r4, #16]
 800ae68:	3202      	adds	r2, #2
 800ae6a:	f104 010c 	add.w	r1, r4, #12
 800ae6e:	0092      	lsls	r2, r2, #2
 800ae70:	300c      	adds	r0, #12
 800ae72:	f7ff fd69 	bl	800a948 <memcpy>
 800ae76:	4621      	mov	r1, r4
 800ae78:	9801      	ldr	r0, [sp, #4]
 800ae7a:	f7fd feed 	bl	8008c58 <_Bfree>
 800ae7e:	464c      	mov	r4, r9
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae88:	6122      	str	r2, [r4, #16]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	615a      	str	r2, [r3, #20]
 800ae8e:	e7be      	b.n	800ae0e <__gethex+0x362>
 800ae90:	6922      	ldr	r2, [r4, #16]
 800ae92:	455a      	cmp	r2, fp
 800ae94:	dd0b      	ble.n	800aeae <__gethex+0x402>
 800ae96:	2101      	movs	r1, #1
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7ff fd9f 	bl	800a9dc <rshift>
 800ae9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aea2:	3701      	adds	r7, #1
 800aea4:	42bb      	cmp	r3, r7
 800aea6:	f6ff aee0 	blt.w	800ac6a <__gethex+0x1be>
 800aeaa:	2501      	movs	r5, #1
 800aeac:	e7c2      	b.n	800ae34 <__gethex+0x388>
 800aeae:	f016 061f 	ands.w	r6, r6, #31
 800aeb2:	d0fa      	beq.n	800aeaa <__gethex+0x3fe>
 800aeb4:	4453      	add	r3, sl
 800aeb6:	f1c6 0620 	rsb	r6, r6, #32
 800aeba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aebe:	f7fd ff7d 	bl	8008dbc <__hi0bits>
 800aec2:	42b0      	cmp	r0, r6
 800aec4:	dbe7      	blt.n	800ae96 <__gethex+0x3ea>
 800aec6:	e7f0      	b.n	800aeaa <__gethex+0x3fe>
 800aec8:	0800b4b2 	.word	0x0800b4b2

0800aecc <L_shift>:
 800aecc:	f1c2 0208 	rsb	r2, r2, #8
 800aed0:	0092      	lsls	r2, r2, #2
 800aed2:	b570      	push	{r4, r5, r6, lr}
 800aed4:	f1c2 0620 	rsb	r6, r2, #32
 800aed8:	6843      	ldr	r3, [r0, #4]
 800aeda:	6804      	ldr	r4, [r0, #0]
 800aedc:	fa03 f506 	lsl.w	r5, r3, r6
 800aee0:	432c      	orrs	r4, r5
 800aee2:	40d3      	lsrs	r3, r2
 800aee4:	6004      	str	r4, [r0, #0]
 800aee6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aeea:	4288      	cmp	r0, r1
 800aeec:	d3f4      	bcc.n	800aed8 <L_shift+0xc>
 800aeee:	bd70      	pop	{r4, r5, r6, pc}

0800aef0 <__match>:
 800aef0:	b530      	push	{r4, r5, lr}
 800aef2:	6803      	ldr	r3, [r0, #0]
 800aef4:	3301      	adds	r3, #1
 800aef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aefa:	b914      	cbnz	r4, 800af02 <__match+0x12>
 800aefc:	6003      	str	r3, [r0, #0]
 800aefe:	2001      	movs	r0, #1
 800af00:	bd30      	pop	{r4, r5, pc}
 800af02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800af0a:	2d19      	cmp	r5, #25
 800af0c:	bf98      	it	ls
 800af0e:	3220      	addls	r2, #32
 800af10:	42a2      	cmp	r2, r4
 800af12:	d0f0      	beq.n	800aef6 <__match+0x6>
 800af14:	2000      	movs	r0, #0
 800af16:	e7f3      	b.n	800af00 <__match+0x10>

0800af18 <__hexnan>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	680b      	ldr	r3, [r1, #0]
 800af1e:	6801      	ldr	r1, [r0, #0]
 800af20:	115e      	asrs	r6, r3, #5
 800af22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af26:	f013 031f 	ands.w	r3, r3, #31
 800af2a:	b087      	sub	sp, #28
 800af2c:	bf18      	it	ne
 800af2e:	3604      	addne	r6, #4
 800af30:	2500      	movs	r5, #0
 800af32:	1f37      	subs	r7, r6, #4
 800af34:	4682      	mov	sl, r0
 800af36:	4690      	mov	r8, r2
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800af3e:	46b9      	mov	r9, r7
 800af40:	463c      	mov	r4, r7
 800af42:	9502      	str	r5, [sp, #8]
 800af44:	46ab      	mov	fp, r5
 800af46:	784a      	ldrb	r2, [r1, #1]
 800af48:	1c4b      	adds	r3, r1, #1
 800af4a:	9303      	str	r3, [sp, #12]
 800af4c:	b342      	cbz	r2, 800afa0 <__hexnan+0x88>
 800af4e:	4610      	mov	r0, r2
 800af50:	9105      	str	r1, [sp, #20]
 800af52:	9204      	str	r2, [sp, #16]
 800af54:	f7ff fd94 	bl	800aa80 <__hexdig_fun>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d151      	bne.n	800b000 <__hexnan+0xe8>
 800af5c:	9a04      	ldr	r2, [sp, #16]
 800af5e:	9905      	ldr	r1, [sp, #20]
 800af60:	2a20      	cmp	r2, #32
 800af62:	d818      	bhi.n	800af96 <__hexnan+0x7e>
 800af64:	9b02      	ldr	r3, [sp, #8]
 800af66:	459b      	cmp	fp, r3
 800af68:	dd13      	ble.n	800af92 <__hexnan+0x7a>
 800af6a:	454c      	cmp	r4, r9
 800af6c:	d206      	bcs.n	800af7c <__hexnan+0x64>
 800af6e:	2d07      	cmp	r5, #7
 800af70:	dc04      	bgt.n	800af7c <__hexnan+0x64>
 800af72:	462a      	mov	r2, r5
 800af74:	4649      	mov	r1, r9
 800af76:	4620      	mov	r0, r4
 800af78:	f7ff ffa8 	bl	800aecc <L_shift>
 800af7c:	4544      	cmp	r4, r8
 800af7e:	d952      	bls.n	800b026 <__hexnan+0x10e>
 800af80:	2300      	movs	r3, #0
 800af82:	f1a4 0904 	sub.w	r9, r4, #4
 800af86:	f844 3c04 	str.w	r3, [r4, #-4]
 800af8a:	f8cd b008 	str.w	fp, [sp, #8]
 800af8e:	464c      	mov	r4, r9
 800af90:	461d      	mov	r5, r3
 800af92:	9903      	ldr	r1, [sp, #12]
 800af94:	e7d7      	b.n	800af46 <__hexnan+0x2e>
 800af96:	2a29      	cmp	r2, #41	@ 0x29
 800af98:	d157      	bne.n	800b04a <__hexnan+0x132>
 800af9a:	3102      	adds	r1, #2
 800af9c:	f8ca 1000 	str.w	r1, [sl]
 800afa0:	f1bb 0f00 	cmp.w	fp, #0
 800afa4:	d051      	beq.n	800b04a <__hexnan+0x132>
 800afa6:	454c      	cmp	r4, r9
 800afa8:	d206      	bcs.n	800afb8 <__hexnan+0xa0>
 800afaa:	2d07      	cmp	r5, #7
 800afac:	dc04      	bgt.n	800afb8 <__hexnan+0xa0>
 800afae:	462a      	mov	r2, r5
 800afb0:	4649      	mov	r1, r9
 800afb2:	4620      	mov	r0, r4
 800afb4:	f7ff ff8a 	bl	800aecc <L_shift>
 800afb8:	4544      	cmp	r4, r8
 800afba:	d936      	bls.n	800b02a <__hexnan+0x112>
 800afbc:	f1a8 0204 	sub.w	r2, r8, #4
 800afc0:	4623      	mov	r3, r4
 800afc2:	f853 1b04 	ldr.w	r1, [r3], #4
 800afc6:	f842 1f04 	str.w	r1, [r2, #4]!
 800afca:	429f      	cmp	r7, r3
 800afcc:	d2f9      	bcs.n	800afc2 <__hexnan+0xaa>
 800afce:	1b3b      	subs	r3, r7, r4
 800afd0:	f023 0303 	bic.w	r3, r3, #3
 800afd4:	3304      	adds	r3, #4
 800afd6:	3401      	adds	r4, #1
 800afd8:	3e03      	subs	r6, #3
 800afda:	42b4      	cmp	r4, r6
 800afdc:	bf88      	it	hi
 800afde:	2304      	movhi	r3, #4
 800afe0:	4443      	add	r3, r8
 800afe2:	2200      	movs	r2, #0
 800afe4:	f843 2b04 	str.w	r2, [r3], #4
 800afe8:	429f      	cmp	r7, r3
 800afea:	d2fb      	bcs.n	800afe4 <__hexnan+0xcc>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	b91b      	cbnz	r3, 800aff8 <__hexnan+0xe0>
 800aff0:	4547      	cmp	r7, r8
 800aff2:	d128      	bne.n	800b046 <__hexnan+0x12e>
 800aff4:	2301      	movs	r3, #1
 800aff6:	603b      	str	r3, [r7, #0]
 800aff8:	2005      	movs	r0, #5
 800affa:	b007      	add	sp, #28
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	3501      	adds	r5, #1
 800b002:	2d08      	cmp	r5, #8
 800b004:	f10b 0b01 	add.w	fp, fp, #1
 800b008:	dd06      	ble.n	800b018 <__hexnan+0x100>
 800b00a:	4544      	cmp	r4, r8
 800b00c:	d9c1      	bls.n	800af92 <__hexnan+0x7a>
 800b00e:	2300      	movs	r3, #0
 800b010:	f844 3c04 	str.w	r3, [r4, #-4]
 800b014:	2501      	movs	r5, #1
 800b016:	3c04      	subs	r4, #4
 800b018:	6822      	ldr	r2, [r4, #0]
 800b01a:	f000 000f 	and.w	r0, r0, #15
 800b01e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b022:	6020      	str	r0, [r4, #0]
 800b024:	e7b5      	b.n	800af92 <__hexnan+0x7a>
 800b026:	2508      	movs	r5, #8
 800b028:	e7b3      	b.n	800af92 <__hexnan+0x7a>
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d0dd      	beq.n	800afec <__hexnan+0xd4>
 800b030:	f1c3 0320 	rsb	r3, r3, #32
 800b034:	f04f 32ff 	mov.w	r2, #4294967295
 800b038:	40da      	lsrs	r2, r3
 800b03a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b03e:	4013      	ands	r3, r2
 800b040:	f846 3c04 	str.w	r3, [r6, #-4]
 800b044:	e7d2      	b.n	800afec <__hexnan+0xd4>
 800b046:	3f04      	subs	r7, #4
 800b048:	e7d0      	b.n	800afec <__hexnan+0xd4>
 800b04a:	2004      	movs	r0, #4
 800b04c:	e7d5      	b.n	800affa <__hexnan+0xe2>

0800b04e <__ascii_mbtowc>:
 800b04e:	b082      	sub	sp, #8
 800b050:	b901      	cbnz	r1, 800b054 <__ascii_mbtowc+0x6>
 800b052:	a901      	add	r1, sp, #4
 800b054:	b142      	cbz	r2, 800b068 <__ascii_mbtowc+0x1a>
 800b056:	b14b      	cbz	r3, 800b06c <__ascii_mbtowc+0x1e>
 800b058:	7813      	ldrb	r3, [r2, #0]
 800b05a:	600b      	str	r3, [r1, #0]
 800b05c:	7812      	ldrb	r2, [r2, #0]
 800b05e:	1e10      	subs	r0, r2, #0
 800b060:	bf18      	it	ne
 800b062:	2001      	movne	r0, #1
 800b064:	b002      	add	sp, #8
 800b066:	4770      	bx	lr
 800b068:	4610      	mov	r0, r2
 800b06a:	e7fb      	b.n	800b064 <__ascii_mbtowc+0x16>
 800b06c:	f06f 0001 	mvn.w	r0, #1
 800b070:	e7f8      	b.n	800b064 <__ascii_mbtowc+0x16>

0800b072 <_realloc_r>:
 800b072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b076:	4607      	mov	r7, r0
 800b078:	4614      	mov	r4, r2
 800b07a:	460d      	mov	r5, r1
 800b07c:	b921      	cbnz	r1, 800b088 <_realloc_r+0x16>
 800b07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b082:	4611      	mov	r1, r2
 800b084:	f7fd bd1c 	b.w	8008ac0 <_malloc_r>
 800b088:	b92a      	cbnz	r2, 800b096 <_realloc_r+0x24>
 800b08a:	f7fd fca5 	bl	80089d8 <_free_r>
 800b08e:	4625      	mov	r5, r4
 800b090:	4628      	mov	r0, r5
 800b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b096:	f000 f840 	bl	800b11a <_malloc_usable_size_r>
 800b09a:	4284      	cmp	r4, r0
 800b09c:	4606      	mov	r6, r0
 800b09e:	d802      	bhi.n	800b0a6 <_realloc_r+0x34>
 800b0a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0a4:	d8f4      	bhi.n	800b090 <_realloc_r+0x1e>
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f7fd fd09 	bl	8008ac0 <_malloc_r>
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	b908      	cbnz	r0, 800b0b6 <_realloc_r+0x44>
 800b0b2:	4645      	mov	r5, r8
 800b0b4:	e7ec      	b.n	800b090 <_realloc_r+0x1e>
 800b0b6:	42b4      	cmp	r4, r6
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	bf28      	it	cs
 800b0be:	4632      	movcs	r2, r6
 800b0c0:	f7ff fc42 	bl	800a948 <memcpy>
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f7fd fc86 	bl	80089d8 <_free_r>
 800b0cc:	e7f1      	b.n	800b0b2 <_realloc_r+0x40>

0800b0ce <__ascii_wctomb>:
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	b141      	cbz	r1, 800b0e6 <__ascii_wctomb+0x18>
 800b0d4:	2aff      	cmp	r2, #255	@ 0xff
 800b0d6:	d904      	bls.n	800b0e2 <__ascii_wctomb+0x14>
 800b0d8:	228a      	movs	r2, #138	@ 0x8a
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e0:	4770      	bx	lr
 800b0e2:	700a      	strb	r2, [r1, #0]
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	4770      	bx	lr

0800b0e8 <fiprintf>:
 800b0e8:	b40e      	push	{r1, r2, r3}
 800b0ea:	b503      	push	{r0, r1, lr}
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	4805      	ldr	r0, [pc, #20]	@ (800b108 <fiprintf+0x20>)
 800b0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f6:	6800      	ldr	r0, [r0, #0]
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	f7ff f9a1 	bl	800a440 <_vfiprintf_r>
 800b0fe:	b002      	add	sp, #8
 800b100:	f85d eb04 	ldr.w	lr, [sp], #4
 800b104:	b003      	add	sp, #12
 800b106:	4770      	bx	lr
 800b108:	20000018 	.word	0x20000018

0800b10c <abort>:
 800b10c:	b508      	push	{r3, lr}
 800b10e:	2006      	movs	r0, #6
 800b110:	f000 f834 	bl	800b17c <raise>
 800b114:	2001      	movs	r0, #1
 800b116:	f7f7 fc21 	bl	800295c <_exit>

0800b11a <_malloc_usable_size_r>:
 800b11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b11e:	1f18      	subs	r0, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	bfbc      	itt	lt
 800b124:	580b      	ldrlt	r3, [r1, r0]
 800b126:	18c0      	addlt	r0, r0, r3
 800b128:	4770      	bx	lr

0800b12a <_raise_r>:
 800b12a:	291f      	cmp	r1, #31
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4605      	mov	r5, r0
 800b130:	460c      	mov	r4, r1
 800b132:	d904      	bls.n	800b13e <_raise_r+0x14>
 800b134:	2316      	movs	r3, #22
 800b136:	6003      	str	r3, [r0, #0]
 800b138:	f04f 30ff 	mov.w	r0, #4294967295
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b140:	b112      	cbz	r2, 800b148 <_raise_r+0x1e>
 800b142:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b146:	b94b      	cbnz	r3, 800b15c <_raise_r+0x32>
 800b148:	4628      	mov	r0, r5
 800b14a:	f000 f831 	bl	800b1b0 <_getpid_r>
 800b14e:	4622      	mov	r2, r4
 800b150:	4601      	mov	r1, r0
 800b152:	4628      	mov	r0, r5
 800b154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b158:	f000 b818 	b.w	800b18c <_kill_r>
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d00a      	beq.n	800b176 <_raise_r+0x4c>
 800b160:	1c59      	adds	r1, r3, #1
 800b162:	d103      	bne.n	800b16c <_raise_r+0x42>
 800b164:	2316      	movs	r3, #22
 800b166:	6003      	str	r3, [r0, #0]
 800b168:	2001      	movs	r0, #1
 800b16a:	e7e7      	b.n	800b13c <_raise_r+0x12>
 800b16c:	2100      	movs	r1, #0
 800b16e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b172:	4620      	mov	r0, r4
 800b174:	4798      	blx	r3
 800b176:	2000      	movs	r0, #0
 800b178:	e7e0      	b.n	800b13c <_raise_r+0x12>
	...

0800b17c <raise>:
 800b17c:	4b02      	ldr	r3, [pc, #8]	@ (800b188 <raise+0xc>)
 800b17e:	4601      	mov	r1, r0
 800b180:	6818      	ldr	r0, [r3, #0]
 800b182:	f7ff bfd2 	b.w	800b12a <_raise_r>
 800b186:	bf00      	nop
 800b188:	20000018 	.word	0x20000018

0800b18c <_kill_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d07      	ldr	r5, [pc, #28]	@ (800b1ac <_kill_r+0x20>)
 800b190:	2300      	movs	r3, #0
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	4611      	mov	r1, r2
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f7f7 fbcf 	bl	800293c <_kill>
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	d102      	bne.n	800b1a8 <_kill_r+0x1c>
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	b103      	cbz	r3, 800b1a8 <_kill_r+0x1c>
 800b1a6:	6023      	str	r3, [r4, #0]
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000480 	.word	0x20000480

0800b1b0 <_getpid_r>:
 800b1b0:	f7f7 bbbc 	b.w	800292c <_getpid>

0800b1b4 <_init>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	bf00      	nop
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr

0800b1c0 <_fini>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr
