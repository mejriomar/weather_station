
mission_project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800b190  0800b190  0000c190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6e0  0800b6e0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6e0  0800b6e0  0000c6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6e8  0800b6e8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6e8  0800b6e8  0000c6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6ec  0800b6ec  0000c6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b6f0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001d4  0800b8c4  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800b8c4  0000d48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb0a  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a1  00000000  00000000  0001cd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0001f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e3  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c0f  00000000  00000000  00020d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cdf  00000000  00000000  0003997a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000967a3  00000000  00000000  0004b659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1dfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a7c  00000000  00000000  000e1e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000e68bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b174 	.word	0x0800b174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b174 	.word	0x0800b174

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 ba09 	b.w	80010cc <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9be 	b.w	80010cc <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	468e      	mov	lr, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4617      	mov	r7, r2
 8000de8:	d962      	bls.n	8000eb0 <__udivmoddi4+0xdc>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	b14e      	cbz	r6, 8000e04 <__udivmoddi4+0x30>
 8000df0:	f1c6 0320 	rsb	r3, r6, #32
 8000df4:	fa01 f806 	lsl.w	r8, r1, r6
 8000df8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dfc:	40b7      	lsls	r7, r6
 8000dfe:	ea43 0808 	orr.w	r8, r3, r8
 8000e02:	40b4      	lsls	r4, r6
 8000e04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e08:	fa1f fc87 	uxth.w	ip, r7
 8000e0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e28:	f080 80ea 	bcs.w	8001000 <__udivmoddi4+0x22c>
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f240 80e7 	bls.w	8001000 <__udivmoddi4+0x22c>
 8000e32:	3902      	subs	r1, #2
 8000e34:	443b      	add	r3, r7
 8000e36:	1a9a      	subs	r2, r3, r2
 8000e38:	b2a3      	uxth	r3, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e4a:	459c      	cmp	ip, r3
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x8e>
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e54:	f080 80d6 	bcs.w	8001004 <__udivmoddi4+0x230>
 8000e58:	459c      	cmp	ip, r3
 8000e5a:	f240 80d3 	bls.w	8001004 <__udivmoddi4+0x230>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3802      	subs	r0, #2
 8000e62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e66:	eba3 030c 	sub.w	r3, r3, ip
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11d      	cbz	r5, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40f3      	lsrs	r3, r6
 8000e70:	2200      	movs	r2, #0
 8000e72:	e9c5 3200 	strd	r3, r2, [r5]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d905      	bls.n	8000e8a <__udivmoddi4+0xb6>
 8000e7e:	b10d      	cbz	r5, 8000e84 <__udivmoddi4+0xb0>
 8000e80:	e9c5 0100 	strd	r0, r1, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4608      	mov	r0, r1
 8000e88:	e7f5      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000e8a:	fab3 f183 	clz	r1, r3
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	d146      	bne.n	8000f20 <__udivmoddi4+0x14c>
 8000e92:	4573      	cmp	r3, lr
 8000e94:	d302      	bcc.n	8000e9c <__udivmoddi4+0xc8>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	f200 8105 	bhi.w	80010a6 <__udivmoddi4+0x2d2>
 8000e9c:	1a84      	subs	r4, r0, r2
 8000e9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d0e5      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000eae:	e7e2      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	f000 8090 	beq.w	8000fd6 <__udivmoddi4+0x202>
 8000eb6:	fab2 f682 	clz	r6, r2
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	f040 80a4 	bne.w	8001008 <__udivmoddi4+0x234>
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec8:	b280      	uxth	r0, r0
 8000eca:	b2bc      	uxth	r4, r7
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ed2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eda:	fb04 f20c 	mul.w	r2, r4, ip
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x11e>
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x11c>
 8000eea:	429a      	cmp	r2, r3
 8000eec:	f200 80e0 	bhi.w	80010b0 <__udivmoddi4+0x2dc>
 8000ef0:	46c4      	mov	ip, r8
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ef8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000efc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f00:	fb02 f404 	mul.w	r4, r2, r4
 8000f04:	429c      	cmp	r4, r3
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x144>
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x142>
 8000f10:	429c      	cmp	r4, r3
 8000f12:	f200 80ca 	bhi.w	80010aa <__udivmoddi4+0x2d6>
 8000f16:	4602      	mov	r2, r0
 8000f18:	1b1b      	subs	r3, r3, r4
 8000f1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f1e:	e7a5      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f20:	f1c1 0620 	rsb	r6, r1, #32
 8000f24:	408b      	lsls	r3, r1
 8000f26:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2a:	431f      	orrs	r7, r3
 8000f2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f30:	fa20 f306 	lsr.w	r3, r0, r6
 8000f34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	fa1f fc87 	uxth.w	ip, r7
 8000f46:	fbbe f0f9 	udiv	r0, lr, r9
 8000f4a:	0c1c      	lsrs	r4, r3, #16
 8000f4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5e:	d909      	bls.n	8000f74 <__udivmoddi4+0x1a0>
 8000f60:	193c      	adds	r4, r7, r4
 8000f62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f66:	f080 809c 	bcs.w	80010a2 <__udivmoddi4+0x2ce>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f240 8099 	bls.w	80010a2 <__udivmoddi4+0x2ce>
 8000f70:	3802      	subs	r0, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	fa1f fe83 	uxth.w	lr, r3
 8000f7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f80:	fb09 4413 	mls	r4, r9, r3, r4
 8000f84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f8c:	45a4      	cmp	ip, r4
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x1ce>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f96:	f080 8082 	bcs.w	800109e <__udivmoddi4+0x2ca>
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d97f      	bls.n	800109e <__udivmoddi4+0x2ca>
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	443c      	add	r4, r7
 8000fa2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fa6:	eba4 040c 	sub.w	r4, r4, ip
 8000faa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fae:	4564      	cmp	r4, ip
 8000fb0:	4673      	mov	r3, lr
 8000fb2:	46e1      	mov	r9, ip
 8000fb4:	d362      	bcc.n	800107c <__udivmoddi4+0x2a8>
 8000fb6:	d05f      	beq.n	8001078 <__udivmoddi4+0x2a4>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x1fe>
 8000fba:	ebb8 0203 	subs.w	r2, r8, r3
 8000fbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000fc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	40cc      	lsrs	r4, r1
 8000fce:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	e74f      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000fd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fda:	0c01      	lsrs	r1, r0, #16
 8000fdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fe0:	b280      	uxth	r0, r0
 8000fe2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4638      	mov	r0, r7
 8000fea:	463c      	mov	r4, r7
 8000fec:	46b8      	mov	r8, r7
 8000fee:	46be      	mov	lr, r7
 8000ff0:	2620      	movs	r6, #32
 8000ff2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ff6:	eba2 0208 	sub.w	r2, r2, r8
 8000ffa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ffe:	e766      	b.n	8000ece <__udivmoddi4+0xfa>
 8001000:	4601      	mov	r1, r0
 8001002:	e718      	b.n	8000e36 <__udivmoddi4+0x62>
 8001004:	4610      	mov	r0, r2
 8001006:	e72c      	b.n	8000e62 <__udivmoddi4+0x8e>
 8001008:	f1c6 0220 	rsb	r2, r6, #32
 800100c:	fa2e f302 	lsr.w	r3, lr, r2
 8001010:	40b7      	lsls	r7, r6
 8001012:	40b1      	lsls	r1, r6
 8001014:	fa20 f202 	lsr.w	r2, r0, r2
 8001018:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800101c:	430a      	orrs	r2, r1
 800101e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001022:	b2bc      	uxth	r4, r7
 8001024:	fb0e 3318 	mls	r3, lr, r8, r3
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800102e:	fb08 f904 	mul.w	r9, r8, r4
 8001032:	40b0      	lsls	r0, r6
 8001034:	4589      	cmp	r9, r1
 8001036:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800103a:	b280      	uxth	r0, r0
 800103c:	d93e      	bls.n	80010bc <__udivmoddi4+0x2e8>
 800103e:	1879      	adds	r1, r7, r1
 8001040:	f108 3cff 	add.w	ip, r8, #4294967295
 8001044:	d201      	bcs.n	800104a <__udivmoddi4+0x276>
 8001046:	4589      	cmp	r9, r1
 8001048:	d81f      	bhi.n	800108a <__udivmoddi4+0x2b6>
 800104a:	eba1 0109 	sub.w	r1, r1, r9
 800104e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001052:	fb09 f804 	mul.w	r8, r9, r4
 8001056:	fb0e 1119 	mls	r1, lr, r9, r1
 800105a:	b292      	uxth	r2, r2
 800105c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001060:	4542      	cmp	r2, r8
 8001062:	d229      	bcs.n	80010b8 <__udivmoddi4+0x2e4>
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	f109 31ff 	add.w	r1, r9, #4294967295
 800106a:	d2c4      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 800106c:	4542      	cmp	r2, r8
 800106e:	d2c2      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 8001070:	f1a9 0102 	sub.w	r1, r9, #2
 8001074:	443a      	add	r2, r7
 8001076:	e7be      	b.n	8000ff6 <__udivmoddi4+0x222>
 8001078:	45f0      	cmp	r8, lr
 800107a:	d29d      	bcs.n	8000fb8 <__udivmoddi4+0x1e4>
 800107c:	ebbe 0302 	subs.w	r3, lr, r2
 8001080:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001084:	3801      	subs	r0, #1
 8001086:	46e1      	mov	r9, ip
 8001088:	e796      	b.n	8000fb8 <__udivmoddi4+0x1e4>
 800108a:	eba7 0909 	sub.w	r9, r7, r9
 800108e:	4449      	add	r1, r9
 8001090:	f1a8 0c02 	sub.w	ip, r8, #2
 8001094:	fbb1 f9fe 	udiv	r9, r1, lr
 8001098:	fb09 f804 	mul.w	r8, r9, r4
 800109c:	e7db      	b.n	8001056 <__udivmoddi4+0x282>
 800109e:	4673      	mov	r3, lr
 80010a0:	e77f      	b.n	8000fa2 <__udivmoddi4+0x1ce>
 80010a2:	4650      	mov	r0, sl
 80010a4:	e766      	b.n	8000f74 <__udivmoddi4+0x1a0>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e6fd      	b.n	8000ea6 <__udivmoddi4+0xd2>
 80010aa:	443b      	add	r3, r7
 80010ac:	3a02      	subs	r2, #2
 80010ae:	e733      	b.n	8000f18 <__udivmoddi4+0x144>
 80010b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b4:	443b      	add	r3, r7
 80010b6:	e71c      	b.n	8000ef2 <__udivmoddi4+0x11e>
 80010b8:	4649      	mov	r1, r9
 80010ba:	e79c      	b.n	8000ff6 <__udivmoddi4+0x222>
 80010bc:	eba1 0109 	sub.w	r1, r1, r9
 80010c0:	46c4      	mov	ip, r8
 80010c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c6:	fb09 f804 	mul.w	r8, r9, r4
 80010ca:	e7c4      	b.n	8001056 <__udivmoddi4+0x282>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010d6:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <MX_ADC1_Init+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_ADC1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001102:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <MX_ADC1_Init+0x6c>)
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_ADC1_Init+0x64>)
 800110e:	2203      	movs	r2, #3
 8001110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_ADC1_Init+0x64>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_ADC1_Init+0x64>)
 8001122:	f001 fdf7 	bl	8002d14 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 800112c:	f001 fb6c 	bl	8002808 <Error_Handler>
  // }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200001f0 	.word	0x200001f0
 8001138:	40012000 	.word	0x40012000
 800113c:	0f000001 	.word	0x0f000001

08001140 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_ADC_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d127      	bne.n	80011b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_ADC_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800119a:	2313      	movs	r3, #19
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_ADC_MspInit+0x84>)
 80011ae:	f002 fb47 	bl	8003840 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	@ 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40012000 	.word	0x40012000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <get_adc_hundle>:
  }
}

/* USER CODE BEGIN 1 */
ADC_HandleTypeDef *get_adc_hundle(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return &hadc1;
 80011cc:	4b02      	ldr	r3, [pc, #8]	@ (80011d8 <get_adc_hundle+0x10>)
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	200001f0 	.word	0x200001f0

080011dc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2203      	movs	r2, #3
 8001200:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	715a      	strb	r2, [r3, #5]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af04      	add	r7, sp, #16
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	460b      	mov	r3, r1
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	b29a      	uxth	r2, r3
 8001232:	8af9      	ldrh	r1, [r7, #22]
 8001234:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2302      	movs	r3, #2
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	f003 f807 	bl	8004258 <HAL_I2C_Mem_Read>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10c      	bne.n	800126a <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001250:	7d7b      	ldrb	r3, [r7, #21]
 8001252:	b21b      	sxth	r3, r3
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7d3b      	ldrb	r3, [r7, #20]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
		return true;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <read_register16+0x58>
	} else
		return false;
 800126a:	2300      	movs	r3, #0

}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b08b      	sub	sp, #44	@ 0x2c
 8001278:	af04      	add	r7, sp, #16
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	461a      	mov	r2, r3
 8001280:	460b      	mov	r3, r1
 8001282:	72fb      	strb	r3, [r7, #11]
 8001284:	4613      	mov	r3, r2
 8001286:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b29a      	uxth	r2, r3
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	b29b      	uxth	r3, r3
 800129c:	8af9      	ldrh	r1, [r7, #22]
 800129e:	f241 3488 	movw	r4, #5000	@ 0x1388
 80012a2:	9402      	str	r4, [sp, #8]
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	f002 ffd4 	bl	8004258 <HAL_I2C_Mem_Read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <read_data+0x46>
		return 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <read_data+0x48>
	else
		return 1;
 80012ba:	2301      	movs	r3, #1

}
 80012bc:	4618      	mov	r0, r3
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}

080012c4 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	461a      	mov	r2, r3
 80012d0:	2188      	movs	r1, #136	@ 0x88
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff9e 	bl	8001214 <read_register16>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06f      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3302      	adds	r3, #2
 80012e2:	461a      	mov	r2, r3
 80012e4:	218a      	movs	r1, #138	@ 0x8a
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff94 	bl	8001214 <read_register16>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d065      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3304      	adds	r3, #4
 80012f6:	461a      	mov	r2, r3
 80012f8:	218c      	movs	r1, #140	@ 0x8c
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff8a 	bl	8001214 <read_register16>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d05b      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3306      	adds	r3, #6
 800130a:	461a      	mov	r2, r3
 800130c:	218e      	movs	r1, #142	@ 0x8e
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff80 	bl	8001214 <read_register16>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d051      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3308      	adds	r3, #8
 800131e:	461a      	mov	r2, r3
 8001320:	2190      	movs	r1, #144	@ 0x90
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff76 	bl	8001214 <read_register16>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d047      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	330a      	adds	r3, #10
 8001332:	461a      	mov	r2, r3
 8001334:	2192      	movs	r1, #146	@ 0x92
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff6c 	bl	8001214 <read_register16>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03d      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	330c      	adds	r3, #12
 8001346:	461a      	mov	r2, r3
 8001348:	2194      	movs	r1, #148	@ 0x94
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff62 	bl	8001214 <read_register16>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d033      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	330e      	adds	r3, #14
 800135a:	461a      	mov	r2, r3
 800135c:	2196      	movs	r1, #150	@ 0x96
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff58 	bl	8001214 <read_register16>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d029      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3310      	adds	r3, #16
 800136e:	461a      	mov	r2, r3
 8001370:	2198      	movs	r1, #152	@ 0x98
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff4e 	bl	8001214 <read_register16>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d01f      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3312      	adds	r3, #18
 8001382:	461a      	mov	r2, r3
 8001384:	219a      	movs	r1, #154	@ 0x9a
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff44 	bl	8001214 <read_register16>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3314      	adds	r3, #20
 8001396:	461a      	mov	r2, r3
 8001398:	219c      	movs	r1, #156	@ 0x9c
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff3a 	bl	8001214 <read_register16>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013aa:	461a      	mov	r2, r3
 80013ac:	219e      	movs	r1, #158	@ 0x9e
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff30 	bl	8001214 <read_register16>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <read_calibration_data+0xfa>

		return true;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <read_calibration_data+0xfc>
	}

	return false;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f103 0218 	add.w	r2, r3, #24
 80013d6:	2301      	movs	r3, #1
 80013d8:	21a1      	movs	r1, #161	@ 0xa1
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff4a 	bl	8001274 <read_data>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d14c      	bne.n	8001480 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	331a      	adds	r3, #26
 80013ea:	461a      	mov	r2, r3
 80013ec:	21e1      	movs	r1, #225	@ 0xe1
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff10 	bl	8001214 <read_register16>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d042      	beq.n	8001480 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f103 021c 	add.w	r2, r3, #28
 8001400:	2301      	movs	r3, #1
 8001402:	21e3      	movs	r1, #227	@ 0xe3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff35 	bl	8001274 <read_data>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d137      	bne.n	8001480 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8001410:	f107 030e 	add.w	r3, r7, #14
 8001414:	461a      	mov	r2, r3
 8001416:	21e4      	movs	r1, #228	@ 0xe4
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fefb 	bl	8001214 <read_register16>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d02d      	beq.n	8001480 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	461a      	mov	r2, r3
 800142a:	21e5      	movs	r1, #229	@ 0xe5
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fef1 	bl	8001214 <read_register16>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800143e:	2301      	movs	r3, #1
 8001440:	21e7      	movs	r1, #231	@ 0xe7
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff16 	bl	8001274 <read_data>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	b21b      	sxth	r3, r3
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	b21b      	sxth	r3, r3
 8001456:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800145a:	b21a      	sxth	r2, r3
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	121b      	asrs	r3, r3, #8
 8001460:	b21b      	sxth	r3, r3
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001470:	89bb      	ldrh	r3, [r7, #12]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	b29b      	uxth	r3, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	841a      	strh	r2, [r3, #32]

		return true;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <read_hum_calibration_data+0xba>
	}

	return false;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800148a:	b580      	push	{r7, lr}
 800148c:	b088      	sub	sp, #32
 800148e:	af04      	add	r7, sp, #16
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	70fb      	strb	r3, [r7, #3]
 8001496:	4613      	mov	r3, r2
 8001498:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	89f9      	ldrh	r1, [r7, #14]
 80014ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	1cbb      	adds	r3, r7, #2
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	f002 fdd2 	bl	8004064 <HAL_I2C_Mem_Write>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <write_register8+0x40>
		return false;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <write_register8+0x42>
	else
		return true;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014e2:	2b76      	cmp	r3, #118	@ 0x76
 80014e4:	d005      	beq.n	80014f2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014ea:	2b77      	cmp	r3, #119	@ 0x77
 80014ec:	d001      	beq.n	80014f2 <bmp280_init+0x1e>

		return false;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e09d      	b.n	800162e <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80014f8:	2301      	movs	r3, #1
 80014fa:	21d0      	movs	r1, #208	@ 0xd0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff feb9 	bl	8001274 <read_data>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <bmp280_init+0x38>
		return false;
 8001508:	2300      	movs	r3, #0
 800150a:	e090      	b.n	800162e <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001512:	2b58      	cmp	r3, #88	@ 0x58
 8001514:	d006      	beq.n	8001524 <bmp280_init+0x50>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800151c:	2b60      	cmp	r3, #96	@ 0x60
 800151e:	d001      	beq.n	8001524 <bmp280_init+0x50>

		return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e084      	b.n	800162e <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001524:	22b6      	movs	r2, #182	@ 0xb6
 8001526:	21e0      	movs	r1, #224	@ 0xe0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffae 	bl	800148a <write_register8>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <bmp280_init+0x64>
		return false;
 8001534:	2300      	movs	r3, #0
 8001536:	e07a      	b.n	800162e <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	2301      	movs	r3, #1
 800153e:	21f3      	movs	r1, #243	@ 0xf3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fe97 	bl	8001274 <read_data>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f5      	bne.n	8001538 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800154c:	7b3b      	ldrb	r3, [r7, #12]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff feb4 	bl	80012c4 <read_calibration_data>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d100      	bne.n	800156a <bmp280_init+0x96>
 8001568:	e001      	b.n	800156e <bmp280_init+0x9a>
		return false;
 800156a:	2300      	movs	r3, #0
 800156c:	e05f      	b.n	800162e <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001574:	2b60      	cmp	r3, #96	@ 0x60
 8001576:	d10a      	bne.n	800158e <bmp280_init+0xba>
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff25 	bl	80013c8 <read_hum_calibration_data>
 800157e:	4603      	mov	r3, r0
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <bmp280_init+0xba>
		return false;
 800158a:	2300      	movs	r3, #0
 800158c:	e04f      	b.n	800162e <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	795b      	ldrb	r3, [r3, #5]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	b25a      	sxtb	r2, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	b25b      	sxtb	r3, r3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	461a      	mov	r2, r3
 80015ac:	21f5      	movs	r1, #245	@ 0xf5
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff6b 	bl	800148a <write_register8>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <bmp280_init+0xea>
		return false;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e037      	b.n	800162e <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d102      	bne.n	80015cc <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	015b      	lsls	r3, r3, #5
 80015d4:	b25a      	sxtb	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015ee:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80015f6:	2b60      	cmp	r3, #96	@ 0x60
 80015f8:	d10d      	bne.n	8001616 <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	791b      	ldrb	r3, [r3, #4]
 80015fe:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	461a      	mov	r2, r3
 8001604:	21f2      	movs	r1, #242	@ 0xf2
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff3f 	bl	800148a <write_register8>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <bmp280_init+0x142>
			return false;
 8001612:	2300      	movs	r3, #0
 8001614:	e00b      	b.n	800162e <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	461a      	mov	r2, r3
 800161a:	21f4      	movs	r1, #244	@ 0xf4
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff34 	bl	800148a <write_register8>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <bmp280_init+0x158>
		return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e000      	b.n	800162e <bmp280_init+0x15a>
	}

	return true;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	10da      	asrs	r2, r3, #3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001654:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001658:	12db      	asrs	r3, r3, #11
 800165a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	111b      	asrs	r3, r3, #4
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	8812      	ldrh	r2, [r2, #0]
 8001664:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	1112      	asrs	r2, r2, #4
 800166a:	68f9      	ldr	r1, [r7, #12]
 800166c:	8809      	ldrh	r1, [r1, #0]
 800166e:	1a52      	subs	r2, r2, r1
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001680:	139b      	asrs	r3, r3, #14
 8001682:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	441a      	add	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3380      	adds	r3, #128	@ 0x80
 800169a:	121b      	asrs	r3, r3, #8
}
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80016a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ac:	b0cc      	sub	sp, #304	@ 0x130
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80016b4:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80016b8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80016bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016c0:	17da      	asrs	r2, r3, #31
 80016c2:	461c      	mov	r4, r3
 80016c4:	4615      	mov	r5, r2
 80016c6:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80016ca:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016ce:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80016d2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016da:	fb03 f102 	mul.w	r1, r3, r2
 80016de:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	18ca      	adds	r2, r1, r3
 80016ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016f0:	fba3 8903 	umull	r8, r9, r3, r3
 80016f4:	eb02 0309 	add.w	r3, r2, r9
 80016f8:	4699      	mov	r9, r3
 80016fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001702:	b21b      	sxth	r3, r3
 8001704:	17da      	asrs	r2, r3, #31
 8001706:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800170a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800170e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001712:	4603      	mov	r3, r0
 8001714:	fb03 f209 	mul.w	r2, r3, r9
 8001718:	460b      	mov	r3, r1
 800171a:	fb08 f303 	mul.w	r3, r8, r3
 800171e:	4413      	add	r3, r2
 8001720:	4602      	mov	r2, r0
 8001722:	fba8 1202 	umull	r1, r2, r8, r2
 8001726:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800172a:	460a      	mov	r2, r1
 800172c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001730:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800173a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800173e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001742:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800174a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800174e:	b21b      	sxth	r3, r3
 8001750:	17da      	asrs	r2, r3, #31
 8001752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001756:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800175a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800175e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001762:	462a      	mov	r2, r5
 8001764:	fb02 f203 	mul.w	r2, r2, r3
 8001768:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800176c:	4621      	mov	r1, r4
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	441a      	add	r2, r3
 8001774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001778:	4621      	mov	r1, r4
 800177a:	fba3 1301 	umull	r1, r3, r3, r1
 800177e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001782:	460b      	mov	r3, r1
 8001784:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800178c:	18d3      	adds	r3, r2, r3
 800178e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800179e:	462b      	mov	r3, r5
 80017a0:	0459      	lsls	r1, r3, #17
 80017a2:	4623      	mov	r3, r4
 80017a4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80017a8:	4623      	mov	r3, r4
 80017aa:	0458      	lsls	r0, r3, #17
 80017ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b0:	1814      	adds	r4, r2, r0
 80017b2:	643c      	str	r4, [r7, #64]	@ 0x40
 80017b4:	414b      	adcs	r3, r1
 80017b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80017bc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80017c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	17da      	asrs	r2, r3, #31
 80017cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80017d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80017d4:	f04f 0000 	mov.w	r0, #0
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017e0:	00d9      	lsls	r1, r3, #3
 80017e2:	2000      	movs	r0, #0
 80017e4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017e8:	1814      	adds	r4, r2, r0
 80017ea:	63bc      	str	r4, [r7, #56]	@ 0x38
 80017ec:	414b      	adcs	r3, r1
 80017ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017f0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80017f4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017f8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001800:	fb03 f102 	mul.w	r1, r3, r2
 8001804:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001808:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	18ca      	adds	r2, r1, r3
 8001812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001816:	fba3 1303 	umull	r1, r3, r3, r3
 800181a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800181e:	460b      	mov	r3, r1
 8001820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001828:	18d3      	adds	r3, r2, r3
 800182a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800182e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001832:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001836:	b21b      	sxth	r3, r3
 8001838:	17da      	asrs	r2, r3, #31
 800183a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800183e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001842:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001846:	462b      	mov	r3, r5
 8001848:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800184c:	4642      	mov	r2, r8
 800184e:	fb02 f203 	mul.w	r2, r2, r3
 8001852:	464b      	mov	r3, r9
 8001854:	4621      	mov	r1, r4
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	4622      	mov	r2, r4
 800185e:	4641      	mov	r1, r8
 8001860:	fba2 1201 	umull	r1, r2, r2, r1
 8001864:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001868:	460a      	mov	r2, r1
 800186a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800186e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001872:	4413      	add	r3, r2
 8001874:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001878:	f04f 0000 	mov.w	r0, #0
 800187c:	f04f 0100 	mov.w	r1, #0
 8001880:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001884:	4623      	mov	r3, r4
 8001886:	0a18      	lsrs	r0, r3, #8
 8001888:	462b      	mov	r3, r5
 800188a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800188e:	462b      	mov	r3, r5
 8001890:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800189a:	b21b      	sxth	r3, r3
 800189c:	17da      	asrs	r2, r3, #31
 800189e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018a2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018aa:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80018ae:	464a      	mov	r2, r9
 80018b0:	fb02 f203 	mul.w	r2, r2, r3
 80018b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018b8:	4644      	mov	r4, r8
 80018ba:	fb04 f303 	mul.w	r3, r4, r3
 80018be:	441a      	add	r2, r3
 80018c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018c4:	4644      	mov	r4, r8
 80018c6:	fba3 4304 	umull	r4, r3, r3, r4
 80018ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018ce:	4623      	mov	r3, r4
 80018d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80018d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80018ea:	464c      	mov	r4, r9
 80018ec:	0323      	lsls	r3, r4, #12
 80018ee:	4644      	mov	r4, r8
 80018f0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018f4:	4644      	mov	r4, r8
 80018f6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018f8:	1884      	adds	r4, r0, r2
 80018fa:	633c      	str	r4, [r7, #48]	@ 0x30
 80018fc:	eb41 0303 	adc.w	r3, r1, r3
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
 8001902:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001906:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800190a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800190e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001912:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001916:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800191a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191e:	88db      	ldrh	r3, [r3, #6]
 8001920:	b29b      	uxth	r3, r3
 8001922:	2200      	movs	r2, #0
 8001924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001928:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800192c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001930:	462b      	mov	r3, r5
 8001932:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001936:	4642      	mov	r2, r8
 8001938:	fb02 f203 	mul.w	r2, r2, r3
 800193c:	464b      	mov	r3, r9
 800193e:	4621      	mov	r1, r4
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	4622      	mov	r2, r4
 8001948:	4641      	mov	r1, r8
 800194a:	fba2 1201 	umull	r1, r2, r2, r1
 800194e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001952:	460a      	mov	r2, r1
 8001954:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001958:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800195c:	4413      	add	r3, r2
 800195e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800196e:	4629      	mov	r1, r5
 8001970:	104a      	asrs	r2, r1, #1
 8001972:	4629      	mov	r1, r5
 8001974:	17cb      	asrs	r3, r1, #31
 8001976:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800197a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800197e:	4313      	orrs	r3, r2
 8001980:	d101      	bne.n	8001986 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001982:	2300      	movs	r3, #0
 8001984:	e148      	b.n	8001c18 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001986:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800198a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001994:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001998:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800199c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019a0:	105b      	asrs	r3, r3, #1
 80019a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80019a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019aa:	07db      	lsls	r3, r3, #31
 80019ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019b0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019b4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80019b8:	4621      	mov	r1, r4
 80019ba:	1a89      	subs	r1, r1, r2
 80019bc:	67b9      	str	r1, [r7, #120]	@ 0x78
 80019be:	4629      	mov	r1, r5
 80019c0:	eb61 0303 	sbc.w	r3, r1, r3
 80019c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80019ca:	4622      	mov	r2, r4
 80019cc:	462b      	mov	r3, r5
 80019ce:	1891      	adds	r1, r2, r2
 80019d0:	6239      	str	r1, [r7, #32]
 80019d2:	415b      	adcs	r3, r3
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019da:	4621      	mov	r1, r4
 80019dc:	1851      	adds	r1, r2, r1
 80019de:	61b9      	str	r1, [r7, #24]
 80019e0:	4629      	mov	r1, r5
 80019e2:	414b      	adcs	r3, r1
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019f2:	4649      	mov	r1, r9
 80019f4:	018b      	lsls	r3, r1, #6
 80019f6:	4641      	mov	r1, r8
 80019f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fc:	4641      	mov	r1, r8
 80019fe:	018a      	lsls	r2, r1, #6
 8001a00:	4641      	mov	r1, r8
 8001a02:	1889      	adds	r1, r1, r2
 8001a04:	6139      	str	r1, [r7, #16]
 8001a06:	4649      	mov	r1, r9
 8001a08:	eb43 0101 	adc.w	r1, r3, r1
 8001a0c:	6179      	str	r1, [r7, #20]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	008b      	lsls	r3, r1, #2
 8001a1e:	4641      	mov	r1, r8
 8001a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a24:	4641      	mov	r1, r8
 8001a26:	008a      	lsls	r2, r1, #2
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4622      	mov	r2, r4
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	460b      	mov	r3, r1
 8001a36:	462a      	mov	r2, r5
 8001a38:	eb42 0303 	adc.w	r3, r2, r3
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	008b      	lsls	r3, r1, #2
 8001a4e:	4641      	mov	r1, r8
 8001a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a54:	4641      	mov	r1, r8
 8001a56:	008a      	lsls	r2, r1, #2
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4622      	mov	r2, r4
 8001a60:	189b      	adds	r3, r3, r2
 8001a62:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a64:	462b      	mov	r3, r5
 8001a66:	460a      	mov	r2, r1
 8001a68:	eb42 0303 	adc.w	r3, r2, r3
 8001a6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a6e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a72:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a76:	f7ff f90f 	bl	8000c98 <__aeabi_ldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a86:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	17da      	asrs	r2, r3, #31
 8001a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a96:	f04f 0000 	mov.w	r0, #0
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	0b50      	lsrs	r0, r2, #13
 8001aa0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001aa4:	1359      	asrs	r1, r3, #13
 8001aa6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001aaa:	462b      	mov	r3, r5
 8001aac:	fb00 f203 	mul.w	r2, r0, r3
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	fb03 f301 	mul.w	r3, r3, r1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4622      	mov	r2, r4
 8001aba:	fba2 1200 	umull	r1, r2, r2, r0
 8001abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001ac8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001acc:	4413      	add	r3, r2
 8001ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001ad2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0b50      	lsrs	r0, r2, #13
 8001ae0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ae4:	1359      	asrs	r1, r3, #13
 8001ae6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001aea:	462b      	mov	r3, r5
 8001aec:	fb00 f203 	mul.w	r2, r0, r3
 8001af0:	4623      	mov	r3, r4
 8001af2:	fb03 f301 	mul.w	r3, r3, r1
 8001af6:	4413      	add	r3, r2
 8001af8:	4622      	mov	r2, r4
 8001afa:	fba2 1200 	umull	r1, r2, r2, r0
 8001afe:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001b02:	460a      	mov	r2, r1
 8001b04:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b1e:	4621      	mov	r1, r4
 8001b20:	0e4a      	lsrs	r2, r1, #25
 8001b22:	4629      	mov	r1, r5
 8001b24:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b28:	4629      	mov	r1, r5
 8001b2a:	164b      	asrs	r3, r1, #25
 8001b2c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b34:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	17da      	asrs	r2, r3, #31
 8001b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b48:	462a      	mov	r2, r5
 8001b4a:	fb02 f203 	mul.w	r2, r2, r3
 8001b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b52:	4621      	mov	r1, r4
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b5e:	4621      	mov	r1, r4
 8001b60:	fba2 1201 	umull	r1, r2, r2, r1
 8001b64:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b68:	460a      	mov	r2, r1
 8001b6a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b6e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b72:	4413      	add	r3, r2
 8001b74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b84:	4621      	mov	r1, r4
 8001b86:	0cca      	lsrs	r2, r1, #19
 8001b88:	4629      	mov	r1, r5
 8001b8a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b8e:	4629      	mov	r1, r5
 8001b90:	14cb      	asrs	r3, r1, #19
 8001b92:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b96:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b9a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b9e:	1884      	adds	r4, r0, r2
 8001ba0:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001ba2:	eb41 0303 	adc.w	r3, r1, r3
 8001ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ba8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bac:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	1889      	adds	r1, r1, r2
 8001bb4:	6539      	str	r1, [r7, #80]	@ 0x50
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	eb43 0101 	adc.w	r1, r3, r1
 8001bbc:	6579      	str	r1, [r7, #84]	@ 0x54
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001bca:	4623      	mov	r3, r4
 8001bcc:	0a18      	lsrs	r0, r3, #8
 8001bce:	462b      	mov	r3, r5
 8001bd0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	1219      	asrs	r1, r3, #8
 8001bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bdc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001be6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001bf4:	464c      	mov	r4, r9
 8001bf6:	0123      	lsls	r3, r4, #4
 8001bf8:	4644      	mov	r4, r8
 8001bfa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bfe:	4644      	mov	r4, r8
 8001c00:	0122      	lsls	r2, r4, #4
 8001c02:	1884      	adds	r4, r0, r2
 8001c04:	603c      	str	r4, [r7, #0]
 8001c06:	eb41 0303 	adc.w	r3, r1, r3
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c10:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001c14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c24 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c36:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	039a      	lsls	r2, r3, #14
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c42:	051b      	lsls	r3, r3, #20
 8001c44:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c5a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c62:	4611      	mov	r1, r2
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	fb01 f202 	mul.w	r2, r1, r2
 8001c6a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	7f09      	ldrb	r1, [r1, #28]
 8001c70:	4608      	mov	r0, r1
 8001c72:	6979      	ldr	r1, [r7, #20]
 8001c74:	fb00 f101 	mul.w	r1, r0, r1
 8001c78:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c7a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c7e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c82:	1292      	asrs	r2, r2, #10
 8001c84:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c8e:	fb01 f202 	mul.w	r2, r1, r2
 8001c92:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c96:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	13db      	asrs	r3, r3, #15
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	13d2      	asrs	r2, r2, #15
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	7e12      	ldrb	r2, [r2, #24]
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cc2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001cca:	bfa8      	it	ge
 8001ccc:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001cd0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	131b      	asrs	r3, r3, #12
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08c      	sub	sp, #48	@ 0x30
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cf6:	2b60      	cmp	r3, #96	@ 0x60
 8001cf8:	d007      	beq.n	8001d0a <bmp280_read_fixed+0x28>
		if (humidity)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <bmp280_read_fixed+0x32>
 8001d10:	2308      	movs	r3, #8
 8001d12:	e000      	b.n	8001d16 <bmp280_read_fixed+0x34>
 8001d14:	2306      	movs	r3, #6
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f107 0218 	add.w	r2, r7, #24
 8001d20:	21f7      	movs	r1, #247	@ 0xf7
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff faa6 	bl	8001274 <read_data>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <bmp280_read_fixed+0x50>
		return false;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e038      	b.n	8001da4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001d32:	7e3b      	ldrb	r3, [r7, #24]
 8001d34:	031a      	lsls	r2, r3, #12
 8001d36:	7e7b      	ldrb	r3, [r7, #25]
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	7eba      	ldrb	r2, [r7, #26]
 8001d3e:	0912      	lsrs	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	4313      	orrs	r3, r2
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001d46:	7efb      	ldrb	r3, [r7, #27]
 8001d48:	031a      	lsls	r2, r3, #12
 8001d4a:	7f3b      	ldrb	r3, [r7, #28]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	7f7a      	ldrb	r2, [r7, #29]
 8001d52:	0912      	lsrs	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	4313      	orrs	r3, r2
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fc67 	bl	8001636 <compensate_temperature>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	461a      	mov	r2, r3
 8001d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fc97 	bl	80016a8 <compensate_pressure>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d86:	7fbb      	ldrb	r3, [r7, #30]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	7ffa      	ldrb	r2, [r7, #31]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	461a      	mov	r2, r3
 8001d94:	6a39      	ldr	r1, [r7, #32]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff ff44 	bl	8001c24 <compensate_humidity>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3730      	adds	r7, #48	@ 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <bmp280_read_float+0x1a>
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	e000      	b.n	8001dc8 <bmp280_read_float+0x1c>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f107 0218 	add.w	r2, r7, #24
 8001dcc:	f107 011c 	add.w	r1, r7, #28
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff ff86 	bl	8001ce2 <bmp280_read_fixed>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d028      	beq.n	8001e2e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e38 <bmp280_read_float+0x8c>
 8001dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dfe:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e3c <bmp280_read_float+0x90>
 8001e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001e40 <bmp280_read_float+0x94>
 8001e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <bmp280_read_float+0x84>
	}

	return false;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	42c80000 	.word	0x42c80000
 8001e3c:	43800000 	.word	0x43800000
 8001e40:	44800000 	.word	0x44800000

08001e44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
 8001e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a31      	ldr	r2, [pc, #196]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_GPIO_Init+0xe4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8001ed0:	4816      	ldr	r0, [pc, #88]	@ (8001f2c <MX_GPIO_Init+0xe8>)
 8001ed2:	f001 fe39 	bl	8003b48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eda:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4811      	ldr	r0, [pc, #68]	@ (8001f30 <MX_GPIO_Init+0xec>)
 8001eec:	f001 fca8 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001ef0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001ef4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4808      	ldr	r0, [pc, #32]	@ (8001f2c <MX_GPIO_Init+0xe8>)
 8001f0a:	f001 fc99 	bl	8003840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	2006      	movs	r0, #6
 8001f14:	f001 fbcb 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f18:	2006      	movs	r0, #6
 8001f1a:	f001 fbe4 	bl	80036e6 <HAL_NVIC_EnableIRQ>

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40020000 	.word	0x40020000

08001f34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f3a:	4a13      	ldr	r2, [pc, #76]	@ (8001f88 <MX_I2C1_Init+0x54>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <MX_I2C1_Init+0x58>)
 8001f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <MX_I2C1_Init+0x50>)
 8001f72:	f001 fe35 	bl	8003be0 <HAL_I2C_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f7c:	f000 fc44 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000238 	.word	0x20000238
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	000186a0 	.word	0x000186a0

08001f90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	@ 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	@ (8002014 <HAL_I2C_MspInit+0x84>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12b      	bne.n	800200a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a17      	ldr	r2, [pc, #92]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fce:	23c0      	movs	r3, #192	@ 0xc0
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd2:	2312      	movs	r3, #18
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480c      	ldr	r0, [pc, #48]	@ (800201c <HAL_I2C_MspInit+0x8c>)
 8001fea:	f001 fc29 	bl	8003840 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8001ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_I2C_MspInit+0x88>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800200a:	bf00      	nop
 800200c:	3728      	adds	r7, #40	@ 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40005400 	.word	0x40005400
 8002018:	40023800 	.word	0x40023800
 800201c:	40020400 	.word	0x40020400

08002020 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
int32_t lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
	  int32_t status = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f023 030f 	bic.w	r3, r3, #15
 8002036:	74fb      	strb	r3, [r7, #19]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	74bb      	strb	r3, [r7, #18]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	f043 030c 	orr.w	r3, r3, #12
 8002044:	b2db      	uxtb	r3, r3
 8002046:	733b      	strb	r3, [r7, #12]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	b2db      	uxtb	r3, r3
 8002050:	737b      	strb	r3, [r7, #13]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8002052:	7cbb      	ldrb	r3, [r7, #18]
 8002054:	f043 030c 	orr.w	r3, r3, #12
 8002058:	b2db      	uxtb	r3, r3
 800205a:	73bb      	strb	r3, [r7, #14]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 800205c:	7cbb      	ldrb	r3, [r7, #18]
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	b2db      	uxtb	r3, r3
 8002064:	73fb      	strb	r3, [r7, #15]

    if(HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	791b      	ldrb	r3, [r3, #4]
 800206e:	4619      	mov	r1, r3
 8002070:	f107 020c 	add.w	r2, r7, #12
 8002074:	2364      	movs	r3, #100	@ 0x64
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2304      	movs	r3, #4
 800207a:	f001 fef5 	bl	8003e68 <HAL_I2C_Master_Transmit>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <lcd_send_cmd+0x6a>
		{
			status = -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	617b      	str	r3, [r7, #20]
		}
		return status;
 800208a:	697b      	ldr	r3, [r7, #20]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
int32_t lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
		int32_t status = 0; 
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f023 030f 	bic.w	r3, r3, #15
 80020aa:	74fb      	strb	r3, [r7, #19]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	74bb      	strb	r3, [r7, #18]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	f043 030d 	orr.w	r3, r3, #13
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	733b      	strb	r3, [r7, #12]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	f043 0309 	orr.w	r3, r3, #9
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	737b      	strb	r3, [r7, #13]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80020c6:	7cbb      	ldrb	r3, [r7, #18]
 80020c8:	f043 030d 	orr.w	r3, r3, #13
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	73bb      	strb	r3, [r7, #14]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80020d0:	7cbb      	ldrb	r3, [r7, #18]
 80020d2:	f043 0309 	orr.w	r3, r3, #9
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	73fb      	strb	r3, [r7, #15]

    if(HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	791b      	ldrb	r3, [r3, #4]
 80020e2:	4619      	mov	r1, r3
 80020e4:	f107 020c 	add.w	r2, r7, #12
 80020e8:	2364      	movs	r3, #100	@ 0x64
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2304      	movs	r3, #4
 80020ee:	f001 febb 	bl	8003e68 <HAL_I2C_Master_Transmit>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <lcd_send_data+0x6a>
		{
			status = -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	617b      	str	r3, [r7, #20]
		}
		return status;
 80020fe:	697b      	ldr	r3, [r7, #20]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8002110:	2180      	movs	r1, #128	@ 0x80
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff84 	bl	8002020 <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e006      	b.n	800212c <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 800211e:	2120      	movs	r1, #32
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ffb7 	bl	8002094 <lcd_send_data>
    for (int i = 0; i < 70; i++)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3301      	adds	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b45      	cmp	r3, #69	@ 0x45
 8002130:	ddf5      	ble.n	800211e <lcd_clear+0x16>
    }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
    if (row == 0)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	e003      	b.n	8002160 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800215e:	60bb      	str	r3, [r7, #8]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4619      	mov	r1, r3
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff ff5a 	bl	8002020 <lcd_send_cmd>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 800217c:	2032      	movs	r0, #50	@ 0x32
 800217e:	f000 fda5 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8002182:	2130      	movs	r1, #48	@ 0x30
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff4b 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(5);
 800218a:	2005      	movs	r0, #5
 800218c:	f000 fd9e 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8002190:	2130      	movs	r1, #48	@ 0x30
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff44 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 8002198:	2001      	movs	r0, #1
 800219a:	f000 fd97 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800219e:	2130      	movs	r1, #48	@ 0x30
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff3d 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(10);
 80021a6:	200a      	movs	r0, #10
 80021a8:	f000 fd90 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80021ac:	2120      	movs	r1, #32
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff36 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f000 fd89 	bl	8002ccc <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80021ba:	2128      	movs	r1, #40	@ 0x28
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff2f 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fd82 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80021c8:	2108      	movs	r1, #8
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff28 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f000 fd7b 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 80021d6:	2101      	movs	r1, #1
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff21 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(2);
 80021de:	2002      	movs	r0, #2
 80021e0:	f000 fd74 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 80021e4:	2106      	movs	r1, #6
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff1a 	bl	8002020 <lcd_send_cmd>
    HAL_Delay(1);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 fd6d 	bl	8002ccc <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 80021f2:	210c      	movs	r1, #12
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff13 	bl	8002020 <lcd_send_cmd>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 800220c:	e007      	b.n	800221e <lcd_puts+0x1c>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	603a      	str	r2, [r7, #0]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff3b 	bl	8002094 <lcd_send_data>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f3      	bne.n	800220e <lcd_puts+0xc>
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <LCD_PrintfAt>:
 * @param  y: y position
 * @param  format : formated string
 * @retval None
 */
void LCD_PrintfAt(I2C_LCD_HandleTypeDef *lcd,uint8_t x, uint8_t y, const char *format, ...)
{
 8002230:	b408      	push	{r3}
 8002232:	b580      	push	{r7, lr}
 8002234:	b08d      	sub	sp, #52	@ 0x34
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
 800223e:	4613      	mov	r3, r2
 8002240:	70bb      	strb	r3, [r7, #2]
    char str[32];  // buffer de sortie
    va_list args;

    va_start(args, format);
 8002242:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002246:	60fb      	str	r3, [r7, #12]
    vsnprintf(str, sizeof(str), format, args);  // formatage
 8002248:	f107 0010 	add.w	r0, r7, #16
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002250:	2120      	movs	r1, #32
 8002252:	f005 fc21 	bl	8007a98 <vsniprintf>
    va_end(args);

    lcd_gotoxy(lcd, x, y);       // positionnement
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	78ba      	ldrb	r2, [r7, #2]
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff6d 	bl	800213c <lcd_gotoxy>
    lcd_puts(lcd, str);          // affichage
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffca 	bl	8002202 <lcd_puts>
}
 800226e:	bf00      	nop
 8002270:	3734      	adds	r7, #52	@ 0x34
 8002272:	46bd      	mov	sp, r7
 8002274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002278:	b001      	add	sp, #4
 800227a:	4770      	bx	lr

0800227c <__io_putchar>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002284:	1d39      	adds	r1, r7, #4
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	2201      	movs	r2, #1
 800228c:	4803      	ldr	r0, [pc, #12]	@ (800229c <__io_putchar+0x20>)
 800228e:	f003 fb33 	bl	80058f8 <HAL_UART_Transmit>
    return ch;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200002f4 	.word	0x200002f4

080022a0 <init_lcds>:

void init_lcds(void) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	lcd1.hi2c = &hi2c1;     // hi2c1 is your I2C handler
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <init_lcds+0x1c>)
 80022a6:	4a06      	ldr	r2, [pc, #24]	@ (80022c0 <init_lcds+0x20>)
 80022a8:	601a      	str	r2, [r3, #0]
	lcd1.address = 0x27 << 1;    // I2C address for the first LCD
 80022aa:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <init_lcds+0x1c>)
 80022ac:	224e      	movs	r2, #78	@ 0x4e
 80022ae:	711a      	strb	r2, [r3, #4]
	lcd_init(&lcd1);        // Initialize the first LCD
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <init_lcds+0x1c>)
 80022b2:	f7ff ff5f 	bl	8002174 <lcd_init>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000028c 	.word	0x2000028c
 80022c0:	20000238 	.word	0x20000238

080022c4 <adc_read_channel>:

uint32_t adc_read_channel(uint32_t chanel)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /*get the adc hundel*/
  ADC_HandleTypeDef *hadc1 = get_adc_hundle();
 80022cc:	f7fe ff7c 	bl	80011c8 <get_adc_hundle>
 80022d0:	61b8      	str	r0, [r7, #24]
  uint32_t adc_value;

  /*select channel manualy without scan mode*/
  ADC_ChannelConfTypeDef sConfig = {0};
 80022d2:	f107 0308 	add.w	r3, r7, #8
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  sConfig.Channel = chanel;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(hadc1, &sConfig) != HAL_OK)
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	69b8      	ldr	r0, [r7, #24]
 80022f4:	f000 fed2 	bl	800309c <HAL_ADC_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <adc_read_channel+0x3e>
  {
    Error_Handler();
 80022fe:	f000 fa83 	bl	8002808 <Error_Handler>
  }

  /*start the adc*/
  if (HAL_ADC_Start(hadc1) != HAL_OK)
 8002302:	69b8      	ldr	r0, [r7, #24]
 8002304:	f000 fd4a 	bl	8002d9c <HAL_ADC_Start>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <adc_read_channel+0x4e>
  {
    Error_Handler();
 800230e:	f000 fa7b 	bl	8002808 <Error_Handler>
  }
	if (HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY) == HAL_OK)
 8002312:	f04f 31ff 	mov.w	r1, #4294967295
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	f000 fe27 	bl	8002f6a <HAL_ADC_PollForConversion>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d104      	bne.n	800232c <adc_read_channel+0x68>
	{
	  adc_value = HAL_ADC_GetValue(hadc1);  // Read value
 8002322:	69b8      	ldr	r0, [r7, #24]
 8002324:	f000 feac 	bl	8003080 <HAL_ADC_GetValue>
 8002328:	61f8      	str	r0, [r7, #28]
 800232a:	e001      	b.n	8002330 <adc_read_channel+0x6c>
	  // For debugging, you can output this via UART or LED logic
	}
  else
  {
    Error_Handler();
 800232c:	f000 fa6c 	bl	8002808 <Error_Handler>
  }
  HAL_ADC_Stop(hadc1);
 8002330:	69b8      	ldr	r0, [r7, #24]
 8002332:	f000 fde7 	bl	8002f04 <HAL_ADC_Stop>
  return adc_value;
 8002336:	69fb      	ldr	r3, [r7, #28]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <is_gaz_f>:
const char* is_gaz_f(uint8_t gaz)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
    if (gaz == 0)
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <is_gaz_f+0x14>
    {
        return "No gaz detected";
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <is_gaz_f+0x24>)
 8002352:	e000      	b.n	8002356 <is_gaz_f+0x16>
    }
    else
    {
        return "Gaz detected";
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <is_gaz_f+0x28>)
    }
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	0800b190 	.word	0x0800b190
 8002368:	0800b1a0 	.word	0x0800b1a0

0800236c <is_flame_f>:

const char* is_flame_f(uint8_t flame)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
    if (flame == 0)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <is_flame_f+0x14>
    {
        return "No flame detected";
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <is_flame_f+0x24>)
 800237e:	e000      	b.n	8002382 <is_flame_f+0x16>
    }
    else
    {
        return "Flame detected";
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <is_flame_f+0x28>)
    }
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	0800b1b0 	.word	0x0800b1b0
 8002394:	0800b1c4 	.word	0x0800b1c4

08002398 <HAL_GPIO_EXTI_Callback>:
uint8_t lcd_select = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
	lcd_select++;
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_GPIO_EXTI_Callback+0x24>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <HAL_GPIO_EXTI_Callback+0x24>)
 80023ac:	701a      	strb	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000294 	.word	0x20000294

080023c0 <EXTILine0_Config>:

static void EXTILine0_Config(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <EXTILine0_Config+0x54>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a11      	ldr	r2, [pc, #68]	@ (8002414 <EXTILine0_Config+0x54>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <EXTILine0_Config+0x54>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]

  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80023e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 80023ec:	2301      	movs	r3, #1
 80023ee:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	4808      	ldr	r0, [pc, #32]	@ (8002418 <EXTILine0_Config+0x58>)
 80023f6:	f001 fa23 	bl	8003840 <HAL_GPIO_Init>

  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2103      	movs	r1, #3
 80023fe:	2006      	movs	r0, #6
 8002400:	f001 f955 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002404:	2006      	movs	r0, #6
 8002406:	f001 f96e 	bl	80036e6 <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000

0800241c <HAL_UART_RxCpltCallback>:

uint32_t co2 = 0;
uint8_t uart_rx_buffer[16];     // Assez grand pour contenir l'entier

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <HAL_UART_RxCpltCallback+0x4c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d118      	bne.n	8002460 <HAL_UART_RxCpltCallback+0x44>
  {
    // S'assurer que la chaîne est bien terminée par '\0'
   uart_rx_buffer[15] = '\0';  // Au cas où pas de '\n'
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <HAL_UART_RxCpltCallback+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	73da      	strb	r2, [r3, #15]

    // Conversion de la chaîne reçue en entier
    co2 = atoi((char*)uart_rx_buffer);
 8002434:	480d      	ldr	r0, [pc, #52]	@ (800246c <HAL_UART_RxCpltCallback+0x50>)
 8002436:	f004 fa7b 	bl	8006930 <atoi>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_UART_RxCpltCallback+0x54>)
 8002440:	601a      	str	r2, [r3, #0]
    memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8002442:	2210      	movs	r2, #16
 8002444:	2100      	movs	r1, #0
 8002446:	4809      	ldr	r0, [pc, #36]	@ (800246c <HAL_UART_RxCpltCallback+0x50>)
 8002448:	f005 fbc8 	bl	8007bdc <memset>

    // Réactiver la réception
    HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
 800244c:	2210      	movs	r2, #16
 800244e:	4907      	ldr	r1, [pc, #28]	@ (800246c <HAL_UART_RxCpltCallback+0x50>)
 8002450:	4808      	ldr	r0, [pc, #32]	@ (8002474 <HAL_UART_RxCpltCallback+0x58>)
 8002452:	f003 fadc 	bl	8005a0e <HAL_UART_Receive_IT>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002456:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800245a:	4807      	ldr	r0, [pc, #28]	@ (8002478 <HAL_UART_RxCpltCallback+0x5c>)
 800245c:	f001 fb8d 	bl	8003b7a <HAL_GPIO_TogglePin>
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40004400 	.word	0x40004400
 800246c:	2000029c 	.word	0x2000029c
 8002470:	20000298 	.word	0x20000298
 8002474:	200002f4 	.word	0x200002f4
 8002478:	40020c00 	.word	0x40020c00

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002480:	b08a      	sub	sp, #40	@ 0x28
 8002482:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002484:	f000 fbb0 	bl	8002be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002488:	f000 f956 	bl	8002738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248c:	f7ff fcda 	bl	8001e44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002490:	f7fe fe1e 	bl	80010d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002494:	f000 fb04 	bl	8002aa0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002498:	f7ff fd4c 	bl	8001f34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_lcds();
 800249c:	f7ff ff00 	bl	80022a0 <init_lcds>
  lcd_clear(&lcd1);
 80024a0:	488c      	ldr	r0, [pc, #560]	@ (80026d4 <main+0x258>)
 80024a2:	f7ff fe31 	bl	8002108 <lcd_clear>

  uint32_t gaz_adc_value = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  uint32_t flame_adc_value = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
	bmp280_init_default_params(&bmp280.params);
 80024ae:	488a      	ldr	r0, [pc, #552]	@ (80026d8 <main+0x25c>)
 80024b0:	f7fe fe94 	bl	80011dc <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80024b4:	4b89      	ldr	r3, [pc, #548]	@ (80026dc <main+0x260>)
 80024b6:	2276      	movs	r2, #118	@ 0x76
 80024b8:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280.i2c = &hi2c1;
 80024ba:	4b88      	ldr	r3, [pc, #544]	@ (80026dc <main+0x260>)
 80024bc:	4a88      	ldr	r2, [pc, #544]	@ (80026e0 <main+0x264>)
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28

  	if (!bmp280_init(&bmp280, &bmp280.params))
 80024c0:	4985      	ldr	r1, [pc, #532]	@ (80026d8 <main+0x25c>)
 80024c2:	4886      	ldr	r0, [pc, #536]	@ (80026dc <main+0x260>)
 80024c4:	f7ff f806 	bl	80014d4 <bmp280_init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <main+0x64>
  	{
  		Error_Handler();
 80024d4:	f000 f998 	bl	8002808 <Error_Handler>
		HAL_Delay(2000);
 80024d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024dc:	f000 fbf6 	bl	8002ccc <HAL_Delay>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 80024e0:	4b7e      	ldr	r3, [pc, #504]	@ (80026dc <main+0x260>)
 80024e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80024e6:	2b60      	cmp	r3, #96	@ 0x60
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	71fb      	strb	r3, [r7, #7]

	printf("BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <main+0x7e>
 80024f6:	4b7b      	ldr	r3, [pc, #492]	@ (80026e4 <main+0x268>)
 80024f8:	e000      	b.n	80024fc <main+0x80>
 80024fa:	4b7b      	ldr	r3, [pc, #492]	@ (80026e8 <main+0x26c>)
 80024fc:	4619      	mov	r1, r3
 80024fe:	487b      	ldr	r0, [pc, #492]	@ (80026ec <main+0x270>)
 8002500:	f005 f9c6 	bl	8007890 <iprintf>
	EXTILine0_Config();
 8002504:	f7ff ff5c 	bl	80023c0 <EXTILine0_Config>
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
 8002508:	2210      	movs	r2, #16
 800250a:	4979      	ldr	r1, [pc, #484]	@ (80026f0 <main+0x274>)
 800250c:	4879      	ldr	r0, [pc, #484]	@ (80026f4 <main+0x278>)
 800250e:	f003 fa7e 	bl	8005a0e <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  
  gaz_adc_value = adc_read_channel(ADC_CHANNEL_4);
 8002512:	2004      	movs	r0, #4
 8002514:	f7ff fed6 	bl	80022c4 <adc_read_channel>
 8002518:	60f8      	str	r0, [r7, #12]
  flame_adc_value = adc_read_channel(ADC_CHANNEL_1);
 800251a:	2001      	movs	r0, #1
 800251c:	f7ff fed2 	bl	80022c4 <adc_read_channel>
 8002520:	60b8      	str	r0, [r7, #8]

	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 8002522:	e006      	b.n	8002532 <main+0xb6>
	{
		printf("Temperature/pressure reading failed\n");
 8002524:	4874      	ldr	r0, [pc, #464]	@ (80026f8 <main+0x27c>)
 8002526:	f005 fa1b 	bl	8007960 <puts>
		HAL_Delay(2000);
 800252a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800252e:	f000 fbcd 	bl	8002ccc <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 8002532:	4b72      	ldr	r3, [pc, #456]	@ (80026fc <main+0x280>)
 8002534:	4a72      	ldr	r2, [pc, #456]	@ (8002700 <main+0x284>)
 8002536:	4973      	ldr	r1, [pc, #460]	@ (8002704 <main+0x288>)
 8002538:	4868      	ldr	r0, [pc, #416]	@ (80026dc <main+0x260>)
 800253a:	f7ff fc37 	bl	8001dac <bmp280_read_float>
 800253e:	4603      	mov	r3, r0
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ec      	bne.n	8002524 <main+0xa8>
	}
	if(gaz_adc_value > 1000)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002550:	d909      	bls.n	8002566 <main+0xea>
	{

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002558:	486b      	ldr	r0, [pc, #428]	@ (8002708 <main+0x28c>)
 800255a:	f001 faf5 	bl	8003b48 <HAL_GPIO_WritePin>
		is_gaz = 1;
 800255e:	4b6b      	ldr	r3, [pc, #428]	@ (800270c <main+0x290>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e008      	b.n	8002578 <main+0xfc>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800256c:	4866      	ldr	r0, [pc, #408]	@ (8002708 <main+0x28c>)
 800256e:	f001 faeb 	bl	8003b48 <HAL_GPIO_WritePin>
		is_gaz = 0;
 8002572:	4b66      	ldr	r3, [pc, #408]	@ (800270c <main+0x290>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
	}

	if(flame_adc_value < 1000)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800257e:	d209      	bcs.n	8002594 <main+0x118>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002586:	4860      	ldr	r0, [pc, #384]	@ (8002708 <main+0x28c>)
 8002588:	f001 fade 	bl	8003b48 <HAL_GPIO_WritePin>
		is_flame = 1;
 800258c:	4b60      	ldr	r3, [pc, #384]	@ (8002710 <main+0x294>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e008      	b.n	80025a6 <main+0x12a>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800259a:	485b      	ldr	r0, [pc, #364]	@ (8002708 <main+0x28c>)
 800259c:	f001 fad4 	bl	8003b48 <HAL_GPIO_WritePin>
		is_flame = 0;
 80025a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002710 <main+0x294>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
	}

	switch (lcd_select)
 80025a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <main+0x298>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d043      	beq.n	8002636 <main+0x1ba>
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	dc58      	bgt.n	8002664 <main+0x1e8>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d026      	beq.n	8002604 <main+0x188>
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d154      	bne.n	8002664 <main+0x1e8>
	{
	    case 1:
			LCD_PrintfAt(&lcd1,0, 0,"pres %.2f hpa",pressure/100);
 80025ba:	4b51      	ldr	r3, [pc, #324]	@ (8002700 <main+0x284>)
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002718 <main+0x29c>
 80025c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025c8:	ee16 0a90 	vmov	r0, s13
 80025cc:	f7fd ffc4 	bl	8000558 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	e9cd 2300 	strd	r2, r3, [sp]
 80025d8:	4b50      	ldr	r3, [pc, #320]	@ (800271c <main+0x2a0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	483d      	ldr	r0, [pc, #244]	@ (80026d4 <main+0x258>)
 80025e0:	f7ff fe26 	bl	8002230 <LCD_PrintfAt>
			LCD_PrintfAt(&lcd1,0, 1,"temp %.2f C",temperature);
 80025e4:	4b47      	ldr	r3, [pc, #284]	@ (8002704 <main+0x288>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ffb5 	bl	8000558 <__aeabi_f2d>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	e9cd 2300 	strd	r2, r3, [sp]
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <main+0x2a4>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	2100      	movs	r1, #0
 80025fc:	4835      	ldr	r0, [pc, #212]	@ (80026d4 <main+0x258>)
 80025fe:	f7ff fe17 	bl	8002230 <LCD_PrintfAt>
	        break;
 8002602:	e032      	b.n	800266a <main+0x1ee>
	    case 0:
			LCD_PrintfAt(&lcd1,0, 0,"hum %.2f\%",humidity);
 8002604:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <main+0x280>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffa5 	bl	8000558 <__aeabi_f2d>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	e9cd 2300 	strd	r2, r3, [sp]
 8002616:	4b43      	ldr	r3, [pc, #268]	@ (8002724 <main+0x2a8>)
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	482d      	ldr	r0, [pc, #180]	@ (80026d4 <main+0x258>)
 800261e:	f7ff fe07 	bl	8002230 <LCD_PrintfAt>
			LCD_PrintfAt(&lcd1,0, 1,"CO2 %d ppm",co2);
 8002622:	4b41      	ldr	r3, [pc, #260]	@ (8002728 <main+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4b40      	ldr	r3, [pc, #256]	@ (800272c <main+0x2b0>)
 800262a:	2201      	movs	r2, #1
 800262c:	2100      	movs	r1, #0
 800262e:	4829      	ldr	r0, [pc, #164]	@ (80026d4 <main+0x258>)
 8002630:	f7ff fdfe 	bl	8002230 <LCD_PrintfAt>
	        break;
 8002634:	e019      	b.n	800266a <main+0x1ee>
	    case 2:
			LCD_PrintfAt(&lcd1,0, 0,is_gaz_f(is_gaz));
 8002636:	4b35      	ldr	r3, [pc, #212]	@ (800270c <main+0x290>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe80 	bl	8002340 <is_gaz_f>
 8002640:	4603      	mov	r3, r0
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	4823      	ldr	r0, [pc, #140]	@ (80026d4 <main+0x258>)
 8002648:	f7ff fdf2 	bl	8002230 <LCD_PrintfAt>
			LCD_PrintfAt(&lcd1,0, 1,is_flame_f(is_flame));
 800264c:	4b30      	ldr	r3, [pc, #192]	@ (8002710 <main+0x294>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fe8b 	bl	800236c <is_flame_f>
 8002656:	4603      	mov	r3, r0
 8002658:	2201      	movs	r2, #1
 800265a:	2100      	movs	r1, #0
 800265c:	481d      	ldr	r0, [pc, #116]	@ (80026d4 <main+0x258>)
 800265e:	f7ff fde7 	bl	8002230 <LCD_PrintfAt>
	        break;
 8002662:	e002      	b.n	800266a <main+0x1ee>

	    default:
	    	lcd_select = 0;
 8002664:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <main+0x298>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
	}


   printf("{\"pressure\": %.2f, \"temperature\": %.2f, \"humidity\": %.2f, \"gaz\": %u, \"flame\": %u}\n",
 800266a:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <main+0x284>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff72 	bl	8000558 <__aeabi_f2d>
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <main+0x2b4>)
 800267a:	f7fe f8ef 	bl	800085c <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4690      	mov	r8, r2
 8002684:	4699      	mov	r9, r3
 8002686:	4b1f      	ldr	r3, [pc, #124]	@ (8002704 <main+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff64 	bl	8000558 <__aeabi_f2d>
 8002690:	4604      	mov	r4, r0
 8002692:	460d      	mov	r5, r1
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <main+0x280>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff5d 	bl	8000558 <__aeabi_f2d>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	491a      	ldr	r1, [pc, #104]	@ (800270c <main+0x290>)
 80026a4:	7809      	ldrb	r1, [r1, #0]
 80026a6:	4608      	mov	r0, r1
 80026a8:	4919      	ldr	r1, [pc, #100]	@ (8002710 <main+0x294>)
 80026aa:	7809      	ldrb	r1, [r1, #0]
 80026ac:	9105      	str	r1, [sp, #20]
 80026ae:	9004      	str	r0, [sp, #16]
 80026b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026b4:	e9cd 4500 	strd	r4, r5, [sp]
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	481d      	ldr	r0, [pc, #116]	@ (8002734 <main+0x2b8>)
 80026be:	f005 f8e7 	bl	8007890 <iprintf>
	       pressure/100.0, temperature, humidity, is_gaz, is_flame);

	HAL_Delay(1000);
 80026c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026c6:	f000 fb01 	bl	8002ccc <HAL_Delay>
	lcd_clear(&lcd1);
 80026ca:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <main+0x258>)
 80026cc:	f7ff fd1c 	bl	8002108 <lcd_clear>
  gaz_adc_value = adc_read_channel(ADC_CHANNEL_4);
 80026d0:	e71f      	b.n	8002512 <main+0x96>
 80026d2:	bf00      	nop
 80026d4:	2000028c 	.word	0x2000028c
 80026d8:	200002d8 	.word	0x200002d8
 80026dc:	200002ac 	.word	0x200002ac
 80026e0:	20000238 	.word	0x20000238
 80026e4:	0800b1d4 	.word	0x0800b1d4
 80026e8:	0800b1dc 	.word	0x0800b1dc
 80026ec:	0800b1e4 	.word	0x0800b1e4
 80026f0:	2000029c 	.word	0x2000029c
 80026f4:	200002f4 	.word	0x200002f4
 80026f8:	0800b1f8 	.word	0x0800b1f8
 80026fc:	200002e8 	.word	0x200002e8
 8002700:	200002e0 	.word	0x200002e0
 8002704:	200002e4 	.word	0x200002e4
 8002708:	40020c00 	.word	0x40020c00
 800270c:	200002ec 	.word	0x200002ec
 8002710:	200002ed 	.word	0x200002ed
 8002714:	20000294 	.word	0x20000294
 8002718:	42c80000 	.word	0x42c80000
 800271c:	0800b21c 	.word	0x0800b21c
 8002720:	0800b22c 	.word	0x0800b22c
 8002724:	0800b238 	.word	0x0800b238
 8002728:	20000298 	.word	0x20000298
 800272c:	0800b244 	.word	0x0800b244
 8002730:	40590000 	.word	0x40590000
 8002734:	0800b250 	.word	0x0800b250

08002738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b094      	sub	sp, #80	@ 0x50
 800273c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	2230      	movs	r2, #48	@ 0x30
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f005 fa48 	bl	8007bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <SystemClock_Config+0xc8>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	4a26      	ldr	r2, [pc, #152]	@ (8002800 <SystemClock_Config+0xc8>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276a:	6413      	str	r3, [r2, #64]	@ 0x40
 800276c:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <SystemClock_Config+0xc8>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <SystemClock_Config+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a20      	ldr	r2, [pc, #128]	@ (8002804 <SystemClock_Config+0xcc>)
 8002782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b1e      	ldr	r3, [pc, #120]	@ (8002804 <SystemClock_Config+0xcc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002794:	2302      	movs	r3, #2
 8002796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002798:	2301      	movs	r3, #1
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800279c:	2310      	movs	r3, #16
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a0:	2302      	movs	r3, #2
 80027a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027a8:	2308      	movs	r3, #8
 80027aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80027ac:	2332      	movs	r3, #50	@ 0x32
 80027ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027b0:	2304      	movs	r3, #4
 80027b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80027b4:	2308      	movs	r3, #8
 80027b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 fbb3 	bl	8004f28 <HAL_RCC_OscConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027c8:	f000 f81e 	bl	8002808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027cc:	230f      	movs	r3, #15
 80027ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fe15 	bl	8005418 <HAL_RCC_ClockConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027f4:	f000 f808 	bl	8002808 <Error_Handler>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3750      	adds	r7, #80	@ 0x50
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000

08002808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002812:	4802      	ldr	r0, [pc, #8]	@ (800281c <Error_Handler+0x14>)
 8002814:	f001 f998 	bl	8003b48 <HAL_GPIO_WritePin>
  while (1)
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <Error_Handler+0x10>
 800281c:	40020c00 	.word	0x40020c00

08002820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	4a0f      	ldr	r2, [pc, #60]	@ (800286c <HAL_MspInit+0x4c>)
 8002830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002834:	6453      	str	r3, [r2, #68]	@ 0x44
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <HAL_MspInit+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a08      	ldr	r2, [pc, #32]	@ (800286c <HAL_MspInit+0x4c>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_MspInit+0x4c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800285e:	2007      	movs	r0, #7
 8002860:	f000 ff1a 	bl	8003698 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <NMI_Handler+0x4>

08002878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <HardFault_Handler+0x4>

08002880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <MemManage_Handler+0x4>

08002888 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <BusFault_Handler+0x4>

08002890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <UsageFault_Handler+0x4>

08002898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c6:	f000 f9e1 	bl	8002c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}

080028ce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f001 f96c 	bl	8003bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <USART2_IRQHandler+0x10>)
 80028e2:	f003 f8b9 	bl	8005a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200002f4 	.word	0x200002f4

080028f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return 1;
 80028f4:	2301      	movs	r3, #1
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_kill>:

int _kill(int pid, int sig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800290a:	f005 f9b9 	bl	8007c80 <__errno>
 800290e:	4603      	mov	r3, r0
 8002910:	2216      	movs	r2, #22
 8002912:	601a      	str	r2, [r3, #0]
  return -1;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_exit>:

void _exit (int status)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ffe7 	bl	8002900 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002932:	bf00      	nop
 8002934:	e7fd      	b.n	8002932 <_exit+0x12>

08002936 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e00a      	b.n	800295e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002948:	f3af 8000 	nop.w
 800294c:	4601      	mov	r1, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	60ba      	str	r2, [r7, #8]
 8002954:	b2ca      	uxtb	r2, r1
 8002956:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3301      	adds	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	dbf0      	blt.n	8002948 <_read+0x12>
  }

  return len;
 8002966:	687b      	ldr	r3, [r7, #4]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e009      	b.n	8002996 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	60ba      	str	r2, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fc76 	bl	800227c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	dbf1      	blt.n	8002982 <_write+0x12>
  }
  return len;
 800299e:	687b      	ldr	r3, [r7, #4]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_close>:

int _close(int file)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029d0:	605a      	str	r2, [r3, #4]
  return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_isatty>:

int _isatty(int file)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a18:	4a14      	ldr	r2, [pc, #80]	@ (8002a6c <_sbrk+0x5c>)
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <_sbrk+0x60>)
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a24:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <_sbrk+0x64>)
 8002a2e:	4a12      	ldr	r2, [pc, #72]	@ (8002a78 <_sbrk+0x68>)
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d207      	bcs.n	8002a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a40:	f005 f91e 	bl	8007c80 <__errno>
 8002a44:	4603      	mov	r3, r0
 8002a46:	220c      	movs	r2, #12
 8002a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	e009      	b.n	8002a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a50:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a56:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4a05      	ldr	r2, [pc, #20]	@ (8002a74 <_sbrk+0x64>)
 8002a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20020000 	.word	0x20020000
 8002a70:	00000400 	.word	0x00000400
 8002a74:	200002f0 	.word	0x200002f0
 8002a78:	20000490 	.word	0x20000490

08002a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <SystemInit+0x20>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <SystemInit+0x20>)
 8002a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <MX_USART2_UART_Init+0x50>)
 8002aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002abe:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ad6:	4805      	ldr	r0, [pc, #20]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ad8:	f002 febe 	bl	8005858 <HAL_UART_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ae2:	f7ff fe91 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200002f4 	.word	0x200002f4
 8002af0:	40004400 	.word	0x40004400

08002af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <HAL_UART_MspInit+0x94>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d133      	bne.n	8002b7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <HAL_UART_MspInit+0x98>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_UART_MspInit+0x98>)
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b26:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_UART_MspInit+0x98>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_UART_MspInit+0x98>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a14      	ldr	r2, [pc, #80]	@ (8002b8c <HAL_UART_MspInit+0x98>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_UART_MspInit+0x98>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b4e:	230c      	movs	r3, #12
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5e:	2307      	movs	r3, #7
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <HAL_UART_MspInit+0x9c>)
 8002b6a:	f000 fe69 	bl	8003840 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2103      	movs	r1, #3
 8002b72:	2026      	movs	r0, #38	@ 0x26
 8002b74:	f000 fd9b 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b78:	2026      	movs	r0, #38	@ 0x26
 8002b7a:	f000 fdb4 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	@ 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000

08002b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b98:	480d      	ldr	r0, [pc, #52]	@ (8002bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b9a:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba0:	e002      	b.n	8002ba8 <LoopCopyDataInit>

08002ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba6:	3304      	adds	r3, #4

08002ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bac:	d3f9      	bcc.n	8002ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bae:	4a0b      	ldr	r2, [pc, #44]	@ (8002bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bb0:	4c0b      	ldr	r4, [pc, #44]	@ (8002be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb4:	e001      	b.n	8002bba <LoopFillZerobss>

08002bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb8:	3204      	adds	r2, #4

08002bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bbc:	d3fb      	bcc.n	8002bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bbe:	f7ff ff5d 	bl	8002a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f005 f863 	bl	8007c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc6:	f7ff fc59 	bl	800247c <main>
  bx  lr    
 8002bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002bd8:	0800b6f0 	.word	0x0800b6f0
  ldr r2, =_sbss
 8002bdc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002be0:	2000048c 	.word	0x2000048c

08002be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be4:	e7fe      	b.n	8002be4 <ADC_IRQHandler>
	...

08002be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bec:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <HAL_Init+0x40>)
 8002bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_Init+0x40>)
 8002bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <HAL_Init+0x40>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c10:	2003      	movs	r0, #3
 8002c12:	f000 fd41 	bl	8003698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f000 f808 	bl	8002c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c1c:	f7ff fe00 	bl	8002820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023c00 	.word	0x40023c00

08002c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c34:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <HAL_InitTick+0x54>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_InitTick+0x58>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fd59 	bl	8003702 <HAL_SYSTICK_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00e      	b.n	8002c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d80a      	bhi.n	8002c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c60:	2200      	movs	r2, #0
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f000 fd21 	bl	80036ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c6c:	4a06      	ldr	r2, [pc, #24]	@ (8002c88 <HAL_InitTick+0x5c>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e000      	b.n	8002c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000008 	.word	0x20000008
 8002c88:	20000004 	.word	0x20000004

08002c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_IncTick+0x20>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_IncTick+0x24>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_IncTick+0x24>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	2000033c 	.word	0x2000033c

08002cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_GetTick+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	2000033c 	.word	0x2000033c

08002ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff ffee 	bl	8002cb4 <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d005      	beq.n	8002cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <HAL_Delay+0x44>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cf2:	bf00      	nop
 8002cf4:	f7ff ffde 	bl	8002cb4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d8f7      	bhi.n	8002cf4 <HAL_Delay+0x28>
  {
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000008 	.word	0x20000008

08002d14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e033      	b.n	8002d92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fa04 	bl	8001140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d5a:	f023 0302 	bic.w	r3, r3, #2
 8002d5e:	f043 0202 	orr.w	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 faca 	bl	8003300 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d82:	e001      	b.n	8002d88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_Start+0x1a>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e097      	b.n	8002ee6 <HAL_ADC_Start+0x14a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d018      	beq.n	8002dfe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ddc:	4b45      	ldr	r3, [pc, #276]	@ (8002ef4 <HAL_ADC_Start+0x158>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a45      	ldr	r2, [pc, #276]	@ (8002ef8 <HAL_ADC_Start+0x15c>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9a      	lsrs	r2, r3, #18
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002df0:	e002      	b.n	8002df8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f9      	bne.n	8002df2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d15f      	bne.n	8002ecc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4a:	d106      	bne.n	8002e5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e50:	f023 0206 	bic.w	r2, r3, #6
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e58:	e002      	b.n	8002e60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e68:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_ADC_Start+0x160>)
 8002e6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e74:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d129      	bne.n	8002ee4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e020      	b.n	8002ee4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a16      	ldr	r2, [pc, #88]	@ (8002f00 <HAL_ADC_Start+0x164>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_ADC_Start+0x148>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d114      	bne.n	8002ee4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	e00b      	b.n	8002ee4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	40012300 	.word	0x40012300
 8002f00:	40012000 	.word	0x40012000

08002f04 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Stop+0x16>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e021      	b.n	8002f5e <HAL_ADC_Stop+0x5a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	f043 0201 	orr.w	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f86:	d113      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f96:	d10b      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e063      	b.n	8003078 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb0:	f7ff fe80 	bl	8002cb4 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fb6:	e021      	b.n	8002ffc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d01d      	beq.n	8002ffc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_ADC_PollForConversion+0x6c>
 8002fc6:	f7ff fe75 	bl	8002cb4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d212      	bcs.n	8002ffc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d00b      	beq.n	8002ffc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e03d      	b.n	8003078 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d1d6      	bne.n	8002fb8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f06f 0212 	mvn.w	r2, #18
 8003012:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d123      	bne.n	8003076 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003032:	2b00      	cmp	r3, #0
 8003034:	d11f      	bne.n	8003076 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	d111      	bne.n	8003076 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x1c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e113      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x244>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d925      	bls.n	8003114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68d9      	ldr	r1, [r3, #12]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	3b1e      	subs	r3, #30
 80030de:	2207      	movs	r2, #7
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43da      	mvns	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	400a      	ands	r2, r1
 80030ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68d9      	ldr	r1, [r3, #12]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4618      	mov	r0, r3
 8003100:	4603      	mov	r3, r0
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4403      	add	r3, r0
 8003106:	3b1e      	subs	r3, #30
 8003108:	409a      	lsls	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	e022      	b.n	800315a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6919      	ldr	r1, [r3, #16]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	2207      	movs	r2, #7
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	400a      	ands	r2, r1
 8003136:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	4618      	mov	r0, r3
 800314a:	4603      	mov	r3, r0
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4403      	add	r3, r0
 8003150:	409a      	lsls	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b06      	cmp	r3, #6
 8003160:	d824      	bhi.n	80031ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b05      	subs	r3, #5
 8003174:	221f      	movs	r2, #31
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	400a      	ands	r2, r1
 8003182:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	4618      	mov	r0, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	3b05      	subs	r3, #5
 800319e:	fa00 f203 	lsl.w	r2, r0, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80031aa:	e04c      	b.n	8003246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d824      	bhi.n	80031fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	3b23      	subs	r3, #35	@ 0x23
 80031c6:	221f      	movs	r2, #31
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43da      	mvns	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	400a      	ands	r2, r1
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b23      	subs	r3, #35	@ 0x23
 80031f0:	fa00 f203 	lsl.w	r2, r0, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80031fc:	e023      	b.n	8003246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b41      	subs	r3, #65	@ 0x41
 8003210:	221f      	movs	r2, #31
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	400a      	ands	r2, r1
 800321e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b41      	subs	r3, #65	@ 0x41
 800323a:	fa00 f203 	lsl.w	r2, r0, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003246:	4b29      	ldr	r3, [pc, #164]	@ (80032ec <HAL_ADC_ConfigChannel+0x250>)
 8003248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a28      	ldr	r2, [pc, #160]	@ (80032f0 <HAL_ADC_ConfigChannel+0x254>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d10f      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1d8>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b12      	cmp	r3, #18
 800325a:	d10b      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <HAL_ADC_ConfigChannel+0x254>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d12b      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x23a>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1c      	ldr	r2, [pc, #112]	@ (80032f4 <HAL_ADC_ConfigChannel+0x258>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <HAL_ADC_ConfigChannel+0x1f4>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b11      	cmp	r3, #17
 800328e:	d122      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <HAL_ADC_ConfigChannel+0x258>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_ADC_ConfigChannel+0x25c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <HAL_ADC_ConfigChannel+0x260>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	0c9a      	lsrs	r2, r3, #18
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032c8:	e002      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f9      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40012300 	.word	0x40012300
 80032f0:	40012000 	.word	0x40012000
 80032f4:	10000012 	.word	0x10000012
 80032f8:	20000000 	.word	0x20000000
 80032fc:	431bde83 	.word	0x431bde83

08003300 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003308:	4b79      	ldr	r3, [pc, #484]	@ (80034f0 <ADC_Init+0x1f0>)
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	021a      	lsls	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800337a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	4a58      	ldr	r2, [pc, #352]	@ (80034f4 <ADC_Init+0x1f4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6899      	ldr	r1, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	e00f      	b.n	80033fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0202 	bic.w	r2, r2, #2
 800340c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6899      	ldr	r1, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7e1b      	ldrb	r3, [r3, #24]
 8003418:	005a      	lsls	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800343a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800344a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	3b01      	subs	r3, #1
 8003458:	035a      	lsls	r2, r3, #13
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e007      	b.n	8003474 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003482:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	3b01      	subs	r3, #1
 8003490:	051a      	lsls	r2, r3, #20
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034b6:	025a      	lsls	r2, r3, #9
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	029a      	lsls	r2, r3, #10
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40012300 	.word	0x40012300
 80034f4:	0f000001 	.word	0x0f000001

080034f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352a:	4a04      	ldr	r2, [pc, #16]	@ (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	60d3      	str	r3, [r2, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003544:	4b04      	ldr	r3, [pc, #16]	@ (8003558 <__NVIC_GetPriorityGrouping+0x18>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0307 	and.w	r3, r3, #7
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db0b      	blt.n	8003586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4907      	ldr	r1, [pc, #28]	@ (8003594 <__NVIC_EnableIRQ+0x38>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	@ (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	@ (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	@ 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003664:	d301      	bcc.n	800366a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003666:	2301      	movs	r3, #1
 8003668:	e00f      	b.n	800368a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366a:	4a0a      	ldr	r2, [pc, #40]	@ (8003694 <SysTick_Config+0x40>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003672:	210f      	movs	r1, #15
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f7ff ff8e 	bl	8003598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800367c:	4b05      	ldr	r3, [pc, #20]	@ (8003694 <SysTick_Config+0x40>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003682:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <SysTick_Config+0x40>)
 8003684:	2207      	movs	r2, #7
 8003686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000e010 	.word	0xe000e010

08003698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff29 	bl	80034f8 <__NVIC_SetPriorityGrouping>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036c0:	f7ff ff3e 	bl	8003540 <__NVIC_GetPriorityGrouping>
 80036c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff ff8e 	bl	80035ec <NVIC_EncodePriority>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff5d 	bl	8003598 <__NVIC_SetPriority>
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff31 	bl	800355c <__NVIC_EnableIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ffa2 	bl	8003654 <SysTick_Config>
 8003710:	4603      	mov	r3, r0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003726:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff fac4 	bl	8002cb4 <HAL_GetTick>
 800372c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d008      	beq.n	800374c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2280      	movs	r2, #128	@ 0x80
 800373e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e052      	b.n	80037f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0216 	bic.w	r2, r2, #22
 800375a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800376a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <HAL_DMA_Abort+0x62>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0208 	bic.w	r2, r2, #8
 800378a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379c:	e013      	b.n	80037c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800379e:	f7ff fa89 	bl	8002cb4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d90c      	bls.n	80037c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e015      	b.n	80037f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e4      	bne.n	800379e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d8:	223f      	movs	r2, #63	@ 0x3f
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d004      	beq.n	8003818 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2280      	movs	r2, #128	@ 0x80
 8003812:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e00c      	b.n	8003832 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2205      	movs	r2, #5
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e159      	b.n	8003b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 8148 	bne.w	8003b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d005      	beq.n	8003892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	2b02      	cmp	r3, #2
 8003890:	d130      	bne.n	80038f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0201 	and.w	r2, r3, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d017      	beq.n	8003930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a2 	beq.w	8003b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b57      	ldr	r3, [pc, #348]	@ (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	4a56      	ldr	r2, [pc, #344]	@ (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039d6:	4b54      	ldr	r3, [pc, #336]	@ (8003b28 <HAL_GPIO_Init+0x2e8>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a52      	ldr	r2, [pc, #328]	@ (8003b2c <HAL_GPIO_Init+0x2ec>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a49      	ldr	r2, [pc, #292]	@ (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_Init+0x202>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a48      	ldr	r2, [pc, #288]	@ (8003b34 <HAL_GPIO_Init+0x2f4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x1fe>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a47      	ldr	r2, [pc, #284]	@ (8003b38 <HAL_GPIO_Init+0x2f8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x1fa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a46      	ldr	r2, [pc, #280]	@ (8003b3c <HAL_GPIO_Init+0x2fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x1f6>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a45      	ldr	r2, [pc, #276]	@ (8003b40 <HAL_GPIO_Init+0x300>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x1f2>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a42:	2300      	movs	r3, #0
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a54:	4935      	ldr	r1, [pc, #212]	@ (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a62:	4b38      	ldr	r3, [pc, #224]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a86:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab0:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ab6:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ada:	4a1a      	ldr	r2, [pc, #104]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b04:	4a0f      	ldr	r2, [pc, #60]	@ (8003b44 <HAL_GPIO_Init+0x304>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	f67f aea2 	bls.w	800385c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40013800 	.word	0x40013800
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40013c00 	.word	0x40013c00

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b64:	e003      	b.n	8003b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	041a      	lsls	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	619a      	str	r2, [r3, #24]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	041a      	lsls	r2, r3, #16
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43d9      	mvns	r1, r3
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	400b      	ands	r3, r1
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	619a      	str	r2, [r3, #24]
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bba:	4b08      	ldr	r3, [pc, #32]	@ (8003bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bc6:	4a05      	ldr	r2, [pc, #20]	@ (8003bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fbe2 	bl	8002398 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e12b      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe f9c2 	bl	8001f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	@ 0x24
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c44:	f001 fde0 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a81      	ldr	r2, [pc, #516]	@ (8003e54 <HAL_I2C_Init+0x274>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d807      	bhi.n	8003c64 <HAL_I2C_Init+0x84>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a80      	ldr	r2, [pc, #512]	@ (8003e58 <HAL_I2C_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bf94      	ite	ls
 8003c5c:	2301      	movls	r3, #1
 8003c5e:	2300      	movhi	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e006      	b.n	8003c72 <HAL_I2C_Init+0x92>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a7d      	ldr	r2, [pc, #500]	@ (8003e5c <HAL_I2C_Init+0x27c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0e7      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a78      	ldr	r2, [pc, #480]	@ (8003e60 <HAL_I2C_Init+0x280>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8003e54 <HAL_I2C_Init+0x274>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d802      	bhi.n	8003cb4 <HAL_I2C_Init+0xd4>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	e009      	b.n	8003cc8 <HAL_I2C_Init+0xe8>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	4a69      	ldr	r2, [pc, #420]	@ (8003e64 <HAL_I2C_Init+0x284>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	495c      	ldr	r1, [pc, #368]	@ (8003e54 <HAL_I2C_Init+0x274>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d819      	bhi.n	8003d1c <HAL_I2C_Init+0x13c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e59      	subs	r1, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_I2C_Init+0x138>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1e59      	subs	r1, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d16:	e051      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	e04f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <HAL_I2C_Init+0x168>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e012      	b.n	8003d6e <HAL_I2C_Init+0x18e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Init+0x196>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e022      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <HAL_I2C_Init+0x1bc>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1e58      	subs	r0, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	440b      	add	r3, r1
 8003d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9a:	e00f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	6809      	ldr	r1, [r1, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6911      	ldr	r1, [r2, #16]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	4311      	orrs	r1, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	000186a0 	.word	0x000186a0
 8003e58:	001e847f 	.word	0x001e847f
 8003e5c:	003d08ff 	.word	0x003d08ff
 8003e60:	431bde83 	.word	0x431bde83
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	461a      	mov	r2, r3
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e7c:	f7fe ff1a 	bl	8002cb4 <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f040 80e0 	bne.w	8004050 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2319      	movs	r3, #25
 8003e96:	2201      	movs	r2, #1
 8003e98:	4970      	ldr	r1, [pc, #448]	@ (800405c <HAL_I2C_Master_Transmit+0x1f4>)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fe0e 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e0d3      	b.n	8004052 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2C_Master_Transmit+0x50>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0cc      	b.n	8004052 <HAL_I2C_Master_Transmit+0x1ea>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d007      	beq.n	8003ede <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2221      	movs	r2, #33	@ 0x21
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	893a      	ldrh	r2, [r7, #8]
 8003f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a50      	ldr	r2, [pc, #320]	@ (8004060 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f20:	8979      	ldrh	r1, [r7, #10]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fbc8 	bl	80046bc <I2C_MasterRequestWrite>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e08d      	b.n	8004052 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f4c:	e066      	b.n	800401c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fecc 	bl	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_I2C_Master_Transmit+0x188>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	6a39      	ldr	r1, [r7, #32]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fec3 	bl	8004d80 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00d      	beq.n	800401c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	2b04      	cmp	r3, #4
 8004006:	d107      	bne.n	8004018 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004016:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e01a      	b.n	8004052 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d194      	bne.n	8003f4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	00100002 	.word	0x00100002
 8004060:	ffff0000 	.word	0xffff0000

08004064 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407e:	f7fe fe19 	bl	8002cb4 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	f040 80d9 	bne.w	8004244 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2319      	movs	r3, #25
 8004098:	2201      	movs	r2, #1
 800409a:	496d      	ldr	r1, [pc, #436]	@ (8004250 <HAL_I2C_Mem_Write+0x1ec>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fd0d 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0cc      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Mem_Write+0x56>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e0c5      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d007      	beq.n	80040e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2221      	movs	r2, #33	@ 0x21
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004110:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a4d      	ldr	r2, [pc, #308]	@ (8004254 <HAL_I2C_Mem_Write+0x1f0>)
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004122:	88f8      	ldrh	r0, [r7, #6]
 8004124:	893a      	ldrh	r2, [r7, #8]
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4603      	mov	r3, r0
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fb44 	bl	80047c0 <I2C_RequestMemoryWrite>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d052      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e081      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fdd2 	bl	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	2b04      	cmp	r3, #4
 8004158:	d107      	bne.n	800416a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06b      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d11b      	bne.n	80041e4 <HAL_I2C_Mem_Write+0x180>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d017      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1aa      	bne.n	8004142 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fdc5 	bl	8004d80 <I2C_WaitOnBTFFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	2b04      	cmp	r3, #4
 8004202:	d107      	bne.n	8004214 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004212:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e016      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	00100002 	.word	0x00100002
 8004254:	ffff0000 	.word	0xffff0000

08004258 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08c      	sub	sp, #48	@ 0x30
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	817b      	strh	r3, [r7, #10]
 800426a:	460b      	mov	r3, r1
 800426c:	813b      	strh	r3, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004272:	f7fe fd1f 	bl	8002cb4 <HAL_GetTick>
 8004276:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	f040 8214 	bne.w	80046ae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2319      	movs	r3, #25
 800428c:	2201      	movs	r2, #1
 800428e:	497b      	ldr	r1, [pc, #492]	@ (800447c <HAL_I2C_Mem_Read+0x224>)
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fc13 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
 800429e:	e207      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_I2C_Mem_Read+0x56>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e200      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d007      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2222      	movs	r2, #34	@ 0x22
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2240      	movs	r2, #64	@ 0x40
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004304:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a5b      	ldr	r2, [pc, #364]	@ (8004480 <HAL_I2C_Mem_Read+0x228>)
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004316:	88f8      	ldrh	r0, [r7, #6]
 8004318:	893a      	ldrh	r2, [r7, #8]
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	4603      	mov	r3, r0
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fae0 	bl	80048ec <I2C_RequestMemoryRead>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1bc      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	d113      	bne.n	8004366 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e190      	b.n	8004688 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436a:	2b01      	cmp	r3, #1
 800436c:	d11b      	bne.n	80043a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e170      	b.n	8004688 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d11b      	bne.n	80043e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	e150      	b.n	8004688 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043fc:	e144      	b.n	8004688 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	2b03      	cmp	r3, #3
 8004404:	f200 80f1 	bhi.w	80045ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440c:	2b01      	cmp	r3, #1
 800440e:	d123      	bne.n	8004458 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004412:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fcfb 	bl	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e145      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004456:	e117      	b.n	8004688 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445c:	2b02      	cmp	r3, #2
 800445e:	d14e      	bne.n	80044fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	2200      	movs	r2, #0
 8004468:	4906      	ldr	r1, [pc, #24]	@ (8004484 <HAL_I2C_Mem_Read+0x22c>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fb26 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e11a      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
 800447a:	bf00      	nop
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000
 8004484:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044fc:	e0c4      	b.n	8004688 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004504:	2200      	movs	r2, #0
 8004506:	496c      	ldr	r1, [pc, #432]	@ (80046b8 <HAL_I2C_Mem_Read+0x460>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fad7 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cb      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	2200      	movs	r2, #0
 8004562:	4955      	ldr	r1, [pc, #340]	@ (80046b8 <HAL_I2C_Mem_Read+0x460>)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 faa9 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e09d      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045e8:	e04e      	b.n	8004688 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fc0e 	bl	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e058      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d124      	bne.n	8004688 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004642:	2b03      	cmp	r3, #3
 8004644:	d107      	bne.n	8004656 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004654:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f aeb6 	bne.w	80043fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	@ 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010004 	.word	0x00010004

080046bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	460b      	mov	r3, r1
 80046ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d006      	beq.n	80046e6 <I2C_MasterRequestWrite+0x2a>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d003      	beq.n	80046e6 <I2C_MasterRequestWrite+0x2a>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046e4:	d108      	bne.n	80046f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e00b      	b.n	8004710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	2b12      	cmp	r3, #18
 80046fe:	d107      	bne.n	8004710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800470e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f9cd 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00d      	beq.n	8004744 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004736:	d103      	bne.n	8004740 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e035      	b.n	80047b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800474c:	d108      	bne.n	8004760 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800474e:	897b      	ldrh	r3, [r7, #10]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800475c:	611a      	str	r2, [r3, #16]
 800475e:	e01b      	b.n	8004798 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	11db      	asrs	r3, r3, #7
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0306 	and.w	r3, r3, #6
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f063 030f 	orn	r3, r3, #15
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	490e      	ldr	r1, [pc, #56]	@ (80047b8 <I2C_MasterRequestWrite+0xfc>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fa16 	bl	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e010      	b.n	80047b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4907      	ldr	r1, [pc, #28]	@ (80047bc <I2C_MasterRequestWrite+0x100>)
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fa06 	bl	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	00010008 	.word	0x00010008
 80047bc:	00010002 	.word	0x00010002

080047c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	817b      	strh	r3, [r7, #10]
 80047d2:	460b      	mov	r3, r1
 80047d4:	813b      	strh	r3, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f960 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004810:	d103      	bne.n	800481a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e05f      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800482c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	492d      	ldr	r1, [pc, #180]	@ (80048e8 <I2C_RequestMemoryWrite+0x128>)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f9bb 	bl	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e04c      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485c:	6a39      	ldr	r1, [r7, #32]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa46 	bl	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00d      	beq.n	8004886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	2b04      	cmp	r3, #4
 8004870:	d107      	bne.n	8004882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e02b      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800488c:	893b      	ldrh	r3, [r7, #8]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]
 8004896:	e021      	b.n	80048dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004898:	893b      	ldrh	r3, [r7, #8]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	b29b      	uxth	r3, r3
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	6a39      	ldr	r1, [r7, #32]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fa20 	bl	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d107      	bne.n	80048ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e005      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d2:	893b      	ldrh	r3, [r7, #8]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	00010002 	.word	0x00010002

080048ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	461a      	mov	r2, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	817b      	strh	r3, [r7, #10]
 80048fe:	460b      	mov	r3, r1
 8004900:	813b      	strh	r3, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2200      	movs	r2, #0
 800492e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f8c2 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800494c:	d103      	bne.n	8004956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004954:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0aa      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	4952      	ldr	r1, [pc, #328]	@ (8004ab8 <I2C_RequestMemoryRead+0x1cc>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f91d 	bl	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e097      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f9a8 	bl	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e076      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049c8:	893b      	ldrh	r3, [r7, #8]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]
 80049d2:	e021      	b.n	8004a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	b29b      	uxth	r3, r3
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f982 	bl	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d107      	bne.n	8004a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e050      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0e:	893b      	ldrh	r3, [r7, #8]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1a:	6a39      	ldr	r1, [r7, #32]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f967 	bl	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00d      	beq.n	8004a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d107      	bne.n	8004a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e035      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f82b 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7a:	d103      	bne.n	8004a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e013      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a88:	897b      	ldrh	r3, [r7, #10]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	4906      	ldr	r1, [pc, #24]	@ (8004ab8 <I2C_RequestMemoryRead+0x1cc>)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f886 	bl	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	00010002 	.word	0x00010002

08004abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004acc:	e048      	b.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d044      	beq.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fe f8ed 	bl	8002cb4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d139      	bne.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d10d      	bne.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	43da      	mvns	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	e00c      	b.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d116      	bne.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e023      	b.n	8004ba8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d10d      	bne.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	43da      	mvns	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	e00c      	b.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d093      	beq.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bbe:	e071      	b.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bce:	d123      	bne.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e067      	b.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d041      	beq.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fe f848 	bl	8002cb4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d136      	bne.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10c      	bne.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	43da      	mvns	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e00b      	b.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	43da      	mvns	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e021      	b.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d10c      	bne.n	8004cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e00b      	b.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bf14      	ite	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	2300      	moveq	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f47f af6d 	bne.w	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cfc:	e034      	b.n	8004d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f8e3 	bl	8004eca <I2C_IsAcknowledgeFailed>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e034      	b.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d028      	beq.n	8004d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	f7fd ffcd 	bl	8002cb4 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d11d      	bne.n	8004d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d36:	2b80      	cmp	r3, #128	@ 0x80
 8004d38:	d016      	beq.n	8004d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e007      	b.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d72:	2b80      	cmp	r3, #128	@ 0x80
 8004d74:	d1c3      	bne.n	8004cfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d8c:	e034      	b.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f89b 	bl	8004eca <I2C_IsAcknowledgeFailed>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e034      	b.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d028      	beq.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fd ff85 	bl	8002cb4 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11d      	bne.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d016      	beq.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e007      	b.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d1c3      	bne.n	8004d8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e1c:	e049      	b.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d119      	bne.n	8004e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0210 	mvn.w	r2, #16
 8004e34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e030      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e60:	f7fd ff28 	bl	8002cb4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d302      	bcc.n	8004e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d11d      	bne.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e80:	2b40      	cmp	r3, #64	@ 0x40
 8004e82:	d016      	beq.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e007      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebc:	2b40      	cmp	r3, #64	@ 0x40
 8004ebe:	d1ae      	bne.n	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee0:	d11b      	bne.n	8004f1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004eea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f043 0204 	orr.w	r2, r3, #4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e267      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d075      	beq.n	8005032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f46:	4b88      	ldr	r3, [pc, #544]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00c      	beq.n	8004f6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f52:	4b85      	ldr	r3, [pc, #532]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d112      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b82      	ldr	r3, [pc, #520]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f6a:	d10b      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d05b      	beq.n	8005030 <HAL_RCC_OscConfig+0x108>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d157      	bne.n	8005030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e242      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCC_OscConfig+0x74>
 8004f8e:	4b76      	ldr	r3, [pc, #472]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a75      	ldr	r2, [pc, #468]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e01d      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x98>
 8004fa6:	4b70      	ldr	r3, [pc, #448]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6f      	ldr	r2, [pc, #444]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e00b      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004fc0:	4b69      	ldr	r3, [pc, #420]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a68      	ldr	r2, [pc, #416]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b66      	ldr	r3, [pc, #408]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a65      	ldr	r2, [pc, #404]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fd fe68 	bl	8002cb4 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe8:	f7fd fe64 	bl	8002cb4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	@ 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e207      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0xc0>
 8005006:	e014      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fd fe54 	bl	8002cb4 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005010:	f7fd fe50 	bl	8002cb4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	@ 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e1f3      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	4b51      	ldr	r3, [pc, #324]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0xe8>
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d063      	beq.n	8005106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800503e:	4b4a      	ldr	r3, [pc, #296]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504a:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005052:	2b08      	cmp	r3, #8
 8005054:	d11c      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b44      	ldr	r3, [pc, #272]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d116      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005062:	4b41      	ldr	r3, [pc, #260]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e1c7      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507a:	4b3b      	ldr	r3, [pc, #236]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4937      	ldr	r1, [pc, #220]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 800508a:	4313      	orrs	r3, r2
 800508c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	e03a      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005098:	4b34      	ldr	r3, [pc, #208]	@ (800516c <HAL_RCC_OscConfig+0x244>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd fe09 	bl	8002cb4 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fd fe05 	bl	8002cb4 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e1a8      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c4:	4b28      	ldr	r3, [pc, #160]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4925      	ldr	r1, [pc, #148]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
 80050d8:	e015      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050da:	4b24      	ldr	r3, [pc, #144]	@ (800516c <HAL_RCC_OscConfig+0x244>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd fde8 	bl	8002cb4 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e8:	f7fd fde4 	bl	8002cb4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e187      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d036      	beq.n	8005180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511a:	4b15      	ldr	r3, [pc, #84]	@ (8005170 <HAL_RCC_OscConfig+0x248>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fd fdc8 	bl	8002cb4 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005128:	f7fd fdc4 	bl	8002cb4 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e167      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513a:	4b0b      	ldr	r3, [pc, #44]	@ (8005168 <HAL_RCC_OscConfig+0x240>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x200>
 8005146:	e01b      	b.n	8005180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005148:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <HAL_RCC_OscConfig+0x248>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514e:	f7fd fdb1 	bl	8002cb4 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005154:	e00e      	b.n	8005174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005156:	f7fd fdad 	bl	8002cb4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d907      	bls.n	8005174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e150      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
 8005168:	40023800 	.word	0x40023800
 800516c:	42470000 	.word	0x42470000
 8005170:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005174:	4b88      	ldr	r3, [pc, #544]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1ea      	bne.n	8005156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8097 	beq.w	80052bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005192:	4b81      	ldr	r3, [pc, #516]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	4b7d      	ldr	r3, [pc, #500]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	4b77      	ldr	r3, [pc, #476]	@ (800539c <HAL_RCC_OscConfig+0x474>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d118      	bne.n	80051fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ca:	4b74      	ldr	r3, [pc, #464]	@ (800539c <HAL_RCC_OscConfig+0x474>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a73      	ldr	r2, [pc, #460]	@ (800539c <HAL_RCC_OscConfig+0x474>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fd fd6d 	bl	8002cb4 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fd fd69 	bl	8002cb4 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e10c      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	4b6a      	ldr	r3, [pc, #424]	@ (800539c <HAL_RCC_OscConfig+0x474>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x2ea>
 8005204:	4b64      	ldr	r3, [pc, #400]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005208:	4a63      	ldr	r2, [pc, #396]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005210:	e01c      	b.n	800524c <HAL_RCC_OscConfig+0x324>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b05      	cmp	r3, #5
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x30c>
 800521a:	4b5f      	ldr	r3, [pc, #380]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521e:	4a5e      	ldr	r2, [pc, #376]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	6713      	str	r3, [r2, #112]	@ 0x70
 8005226:	4b5c      	ldr	r3, [pc, #368]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522a:	4a5b      	ldr	r2, [pc, #364]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6713      	str	r3, [r2, #112]	@ 0x70
 8005232:	e00b      	b.n	800524c <HAL_RCC_OscConfig+0x324>
 8005234:	4b58      	ldr	r3, [pc, #352]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005238:	4a57      	ldr	r2, [pc, #348]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005240:	4b55      	ldr	r3, [pc, #340]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005244:	4a54      	ldr	r2, [pc, #336]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 0304 	bic.w	r3, r3, #4
 800524a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fd fd2e 	bl	8002cb4 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	e00a      	b.n	8005272 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525c:	f7fd fd2a 	bl	8002cb4 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0cb      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	4b49      	ldr	r3, [pc, #292]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0ee      	beq.n	800525c <HAL_RCC_OscConfig+0x334>
 800527e:	e014      	b.n	80052aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005280:	f7fd fd18 	bl	8002cb4 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fd fd14 	bl	8002cb4 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0b5      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	4b3e      	ldr	r3, [pc, #248]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ee      	bne.n	8005288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b0:	4b39      	ldr	r3, [pc, #228]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	4a38      	ldr	r2, [pc, #224]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80052b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80a1 	beq.w	8005408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052c6:	4b34      	ldr	r3, [pc, #208]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d05c      	beq.n	800538c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d141      	bne.n	800535e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052da:	4b31      	ldr	r3, [pc, #196]	@ (80053a0 <HAL_RCC_OscConfig+0x478>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fd fce8 	bl	8002cb4 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fd fce4 	bl	8002cb4 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e087      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	019b      	lsls	r3, r3, #6
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	3b01      	subs	r3, #1
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	491b      	ldr	r1, [pc, #108]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005330:	4b1b      	ldr	r3, [pc, #108]	@ (80053a0 <HAL_RCC_OscConfig+0x478>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7fd fcbd 	bl	8002cb4 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800533e:	f7fd fcb9 	bl	8002cb4 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e05c      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005350:	4b11      	ldr	r3, [pc, #68]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x416>
 800535c:	e054      	b.n	8005408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535e:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <HAL_RCC_OscConfig+0x478>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fd fca6 	bl	8002cb4 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fd fca2 	bl	8002cb4 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e045      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <HAL_RCC_OscConfig+0x470>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x444>
 800538a:	e03d      	b.n	8005408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e038      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
 8005398:	40023800 	.word	0x40023800
 800539c:	40007000 	.word	0x40007000
 80053a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005414 <HAL_RCC_OscConfig+0x4ec>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d028      	beq.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d121      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d11a      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053dc:	4293      	cmp	r3, r2
 80053de:	d111      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	3b01      	subs	r3, #1
 80053ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800

08005418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0cc      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800542c:	4b68      	ldr	r3, [pc, #416]	@ (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d90c      	bls.n	8005454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b65      	ldr	r3, [pc, #404]	@ (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b63      	ldr	r3, [pc, #396]	@ (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0b8      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800546c:	4b59      	ldr	r3, [pc, #356]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a58      	ldr	r2, [pc, #352]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005484:	4b53      	ldr	r3, [pc, #332]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a52      	ldr	r2, [pc, #328]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800548e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005490:	4b50      	ldr	r3, [pc, #320]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	494d      	ldr	r1, [pc, #308]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d044      	beq.n	8005538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d107      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b6:	4b47      	ldr	r3, [pc, #284]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d119      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e07f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d003      	beq.n	80054d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d6:	4b3f      	ldr	r3, [pc, #252]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e06f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e6:	4b3b      	ldr	r3, [pc, #236]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e067      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f6:	4b37      	ldr	r3, [pc, #220]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 0203 	bic.w	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4934      	ldr	r1, [pc, #208]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005508:	f7fd fbd4 	bl	8002cb4 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	e00a      	b.n	8005526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005510:	f7fd fbd0 	bl	8002cb4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e04f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	4b2b      	ldr	r3, [pc, #172]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 020c 	and.w	r2, r3, #12
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	429a      	cmp	r2, r3
 8005536:	d1eb      	bne.n	8005510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005538:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d20c      	bcs.n	8005560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b22      	ldr	r3, [pc, #136]	@ (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e032      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800556c:	4b19      	ldr	r3, [pc, #100]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4916      	ldr	r1, [pc, #88]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800558a:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	490e      	ldr	r1, [pc, #56]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800559e:	f000 f821 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80055a2:	4602      	mov	r2, r0
 80055a4:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	490a      	ldr	r1, [pc, #40]	@ (80055d8 <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	5ccb      	ldrb	r3, [r1, r3]
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	4a09      	ldr	r2, [pc, #36]	@ (80055dc <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80055ba:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <HAL_RCC_ClockConfig+0x1c8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd fb34 	bl	8002c2c <HAL_InitTick>

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023c00 	.word	0x40023c00
 80055d4:	40023800 	.word	0x40023800
 80055d8:	0800b2a4 	.word	0x0800b2a4
 80055dc:	20000000 	.word	0x20000000
 80055e0:	20000004 	.word	0x20000004

080055e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e8:	b094      	sub	sp, #80	@ 0x50
 80055ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055fc:	4b79      	ldr	r3, [pc, #484]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	2b08      	cmp	r3, #8
 8005606:	d00d      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0x40>
 8005608:	2b08      	cmp	r3, #8
 800560a:	f200 80e1 	bhi.w	80057d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x34>
 8005612:	2b04      	cmp	r3, #4
 8005614:	d003      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0x3a>
 8005616:	e0db      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005618:	4b73      	ldr	r3, [pc, #460]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800561a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800561c:	e0db      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800561e:	4b73      	ldr	r3, [pc, #460]	@ (80057ec <HAL_RCC_GetSysClockFreq+0x208>)
 8005620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005622:	e0d8      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005624:	4b6f      	ldr	r3, [pc, #444]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800562c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800562e:	4b6d      	ldr	r3, [pc, #436]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d063      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563a:	4b6a      	ldr	r3, [pc, #424]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	2200      	movs	r2, #0
 8005642:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005644:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564c:	633b      	str	r3, [r7, #48]	@ 0x30
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	@ 0x34
 8005652:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005656:	4622      	mov	r2, r4
 8005658:	462b      	mov	r3, r5
 800565a:	f04f 0000 	mov.w	r0, #0
 800565e:	f04f 0100 	mov.w	r1, #0
 8005662:	0159      	lsls	r1, r3, #5
 8005664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005668:	0150      	lsls	r0, r2, #5
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4621      	mov	r1, r4
 8005670:	1a51      	subs	r1, r2, r1
 8005672:	6139      	str	r1, [r7, #16]
 8005674:	4629      	mov	r1, r5
 8005676:	eb63 0301 	sbc.w	r3, r3, r1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005688:	4659      	mov	r1, fp
 800568a:	018b      	lsls	r3, r1, #6
 800568c:	4651      	mov	r1, sl
 800568e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005692:	4651      	mov	r1, sl
 8005694:	018a      	lsls	r2, r1, #6
 8005696:	4651      	mov	r1, sl
 8005698:	ebb2 0801 	subs.w	r8, r2, r1
 800569c:	4659      	mov	r1, fp
 800569e:	eb63 0901 	sbc.w	r9, r3, r1
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056b6:	4690      	mov	r8, r2
 80056b8:	4699      	mov	r9, r3
 80056ba:	4623      	mov	r3, r4
 80056bc:	eb18 0303 	adds.w	r3, r8, r3
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	462b      	mov	r3, r5
 80056c4:	eb49 0303 	adc.w	r3, r9, r3
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056d6:	4629      	mov	r1, r5
 80056d8:	024b      	lsls	r3, r1, #9
 80056da:	4621      	mov	r1, r4
 80056dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056e0:	4621      	mov	r1, r4
 80056e2:	024a      	lsls	r2, r1, #9
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ea:	2200      	movs	r2, #0
 80056ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056f4:	f7fb fb20 	bl	8000d38 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4613      	mov	r3, r2
 80056fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005700:	e058      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005702:	4b38      	ldr	r3, [pc, #224]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	2200      	movs	r2, #0
 800570a:	4618      	mov	r0, r3
 800570c:	4611      	mov	r1, r2
 800570e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	2300      	movs	r3, #0
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
 8005718:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	f04f 0000 	mov.w	r0, #0
 8005724:	f04f 0100 	mov.w	r1, #0
 8005728:	0159      	lsls	r1, r3, #5
 800572a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800572e:	0150      	lsls	r0, r2, #5
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4641      	mov	r1, r8
 8005736:	ebb2 0a01 	subs.w	sl, r2, r1
 800573a:	4649      	mov	r1, r9
 800573c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800574c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005750:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005754:	ebb2 040a 	subs.w	r4, r2, sl
 8005758:	eb63 050b 	sbc.w	r5, r3, fp
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	00eb      	lsls	r3, r5, #3
 8005766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800576a:	00e2      	lsls	r2, r4, #3
 800576c:	4614      	mov	r4, r2
 800576e:	461d      	mov	r5, r3
 8005770:	4643      	mov	r3, r8
 8005772:	18e3      	adds	r3, r4, r3
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	464b      	mov	r3, r9
 8005778:	eb45 0303 	adc.w	r3, r5, r3
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800578a:	4629      	mov	r1, r5
 800578c:	028b      	lsls	r3, r1, #10
 800578e:	4621      	mov	r1, r4
 8005790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005794:	4621      	mov	r1, r4
 8005796:	028a      	lsls	r2, r1, #10
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800579e:	2200      	movs	r2, #0
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	61fa      	str	r2, [r7, #28]
 80057a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a8:	f7fb fac6 	bl	8000d38 <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4613      	mov	r3, r2
 80057b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057b4:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80057c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057ce:	e002      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3750      	adds	r7, #80	@ 0x50
 80057dc:	46bd      	mov	sp, r7
 80057de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	007a1200 	.word	0x007a1200

080057f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f4:	4b03      	ldr	r3, [pc, #12]	@ (8005804 <HAL_RCC_GetHCLKFreq+0x14>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800580c:	f7ff fff0 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4903      	ldr	r1, [pc, #12]	@ (800582c <HAL_RCC_GetPCLK1Freq+0x24>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	0800b2b4 	.word	0x0800b2b4

08005830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005834:	f7ff ffdc 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0b5b      	lsrs	r3, r3, #13
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4903      	ldr	r1, [pc, #12]	@ (8005854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023800 	.word	0x40023800
 8005854:	0800b2b4 	.word	0x0800b2b4

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e042      	b.n	80058f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fd f938 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	@ 0x24
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fdd3 	bl	8006448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	@ 0x28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b20      	cmp	r3, #32
 8005916:	d175      	bne.n	8005a04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_UART_Transmit+0x2c>
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e06e      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2221      	movs	r2, #33	@ 0x21
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005936:	f7fd f9bd 	bl	8002cb4 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005950:	d108      	bne.n	8005964 <HAL_UART_Transmit+0x6c>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e003      	b.n	800596c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800596c:	e02e      	b.n	80059cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	@ 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb37 	bl	8005fec <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e03a      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	3302      	adds	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e007      	b.n	80059be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1cb      	bne.n	800596e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2140      	movs	r1, #64	@ 0x40
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fb03 	bl	8005fec <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e000      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d112      	bne.n	8005a4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_Receive_IT+0x26>
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e00b      	b.n	8005a50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	461a      	mov	r2, r3
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fb2a 	bl	800609e <UART_Start_Receive_IT>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10f      	bne.n	8005abe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <HAL_UART_IRQHandler+0x66>
 8005aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fc07 	bl	80062ca <UART_Receive_IT>
      return;
 8005abc:	e273      	b.n	8005fa6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80de 	beq.w	8005c84 <HAL_UART_IRQHandler+0x22c>
 8005ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d106      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80d1 	beq.w	8005c84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <HAL_UART_IRQHandler+0xae>
 8005aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f043 0201 	orr.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <HAL_UART_IRQHandler+0xd2>
 8005b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	f043 0202 	orr.w	r2, r3, #2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_UART_IRQHandler+0xf6>
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b46:	f043 0204 	orr.w	r2, r3, #4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <HAL_UART_IRQHandler+0x126>
 8005b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d105      	bne.n	8005b72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f043 0208 	orr.w	r2, r3, #8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 820a 	beq.w	8005f9c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x14e>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fb92 	bl	80062ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x17a>
 8005bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04f      	beq.n	8005c72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa9d 	bl	8006112 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b40      	cmp	r3, #64	@ 0x40
 8005be4:	d141      	bne.n	8005c6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1d9      	bne.n	8005be6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d013      	beq.n	8005c62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	4a8a      	ldr	r2, [pc, #552]	@ (8005e68 <HAL_UART_IRQHandler+0x410>)
 8005c40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd fdd7 	bl	80037fa <HAL_DMA_Abort_IT>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d016      	beq.n	8005c80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	e00e      	b.n	8005c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9ac 	bl	8005fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	e00a      	b.n	8005c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9a8 	bl	8005fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	e006      	b.n	8005c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9a4 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c7e:	e18d      	b.n	8005f9c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	bf00      	nop
    return;
 8005c82:	e18b      	b.n	8005f9c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f040 8167 	bne.w	8005f5c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8160 	beq.w	8005f5c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8159 	beq.w	8005f5c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cca:	2b40      	cmp	r3, #64	@ 0x40
 8005ccc:	f040 80ce 	bne.w	8005e6c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80a9 	beq.w	8005e38 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	f080 80a2 	bcs.w	8005e38 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d06:	f000 8088 	beq.w	8005e1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1d9      	bne.n	8005d0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e1      	bne.n	8005d56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005db6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005db8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e3      	bne.n	8005d92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dea:	f023 0310 	bic.w	r3, r3, #16
 8005dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005dfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e3      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fd fc80 	bl	800371a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8cf 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e36:	e0b3      	b.n	8005fa0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e40:	429a      	cmp	r2, r3
 8005e42:	f040 80ad 	bne.w	8005fa0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e50:	f040 80a6 	bne.w	8005fa0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8b7 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
      return;
 8005e66:	e09b      	b.n	8005fa0 <HAL_UART_IRQHandler+0x548>
 8005e68:	080061d9 	.word	0x080061d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 808e 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8089 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e3      	bne.n	8005e92 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f34:	61fa      	str	r2, [r7, #28]
 8005f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	617b      	str	r3, [r7, #20]
   return(result);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f83d 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f5a:	e023      	b.n	8005fa4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <HAL_UART_IRQHandler+0x524>
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f940 	bl	80061fa <UART_Transmit_IT>
    return;
 8005f7a:	e014      	b.n	8005fa6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x54e>
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f980 	bl	800629a <UART_EndTransmit_IT>
    return;
 8005f9a:	e004      	b.n	8005fa6 <HAL_UART_IRQHandler+0x54e>
    return;
 8005f9c:	bf00      	nop
 8005f9e:	e002      	b.n	8005fa6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005fa0:	bf00      	nop
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005fa4:	bf00      	nop
  }
}
 8005fa6:	37e8      	adds	r7, #232	@ 0xe8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffc:	e03b      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006004:	d037      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006006:	f7fc fe55 	bl	8002cb4 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	429a      	cmp	r2, r3
 8006014:	d302      	bcc.n	800601c <UART_WaitOnFlagUntilTimeout+0x30>
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e03a      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	d023      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0x8a>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b80      	cmp	r3, #128	@ 0x80
 8006032:	d020      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b40      	cmp	r3, #64	@ 0x40
 8006038:	d01d      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b08      	cmp	r3, #8
 8006046:	d116      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f857 	bl	8006112 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2208      	movs	r2, #8
 8006068:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e00f      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d0b4      	beq.n	8005ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	4613      	mov	r3, r2
 80060aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	88fa      	ldrh	r2, [r7, #6]
 80060b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2222      	movs	r2, #34	@ 0x22
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0220 	orr.w	r2, r2, #32
 8006102:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006112:	b480      	push	{r7}
 8006114:	b095      	sub	sp, #84	@ 0x54
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006130:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800613a:	643a      	str	r2, [r7, #64]	@ 0x40
 800613c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006140:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	61fb      	str	r3, [r7, #28]
   return(result);
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800616e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006170:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006186:	2b01      	cmp	r3, #1
 8006188:	d119      	bne.n	80061be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	60bb      	str	r3, [r7, #8]
   return(result);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061aa:	61ba      	str	r2, [r7, #24]
 80061ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6979      	ldr	r1, [r7, #20]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	613b      	str	r3, [r7, #16]
   return(result);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061cc:	bf00      	nop
 80061ce:	3754      	adds	r7, #84	@ 0x54
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fee7 	bl	8005fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b21      	cmp	r3, #33	@ 0x21
 800620c:	d13e      	bne.n	800628c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006216:	d114      	bne.n	8006242 <UART_Transmit_IT+0x48>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d110      	bne.n	8006242 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006234:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	1c9a      	adds	r2, r3, #2
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	621a      	str	r2, [r3, #32]
 8006240:	e008      	b.n	8006254 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6211      	str	r1, [r2, #32]
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29b      	uxth	r3, r3
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4619      	mov	r1, r3
 8006262:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10f      	bne.n	8006288 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006276:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006286:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	e000      	b.n	800628e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800628c:	2302      	movs	r3, #2
  }
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fe76 	bl	8005fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b08c      	sub	sp, #48	@ 0x30
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b22      	cmp	r3, #34	@ 0x22
 80062e4:	f040 80aa 	bne.w	800643c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f0:	d115      	bne.n	800631e <UART_Receive_IT+0x54>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d111      	bne.n	800631e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630c:	b29a      	uxth	r2, r3
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	1c9a      	adds	r2, r3, #2
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	629a      	str	r2, [r3, #40]	@ 0x28
 800631c:	e024      	b.n	8006368 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632c:	d007      	beq.n	800633e <UART_Receive_IT+0x74>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <UART_Receive_IT+0x82>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e008      	b.n	800635e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006358:	b2da      	uxtb	r2, r3
 800635a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29b      	uxth	r3, r3
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4619      	mov	r1, r3
 8006376:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006378:	2b00      	cmp	r3, #0
 800637a:	d15d      	bne.n	8006438 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0220 	bic.w	r2, r2, #32
 800638a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800639a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d135      	bne.n	800642e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	613b      	str	r3, [r7, #16]
   return(result);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e8:	623a      	str	r2, [r7, #32]
 80063ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	69f9      	ldr	r1, [r7, #28]
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e5      	bne.n	80063c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	2b10      	cmp	r3, #16
 8006408:	d10a      	bne.n	8006420 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fdd4 	bl	8005fd4 <HAL_UARTEx_RxEventCallback>
 800642c:	e002      	b.n	8006434 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fb fff4 	bl	800241c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	e002      	b.n	800643e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3730      	adds	r7, #48	@ 0x30
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800644c:	b0c0      	sub	sp, #256	@ 0x100
 800644e:	af00      	add	r7, sp, #0
 8006450:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	ea40 0301 	orr.w	r3, r0, r1
 8006470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	431a      	orrs	r2, r3
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80064a0:	f021 010c 	bic.w	r1, r1, #12
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064ae:	430b      	orrs	r3, r1
 80064b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c2:	6999      	ldr	r1, [r3, #24]
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	ea40 0301 	orr.w	r3, r0, r1
 80064ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b8f      	ldr	r3, [pc, #572]	@ (8006714 <UART_SetConfig+0x2cc>)
 80064d8:	429a      	cmp	r2, r3
 80064da:	d005      	beq.n	80064e8 <UART_SetConfig+0xa0>
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006718 <UART_SetConfig+0x2d0>)
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d104      	bne.n	80064f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7ff f9a2 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 80064ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064f0:	e003      	b.n	80064fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7ff f989 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 80064f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006504:	f040 810c 	bne.w	8006720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800650c:	2200      	movs	r2, #0
 800650e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006512:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800651a:	4622      	mov	r2, r4
 800651c:	462b      	mov	r3, r5
 800651e:	1891      	adds	r1, r2, r2
 8006520:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006522:	415b      	adcs	r3, r3
 8006524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800652a:	4621      	mov	r1, r4
 800652c:	eb12 0801 	adds.w	r8, r2, r1
 8006530:	4629      	mov	r1, r5
 8006532:	eb43 0901 	adc.w	r9, r3, r1
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800654a:	4690      	mov	r8, r2
 800654c:	4699      	mov	r9, r3
 800654e:	4623      	mov	r3, r4
 8006550:	eb18 0303 	adds.w	r3, r8, r3
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006558:	462b      	mov	r3, r5
 800655a:	eb49 0303 	adc.w	r3, r9, r3
 800655e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800656e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006576:	460b      	mov	r3, r1
 8006578:	18db      	adds	r3, r3, r3
 800657a:	653b      	str	r3, [r7, #80]	@ 0x50
 800657c:	4613      	mov	r3, r2
 800657e:	eb42 0303 	adc.w	r3, r2, r3
 8006582:	657b      	str	r3, [r7, #84]	@ 0x54
 8006584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800658c:	f7fa fbd4 	bl	8000d38 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4b61      	ldr	r3, [pc, #388]	@ (800671c <UART_SetConfig+0x2d4>)
 8006596:	fba3 2302 	umull	r2, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	011c      	lsls	r4, r3, #4
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80065b8:	415b      	adcs	r3, r3
 80065ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065c0:	4641      	mov	r1, r8
 80065c2:	eb12 0a01 	adds.w	sl, r2, r1
 80065c6:	4649      	mov	r1, r9
 80065c8:	eb43 0b01 	adc.w	fp, r3, r1
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065e0:	4692      	mov	sl, r2
 80065e2:	469b      	mov	fp, r3
 80065e4:	4643      	mov	r3, r8
 80065e6:	eb1a 0303 	adds.w	r3, sl, r3
 80065ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065ee:	464b      	mov	r3, r9
 80065f0:	eb4b 0303 	adc.w	r3, fp, r3
 80065f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006604:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800660c:	460b      	mov	r3, r1
 800660e:	18db      	adds	r3, r3, r3
 8006610:	643b      	str	r3, [r7, #64]	@ 0x40
 8006612:	4613      	mov	r3, r2
 8006614:	eb42 0303 	adc.w	r3, r2, r3
 8006618:	647b      	str	r3, [r7, #68]	@ 0x44
 800661a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800661e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006622:	f7fa fb89 	bl	8000d38 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4611      	mov	r1, r2
 800662c:	4b3b      	ldr	r3, [pc, #236]	@ (800671c <UART_SetConfig+0x2d4>)
 800662e:	fba3 2301 	umull	r2, r3, r3, r1
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	2264      	movs	r2, #100	@ 0x64
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	1acb      	subs	r3, r1, r3
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006642:	4b36      	ldr	r3, [pc, #216]	@ (800671c <UART_SetConfig+0x2d4>)
 8006644:	fba3 2302 	umull	r2, r3, r3, r2
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006650:	441c      	add	r4, r3
 8006652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006656:	2200      	movs	r2, #0
 8006658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800665c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	1891      	adds	r1, r2, r2
 800666a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800666c:	415b      	adcs	r3, r3
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006674:	4641      	mov	r1, r8
 8006676:	1851      	adds	r1, r2, r1
 8006678:	6339      	str	r1, [r7, #48]	@ 0x30
 800667a:	4649      	mov	r1, r9
 800667c:	414b      	adcs	r3, r1
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	f04f 0300 	mov.w	r3, #0
 8006688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800668c:	4659      	mov	r1, fp
 800668e:	00cb      	lsls	r3, r1, #3
 8006690:	4651      	mov	r1, sl
 8006692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006696:	4651      	mov	r1, sl
 8006698:	00ca      	lsls	r2, r1, #3
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	4642      	mov	r2, r8
 80066a2:	189b      	adds	r3, r3, r2
 80066a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066a8:	464b      	mov	r3, r9
 80066aa:	460a      	mov	r2, r1
 80066ac:	eb42 0303 	adc.w	r3, r2, r3
 80066b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066c8:	460b      	mov	r3, r1
 80066ca:	18db      	adds	r3, r3, r3
 80066cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ce:	4613      	mov	r3, r2
 80066d0:	eb42 0303 	adc.w	r3, r2, r3
 80066d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066de:	f7fa fb2b 	bl	8000d38 <__aeabi_uldivmod>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <UART_SetConfig+0x2d4>)
 80066e8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	2164      	movs	r1, #100	@ 0x64
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	3332      	adds	r3, #50	@ 0x32
 80066fa:	4a08      	ldr	r2, [pc, #32]	@ (800671c <UART_SetConfig+0x2d4>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f003 0207 	and.w	r2, r3, #7
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4422      	add	r2, r4
 800670e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006710:	e106      	b.n	8006920 <UART_SetConfig+0x4d8>
 8006712:	bf00      	nop
 8006714:	40011000 	.word	0x40011000
 8006718:	40011400 	.word	0x40011400
 800671c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006724:	2200      	movs	r2, #0
 8006726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800672a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800672e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	1891      	adds	r1, r2, r2
 8006738:	6239      	str	r1, [r7, #32]
 800673a:	415b      	adcs	r3, r3
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
 800673e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006742:	4641      	mov	r1, r8
 8006744:	1854      	adds	r4, r2, r1
 8006746:	4649      	mov	r1, r9
 8006748:	eb43 0501 	adc.w	r5, r3, r1
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	00eb      	lsls	r3, r5, #3
 8006756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800675a:	00e2      	lsls	r2, r4, #3
 800675c:	4614      	mov	r4, r2
 800675e:	461d      	mov	r5, r3
 8006760:	4643      	mov	r3, r8
 8006762:	18e3      	adds	r3, r4, r3
 8006764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006768:	464b      	mov	r3, r9
 800676a:	eb45 0303 	adc.w	r3, r5, r3
 800676e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800677e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800678e:	4629      	mov	r1, r5
 8006790:	008b      	lsls	r3, r1, #2
 8006792:	4621      	mov	r1, r4
 8006794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006798:	4621      	mov	r1, r4
 800679a:	008a      	lsls	r2, r1, #2
 800679c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067a0:	f7fa faca 	bl	8000d38 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4b60      	ldr	r3, [pc, #384]	@ (800692c <UART_SetConfig+0x4e4>)
 80067aa:	fba3 2302 	umull	r2, r3, r3, r2
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	011c      	lsls	r4, r3, #4
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	61b9      	str	r1, [r7, #24]
 80067cc:	415b      	adcs	r3, r3
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067d4:	4641      	mov	r1, r8
 80067d6:	1851      	adds	r1, r2, r1
 80067d8:	6139      	str	r1, [r7, #16]
 80067da:	4649      	mov	r1, r9
 80067dc:	414b      	adcs	r3, r1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ec:	4659      	mov	r1, fp
 80067ee:	00cb      	lsls	r3, r1, #3
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f6:	4651      	mov	r1, sl
 80067f8:	00ca      	lsls	r2, r1, #3
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	4603      	mov	r3, r0
 8006800:	4642      	mov	r2, r8
 8006802:	189b      	adds	r3, r3, r2
 8006804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800681e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800682c:	4649      	mov	r1, r9
 800682e:	008b      	lsls	r3, r1, #2
 8006830:	4641      	mov	r1, r8
 8006832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006836:	4641      	mov	r1, r8
 8006838:	008a      	lsls	r2, r1, #2
 800683a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800683e:	f7fa fa7b 	bl	8000d38 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4611      	mov	r1, r2
 8006848:	4b38      	ldr	r3, [pc, #224]	@ (800692c <UART_SetConfig+0x4e4>)
 800684a:	fba3 2301 	umull	r2, r3, r3, r1
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2264      	movs	r2, #100	@ 0x64
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	1acb      	subs	r3, r1, r3
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	3332      	adds	r3, #50	@ 0x32
 800685c:	4a33      	ldr	r2, [pc, #204]	@ (800692c <UART_SetConfig+0x4e4>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006868:	441c      	add	r4, r3
 800686a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800686e:	2200      	movs	r2, #0
 8006870:	673b      	str	r3, [r7, #112]	@ 0x70
 8006872:	677a      	str	r2, [r7, #116]	@ 0x74
 8006874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	1891      	adds	r1, r2, r2
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	415b      	adcs	r3, r3
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006888:	4641      	mov	r1, r8
 800688a:	1851      	adds	r1, r2, r1
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	4649      	mov	r1, r9
 8006890:	414b      	adcs	r3, r1
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068a0:	4659      	mov	r1, fp
 80068a2:	00cb      	lsls	r3, r1, #3
 80068a4:	4651      	mov	r1, sl
 80068a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068aa:	4651      	mov	r1, sl
 80068ac:	00ca      	lsls	r2, r1, #3
 80068ae:	4610      	mov	r0, r2
 80068b0:	4619      	mov	r1, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	4642      	mov	r2, r8
 80068b6:	189b      	adds	r3, r3, r2
 80068b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068ba:	464b      	mov	r3, r9
 80068bc:	460a      	mov	r2, r1
 80068be:	eb42 0303 	adc.w	r3, r2, r3
 80068c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80068ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068dc:	4649      	mov	r1, r9
 80068de:	008b      	lsls	r3, r1, #2
 80068e0:	4641      	mov	r1, r8
 80068e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e6:	4641      	mov	r1, r8
 80068e8:	008a      	lsls	r2, r1, #2
 80068ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068ee:	f7fa fa23 	bl	8000d38 <__aeabi_uldivmod>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <UART_SetConfig+0x4e4>)
 80068f8:	fba3 1302 	umull	r1, r3, r3, r2
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	2164      	movs	r1, #100	@ 0x64
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	3332      	adds	r3, #50	@ 0x32
 800690a:	4a08      	ldr	r2, [pc, #32]	@ (800692c <UART_SetConfig+0x4e4>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	f003 020f 	and.w	r2, r3, #15
 8006916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4422      	add	r2, r4
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006926:	46bd      	mov	sp, r7
 8006928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800692c:	51eb851f 	.word	0x51eb851f

08006930 <atoi>:
 8006930:	220a      	movs	r2, #10
 8006932:	2100      	movs	r1, #0
 8006934:	f000 b87c 	b.w	8006a30 <strtol>

08006938 <_strtol_l.isra.0>:
 8006938:	2b24      	cmp	r3, #36	@ 0x24
 800693a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693e:	4686      	mov	lr, r0
 8006940:	4690      	mov	r8, r2
 8006942:	d801      	bhi.n	8006948 <_strtol_l.isra.0+0x10>
 8006944:	2b01      	cmp	r3, #1
 8006946:	d106      	bne.n	8006956 <_strtol_l.isra.0+0x1e>
 8006948:	f001 f99a 	bl	8007c80 <__errno>
 800694c:	2316      	movs	r3, #22
 800694e:	6003      	str	r3, [r0, #0]
 8006950:	2000      	movs	r0, #0
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	4834      	ldr	r0, [pc, #208]	@ (8006a28 <_strtol_l.isra.0+0xf0>)
 8006958:	460d      	mov	r5, r1
 800695a:	462a      	mov	r2, r5
 800695c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006960:	5d06      	ldrb	r6, [r0, r4]
 8006962:	f016 0608 	ands.w	r6, r6, #8
 8006966:	d1f8      	bne.n	800695a <_strtol_l.isra.0+0x22>
 8006968:	2c2d      	cmp	r4, #45	@ 0x2d
 800696a:	d110      	bne.n	800698e <_strtol_l.isra.0+0x56>
 800696c:	782c      	ldrb	r4, [r5, #0]
 800696e:	2601      	movs	r6, #1
 8006970:	1c95      	adds	r5, r2, #2
 8006972:	f033 0210 	bics.w	r2, r3, #16
 8006976:	d115      	bne.n	80069a4 <_strtol_l.isra.0+0x6c>
 8006978:	2c30      	cmp	r4, #48	@ 0x30
 800697a:	d10d      	bne.n	8006998 <_strtol_l.isra.0+0x60>
 800697c:	782a      	ldrb	r2, [r5, #0]
 800697e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006982:	2a58      	cmp	r2, #88	@ 0x58
 8006984:	d108      	bne.n	8006998 <_strtol_l.isra.0+0x60>
 8006986:	786c      	ldrb	r4, [r5, #1]
 8006988:	3502      	adds	r5, #2
 800698a:	2310      	movs	r3, #16
 800698c:	e00a      	b.n	80069a4 <_strtol_l.isra.0+0x6c>
 800698e:	2c2b      	cmp	r4, #43	@ 0x2b
 8006990:	bf04      	itt	eq
 8006992:	782c      	ldrbeq	r4, [r5, #0]
 8006994:	1c95      	addeq	r5, r2, #2
 8006996:	e7ec      	b.n	8006972 <_strtol_l.isra.0+0x3a>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f6      	bne.n	800698a <_strtol_l.isra.0+0x52>
 800699c:	2c30      	cmp	r4, #48	@ 0x30
 800699e:	bf14      	ite	ne
 80069a0:	230a      	movne	r3, #10
 80069a2:	2308      	moveq	r3, #8
 80069a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80069a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80069ac:	2200      	movs	r2, #0
 80069ae:	fbbc f9f3 	udiv	r9, ip, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80069b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80069bc:	2f09      	cmp	r7, #9
 80069be:	d80f      	bhi.n	80069e0 <_strtol_l.isra.0+0xa8>
 80069c0:	463c      	mov	r4, r7
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	dd1b      	ble.n	80069fe <_strtol_l.isra.0+0xc6>
 80069c6:	1c57      	adds	r7, r2, #1
 80069c8:	d007      	beq.n	80069da <_strtol_l.isra.0+0xa2>
 80069ca:	4581      	cmp	r9, r0
 80069cc:	d314      	bcc.n	80069f8 <_strtol_l.isra.0+0xc0>
 80069ce:	d101      	bne.n	80069d4 <_strtol_l.isra.0+0x9c>
 80069d0:	45a2      	cmp	sl, r4
 80069d2:	db11      	blt.n	80069f8 <_strtol_l.isra.0+0xc0>
 80069d4:	fb00 4003 	mla	r0, r0, r3, r4
 80069d8:	2201      	movs	r2, #1
 80069da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069de:	e7eb      	b.n	80069b8 <_strtol_l.isra.0+0x80>
 80069e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80069e4:	2f19      	cmp	r7, #25
 80069e6:	d801      	bhi.n	80069ec <_strtol_l.isra.0+0xb4>
 80069e8:	3c37      	subs	r4, #55	@ 0x37
 80069ea:	e7ea      	b.n	80069c2 <_strtol_l.isra.0+0x8a>
 80069ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80069f0:	2f19      	cmp	r7, #25
 80069f2:	d804      	bhi.n	80069fe <_strtol_l.isra.0+0xc6>
 80069f4:	3c57      	subs	r4, #87	@ 0x57
 80069f6:	e7e4      	b.n	80069c2 <_strtol_l.isra.0+0x8a>
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295
 80069fc:	e7ed      	b.n	80069da <_strtol_l.isra.0+0xa2>
 80069fe:	1c53      	adds	r3, r2, #1
 8006a00:	d108      	bne.n	8006a14 <_strtol_l.isra.0+0xdc>
 8006a02:	2322      	movs	r3, #34	@ 0x22
 8006a04:	f8ce 3000 	str.w	r3, [lr]
 8006a08:	4660      	mov	r0, ip
 8006a0a:	f1b8 0f00 	cmp.w	r8, #0
 8006a0e:	d0a0      	beq.n	8006952 <_strtol_l.isra.0+0x1a>
 8006a10:	1e69      	subs	r1, r5, #1
 8006a12:	e006      	b.n	8006a22 <_strtol_l.isra.0+0xea>
 8006a14:	b106      	cbz	r6, 8006a18 <_strtol_l.isra.0+0xe0>
 8006a16:	4240      	negs	r0, r0
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	d099      	beq.n	8006952 <_strtol_l.isra.0+0x1a>
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	d1f6      	bne.n	8006a10 <_strtol_l.isra.0+0xd8>
 8006a22:	f8c8 1000 	str.w	r1, [r8]
 8006a26:	e794      	b.n	8006952 <_strtol_l.isra.0+0x1a>
 8006a28:	0800b2bd 	.word	0x0800b2bd

08006a2c <_strtol_r>:
 8006a2c:	f7ff bf84 	b.w	8006938 <_strtol_l.isra.0>

08006a30 <strtol>:
 8006a30:	4613      	mov	r3, r2
 8006a32:	460a      	mov	r2, r1
 8006a34:	4601      	mov	r1, r0
 8006a36:	4802      	ldr	r0, [pc, #8]	@ (8006a40 <strtol+0x10>)
 8006a38:	6800      	ldr	r0, [r0, #0]
 8006a3a:	f7ff bf7d 	b.w	8006938 <_strtol_l.isra.0>
 8006a3e:	bf00      	nop
 8006a40:	20000018 	.word	0x20000018

08006a44 <__cvt>:
 8006a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a48:	ec57 6b10 	vmov	r6, r7, d0
 8006a4c:	2f00      	cmp	r7, #0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	4619      	mov	r1, r3
 8006a52:	463b      	mov	r3, r7
 8006a54:	bfbb      	ittet	lt
 8006a56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a5a:	461f      	movlt	r7, r3
 8006a5c:	2300      	movge	r3, #0
 8006a5e:	232d      	movlt	r3, #45	@ 0x2d
 8006a60:	700b      	strb	r3, [r1, #0]
 8006a62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a68:	4691      	mov	r9, r2
 8006a6a:	f023 0820 	bic.w	r8, r3, #32
 8006a6e:	bfbc      	itt	lt
 8006a70:	4632      	movlt	r2, r6
 8006a72:	4616      	movlt	r6, r2
 8006a74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a78:	d005      	beq.n	8006a86 <__cvt+0x42>
 8006a7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a7e:	d100      	bne.n	8006a82 <__cvt+0x3e>
 8006a80:	3401      	adds	r4, #1
 8006a82:	2102      	movs	r1, #2
 8006a84:	e000      	b.n	8006a88 <__cvt+0x44>
 8006a86:	2103      	movs	r1, #3
 8006a88:	ab03      	add	r3, sp, #12
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	ab02      	add	r3, sp, #8
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	ec47 6b10 	vmov	d0, r6, r7
 8006a94:	4653      	mov	r3, sl
 8006a96:	4622      	mov	r2, r4
 8006a98:	f001 f9ae 	bl	8007df8 <_dtoa_r>
 8006a9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	d119      	bne.n	8006ad8 <__cvt+0x94>
 8006aa4:	f019 0f01 	tst.w	r9, #1
 8006aa8:	d00e      	beq.n	8006ac8 <__cvt+0x84>
 8006aaa:	eb00 0904 	add.w	r9, r0, r4
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	f7fa f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aba:	b108      	cbz	r0, 8006ac0 <__cvt+0x7c>
 8006abc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ac0:	2230      	movs	r2, #48	@ 0x30
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	454b      	cmp	r3, r9
 8006ac6:	d31e      	bcc.n	8006b06 <__cvt+0xc2>
 8006ac8:	9b03      	ldr	r3, [sp, #12]
 8006aca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006acc:	1b5b      	subs	r3, r3, r5
 8006ace:	4628      	mov	r0, r5
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	b004      	add	sp, #16
 8006ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006adc:	eb00 0904 	add.w	r9, r0, r4
 8006ae0:	d1e5      	bne.n	8006aae <__cvt+0x6a>
 8006ae2:	7803      	ldrb	r3, [r0, #0]
 8006ae4:	2b30      	cmp	r3, #48	@ 0x30
 8006ae6:	d10a      	bne.n	8006afe <__cvt+0xba>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2300      	movs	r3, #0
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af4:	b918      	cbnz	r0, 8006afe <__cvt+0xba>
 8006af6:	f1c4 0401 	rsb	r4, r4, #1
 8006afa:	f8ca 4000 	str.w	r4, [sl]
 8006afe:	f8da 3000 	ldr.w	r3, [sl]
 8006b02:	4499      	add	r9, r3
 8006b04:	e7d3      	b.n	8006aae <__cvt+0x6a>
 8006b06:	1c59      	adds	r1, r3, #1
 8006b08:	9103      	str	r1, [sp, #12]
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	e7d9      	b.n	8006ac2 <__cvt+0x7e>

08006b0e <__exponent>:
 8006b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b10:	2900      	cmp	r1, #0
 8006b12:	bfba      	itte	lt
 8006b14:	4249      	neglt	r1, r1
 8006b16:	232d      	movlt	r3, #45	@ 0x2d
 8006b18:	232b      	movge	r3, #43	@ 0x2b
 8006b1a:	2909      	cmp	r1, #9
 8006b1c:	7002      	strb	r2, [r0, #0]
 8006b1e:	7043      	strb	r3, [r0, #1]
 8006b20:	dd29      	ble.n	8006b76 <__exponent+0x68>
 8006b22:	f10d 0307 	add.w	r3, sp, #7
 8006b26:	461d      	mov	r5, r3
 8006b28:	270a      	movs	r7, #10
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b30:	fb07 1416 	mls	r4, r7, r6, r1
 8006b34:	3430      	adds	r4, #48	@ 0x30
 8006b36:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	2c63      	cmp	r4, #99	@ 0x63
 8006b3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b42:	4631      	mov	r1, r6
 8006b44:	dcf1      	bgt.n	8006b2a <__exponent+0x1c>
 8006b46:	3130      	adds	r1, #48	@ 0x30
 8006b48:	1e94      	subs	r4, r2, #2
 8006b4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b4e:	1c41      	adds	r1, r0, #1
 8006b50:	4623      	mov	r3, r4
 8006b52:	42ab      	cmp	r3, r5
 8006b54:	d30a      	bcc.n	8006b6c <__exponent+0x5e>
 8006b56:	f10d 0309 	add.w	r3, sp, #9
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	42ac      	cmp	r4, r5
 8006b5e:	bf88      	it	hi
 8006b60:	2300      	movhi	r3, #0
 8006b62:	3302      	adds	r3, #2
 8006b64:	4403      	add	r3, r0
 8006b66:	1a18      	subs	r0, r3, r0
 8006b68:	b003      	add	sp, #12
 8006b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b70:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b74:	e7ed      	b.n	8006b52 <__exponent+0x44>
 8006b76:	2330      	movs	r3, #48	@ 0x30
 8006b78:	3130      	adds	r1, #48	@ 0x30
 8006b7a:	7083      	strb	r3, [r0, #2]
 8006b7c:	70c1      	strb	r1, [r0, #3]
 8006b7e:	1d03      	adds	r3, r0, #4
 8006b80:	e7f1      	b.n	8006b66 <__exponent+0x58>
	...

08006b84 <_printf_float>:
 8006b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	b08d      	sub	sp, #52	@ 0x34
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b90:	4616      	mov	r6, r2
 8006b92:	461f      	mov	r7, r3
 8006b94:	4605      	mov	r5, r0
 8006b96:	f001 f829 	bl	8007bec <_localeconv_r>
 8006b9a:	6803      	ldr	r3, [r0, #0]
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7f9 fb6e 	bl	8000280 <strlen>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bac:	9005      	str	r0, [sp, #20]
 8006bae:	3307      	adds	r3, #7
 8006bb0:	f023 0307 	bic.w	r3, r3, #7
 8006bb4:	f103 0208 	add.w	r2, r3, #8
 8006bb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bbc:	f8d4 b000 	ldr.w	fp, [r4]
 8006bc0:	f8c8 2000 	str.w	r2, [r8]
 8006bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bcc:	9307      	str	r3, [sp, #28]
 8006bce:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bd2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bda:	4b9c      	ldr	r3, [pc, #624]	@ (8006e4c <_printf_float+0x2c8>)
 8006bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006be0:	f7f9 ffac 	bl	8000b3c <__aeabi_dcmpun>
 8006be4:	bb70      	cbnz	r0, 8006c44 <_printf_float+0xc0>
 8006be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bea:	4b98      	ldr	r3, [pc, #608]	@ (8006e4c <_printf_float+0x2c8>)
 8006bec:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf0:	f7f9 ff86 	bl	8000b00 <__aeabi_dcmple>
 8006bf4:	bb30      	cbnz	r0, 8006c44 <_printf_float+0xc0>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	f7f9 ff75 	bl	8000aec <__aeabi_dcmplt>
 8006c02:	b110      	cbz	r0, 8006c0a <_printf_float+0x86>
 8006c04:	232d      	movs	r3, #45	@ 0x2d
 8006c06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c0a:	4a91      	ldr	r2, [pc, #580]	@ (8006e50 <_printf_float+0x2cc>)
 8006c0c:	4b91      	ldr	r3, [pc, #580]	@ (8006e54 <_printf_float+0x2d0>)
 8006c0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c12:	bf8c      	ite	hi
 8006c14:	4690      	movhi	r8, r2
 8006c16:	4698      	movls	r8, r3
 8006c18:	2303      	movs	r3, #3
 8006c1a:	6123      	str	r3, [r4, #16]
 8006c1c:	f02b 0304 	bic.w	r3, fp, #4
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	f04f 0900 	mov.w	r9, #0
 8006c26:	9700      	str	r7, [sp, #0]
 8006c28:	4633      	mov	r3, r6
 8006c2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 f9d2 	bl	8006fd8 <_printf_common>
 8006c34:	3001      	adds	r0, #1
 8006c36:	f040 808d 	bne.w	8006d54 <_printf_float+0x1d0>
 8006c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3e:	b00d      	add	sp, #52	@ 0x34
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff76 	bl	8000b3c <__aeabi_dcmpun>
 8006c50:	b140      	cbz	r0, 8006c64 <_printf_float+0xe0>
 8006c52:	464b      	mov	r3, r9
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfbc      	itt	lt
 8006c58:	232d      	movlt	r3, #45	@ 0x2d
 8006c5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e58 <_printf_float+0x2d4>)
 8006c60:	4b7e      	ldr	r3, [pc, #504]	@ (8006e5c <_printf_float+0x2d8>)
 8006c62:	e7d4      	b.n	8006c0e <_printf_float+0x8a>
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	d13b      	bne.n	8006ce8 <_printf_float+0x164>
 8006c70:	2306      	movs	r3, #6
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6022      	str	r2, [r4, #0]
 8006c7c:	9303      	str	r3, [sp, #12]
 8006c7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c84:	ab09      	add	r3, sp, #36	@ 0x24
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	6861      	ldr	r1, [r4, #4]
 8006c8a:	ec49 8b10 	vmov	d0, r8, r9
 8006c8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7ff fed6 	bl	8006a44 <__cvt>
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c9c:	2b47      	cmp	r3, #71	@ 0x47
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	d129      	bne.n	8006cf6 <_printf_float+0x172>
 8006ca2:	1cc8      	adds	r0, r1, #3
 8006ca4:	db02      	blt.n	8006cac <_printf_float+0x128>
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	dd41      	ble.n	8006d30 <_printf_float+0x1ac>
 8006cac:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cb0:	fa5f fa8a 	uxtb.w	sl, sl
 8006cb4:	3901      	subs	r1, #1
 8006cb6:	4652      	mov	r2, sl
 8006cb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cbe:	f7ff ff26 	bl	8006b0e <__exponent>
 8006cc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cc4:	1813      	adds	r3, r2, r0
 8006cc6:	2a01      	cmp	r2, #1
 8006cc8:	4681      	mov	r9, r0
 8006cca:	6123      	str	r3, [r4, #16]
 8006ccc:	dc02      	bgt.n	8006cd4 <_printf_float+0x150>
 8006cce:	6822      	ldr	r2, [r4, #0]
 8006cd0:	07d2      	lsls	r2, r2, #31
 8006cd2:	d501      	bpl.n	8006cd8 <_printf_float+0x154>
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	6123      	str	r3, [r4, #16]
 8006cd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0a2      	beq.n	8006c26 <_printf_float+0xa2>
 8006ce0:	232d      	movs	r3, #45	@ 0x2d
 8006ce2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ce6:	e79e      	b.n	8006c26 <_printf_float+0xa2>
 8006ce8:	9a06      	ldr	r2, [sp, #24]
 8006cea:	2a47      	cmp	r2, #71	@ 0x47
 8006cec:	d1c2      	bne.n	8006c74 <_printf_float+0xf0>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1c0      	bne.n	8006c74 <_printf_float+0xf0>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e7bd      	b.n	8006c72 <_printf_float+0xee>
 8006cf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cfa:	d9db      	bls.n	8006cb4 <_printf_float+0x130>
 8006cfc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d00:	d118      	bne.n	8006d34 <_printf_float+0x1b0>
 8006d02:	2900      	cmp	r1, #0
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	dd0b      	ble.n	8006d20 <_printf_float+0x19c>
 8006d08:	6121      	str	r1, [r4, #16]
 8006d0a:	b913      	cbnz	r3, 8006d12 <_printf_float+0x18e>
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	07d0      	lsls	r0, r2, #31
 8006d10:	d502      	bpl.n	8006d18 <_printf_float+0x194>
 8006d12:	3301      	adds	r3, #1
 8006d14:	440b      	add	r3, r1
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d1a:	f04f 0900 	mov.w	r9, #0
 8006d1e:	e7db      	b.n	8006cd8 <_printf_float+0x154>
 8006d20:	b913      	cbnz	r3, 8006d28 <_printf_float+0x1a4>
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	07d2      	lsls	r2, r2, #31
 8006d26:	d501      	bpl.n	8006d2c <_printf_float+0x1a8>
 8006d28:	3302      	adds	r3, #2
 8006d2a:	e7f4      	b.n	8006d16 <_printf_float+0x192>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e7f2      	b.n	8006d16 <_printf_float+0x192>
 8006d30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d36:	4299      	cmp	r1, r3
 8006d38:	db05      	blt.n	8006d46 <_printf_float+0x1c2>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	6121      	str	r1, [r4, #16]
 8006d3e:	07d8      	lsls	r0, r3, #31
 8006d40:	d5ea      	bpl.n	8006d18 <_printf_float+0x194>
 8006d42:	1c4b      	adds	r3, r1, #1
 8006d44:	e7e7      	b.n	8006d16 <_printf_float+0x192>
 8006d46:	2900      	cmp	r1, #0
 8006d48:	bfd4      	ite	le
 8006d4a:	f1c1 0202 	rsble	r2, r1, #2
 8006d4e:	2201      	movgt	r2, #1
 8006d50:	4413      	add	r3, r2
 8006d52:	e7e0      	b.n	8006d16 <_printf_float+0x192>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	055a      	lsls	r2, r3, #21
 8006d58:	d407      	bmi.n	8006d6a <_printf_float+0x1e6>
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	d12b      	bne.n	8006dc0 <_printf_float+0x23c>
 8006d68:	e767      	b.n	8006c3a <_printf_float+0xb6>
 8006d6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d6e:	f240 80dd 	bls.w	8006f2c <_printf_float+0x3a8>
 8006d72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d76:	2200      	movs	r2, #0
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f7f9 fead 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d033      	beq.n	8006dea <_printf_float+0x266>
 8006d82:	4a37      	ldr	r2, [pc, #220]	@ (8006e60 <_printf_float+0x2dc>)
 8006d84:	2301      	movs	r3, #1
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f af54 	beq.w	8006c3a <_printf_float+0xb6>
 8006d92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d96:	4543      	cmp	r3, r8
 8006d98:	db02      	blt.n	8006da0 <_printf_float+0x21c>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	07d8      	lsls	r0, r3, #31
 8006d9e:	d50f      	bpl.n	8006dc0 <_printf_float+0x23c>
 8006da0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	f43f af45 	beq.w	8006c3a <_printf_float+0xb6>
 8006db0:	f04f 0900 	mov.w	r9, #0
 8006db4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006db8:	f104 0a1a 	add.w	sl, r4, #26
 8006dbc:	45c8      	cmp	r8, r9
 8006dbe:	dc09      	bgt.n	8006dd4 <_printf_float+0x250>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	079b      	lsls	r3, r3, #30
 8006dc4:	f100 8103 	bmi.w	8006fce <_printf_float+0x44a>
 8006dc8:	68e0      	ldr	r0, [r4, #12]
 8006dca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dcc:	4298      	cmp	r0, r3
 8006dce:	bfb8      	it	lt
 8006dd0:	4618      	movlt	r0, r3
 8006dd2:	e734      	b.n	8006c3e <_printf_float+0xba>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	4652      	mov	r2, sl
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	f43f af2b 	beq.w	8006c3a <_printf_float+0xb6>
 8006de4:	f109 0901 	add.w	r9, r9, #1
 8006de8:	e7e8      	b.n	8006dbc <_printf_float+0x238>
 8006dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dc39      	bgt.n	8006e64 <_printf_float+0x2e0>
 8006df0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e60 <_printf_float+0x2dc>)
 8006df2:	2301      	movs	r3, #1
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f af1d 	beq.w	8006c3a <_printf_float+0xb6>
 8006e00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e04:	ea59 0303 	orrs.w	r3, r9, r3
 8006e08:	d102      	bne.n	8006e10 <_printf_float+0x28c>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	07d9      	lsls	r1, r3, #31
 8006e0e:	d5d7      	bpl.n	8006dc0 <_printf_float+0x23c>
 8006e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f af0d 	beq.w	8006c3a <_printf_float+0xb6>
 8006e20:	f04f 0a00 	mov.w	sl, #0
 8006e24:	f104 0b1a 	add.w	fp, r4, #26
 8006e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e2a:	425b      	negs	r3, r3
 8006e2c:	4553      	cmp	r3, sl
 8006e2e:	dc01      	bgt.n	8006e34 <_printf_float+0x2b0>
 8006e30:	464b      	mov	r3, r9
 8006e32:	e793      	b.n	8006d5c <_printf_float+0x1d8>
 8006e34:	2301      	movs	r3, #1
 8006e36:	465a      	mov	r2, fp
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f aefb 	beq.w	8006c3a <_printf_float+0xb6>
 8006e44:	f10a 0a01 	add.w	sl, sl, #1
 8006e48:	e7ee      	b.n	8006e28 <_printf_float+0x2a4>
 8006e4a:	bf00      	nop
 8006e4c:	7fefffff 	.word	0x7fefffff
 8006e50:	0800b3c1 	.word	0x0800b3c1
 8006e54:	0800b3bd 	.word	0x0800b3bd
 8006e58:	0800b3c9 	.word	0x0800b3c9
 8006e5c:	0800b3c5 	.word	0x0800b3c5
 8006e60:	0800b3cd 	.word	0x0800b3cd
 8006e64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e6a:	4553      	cmp	r3, sl
 8006e6c:	bfa8      	it	ge
 8006e6e:	4653      	movge	r3, sl
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	4699      	mov	r9, r3
 8006e74:	dc36      	bgt.n	8006ee4 <_printf_float+0x360>
 8006e76:	f04f 0b00 	mov.w	fp, #0
 8006e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e7e:	f104 021a 	add.w	r2, r4, #26
 8006e82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e84:	9306      	str	r3, [sp, #24]
 8006e86:	eba3 0309 	sub.w	r3, r3, r9
 8006e8a:	455b      	cmp	r3, fp
 8006e8c:	dc31      	bgt.n	8006ef2 <_printf_float+0x36e>
 8006e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e90:	459a      	cmp	sl, r3
 8006e92:	dc3a      	bgt.n	8006f0a <_printf_float+0x386>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	07da      	lsls	r2, r3, #31
 8006e98:	d437      	bmi.n	8006f0a <_printf_float+0x386>
 8006e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9c:	ebaa 0903 	sub.w	r9, sl, r3
 8006ea0:	9b06      	ldr	r3, [sp, #24]
 8006ea2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ea6:	4599      	cmp	r9, r3
 8006ea8:	bfa8      	it	ge
 8006eaa:	4699      	movge	r9, r3
 8006eac:	f1b9 0f00 	cmp.w	r9, #0
 8006eb0:	dc33      	bgt.n	8006f1a <_printf_float+0x396>
 8006eb2:	f04f 0800 	mov.w	r8, #0
 8006eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eba:	f104 0b1a 	add.w	fp, r4, #26
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ec4:	eba3 0309 	sub.w	r3, r3, r9
 8006ec8:	4543      	cmp	r3, r8
 8006eca:	f77f af79 	ble.w	8006dc0 <_printf_float+0x23c>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	465a      	mov	r2, fp
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	47b8      	blx	r7
 8006ed8:	3001      	adds	r0, #1
 8006eda:	f43f aeae 	beq.w	8006c3a <_printf_float+0xb6>
 8006ede:	f108 0801 	add.w	r8, r8, #1
 8006ee2:	e7ec      	b.n	8006ebe <_printf_float+0x33a>
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	d1c2      	bne.n	8006e76 <_printf_float+0x2f2>
 8006ef0:	e6a3      	b.n	8006c3a <_printf_float+0xb6>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	9206      	str	r2, [sp, #24]
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f ae9c 	beq.w	8006c3a <_printf_float+0xb6>
 8006f02:	9a06      	ldr	r2, [sp, #24]
 8006f04:	f10b 0b01 	add.w	fp, fp, #1
 8006f08:	e7bb      	b.n	8006e82 <_printf_float+0x2fe>
 8006f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	d1c0      	bne.n	8006e9a <_printf_float+0x316>
 8006f18:	e68f      	b.n	8006c3a <_printf_float+0xb6>
 8006f1a:	9a06      	ldr	r2, [sp, #24]
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	4442      	add	r2, r8
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	d1c3      	bne.n	8006eb2 <_printf_float+0x32e>
 8006f2a:	e686      	b.n	8006c3a <_printf_float+0xb6>
 8006f2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f30:	f1ba 0f01 	cmp.w	sl, #1
 8006f34:	dc01      	bgt.n	8006f3a <_printf_float+0x3b6>
 8006f36:	07db      	lsls	r3, r3, #31
 8006f38:	d536      	bpl.n	8006fa8 <_printf_float+0x424>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f ae78 	beq.w	8006c3a <_printf_float+0xb6>
 8006f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b8      	blx	r7
 8006f54:	3001      	adds	r0, #1
 8006f56:	f43f ae70 	beq.w	8006c3a <_printf_float+0xb6>
 8006f5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2300      	movs	r3, #0
 8006f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f66:	f7f9 fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f6a:	b9c0      	cbnz	r0, 8006f9e <_printf_float+0x41a>
 8006f6c:	4653      	mov	r3, sl
 8006f6e:	f108 0201 	add.w	r2, r8, #1
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d10c      	bne.n	8006f96 <_printf_float+0x412>
 8006f7c:	e65d      	b.n	8006c3a <_printf_float+0xb6>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	465a      	mov	r2, fp
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f43f ae56 	beq.w	8006c3a <_printf_float+0xb6>
 8006f8e:	f108 0801 	add.w	r8, r8, #1
 8006f92:	45d0      	cmp	r8, sl
 8006f94:	dbf3      	blt.n	8006f7e <_printf_float+0x3fa>
 8006f96:	464b      	mov	r3, r9
 8006f98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f9c:	e6df      	b.n	8006d5e <_printf_float+0x1da>
 8006f9e:	f04f 0800 	mov.w	r8, #0
 8006fa2:	f104 0b1a 	add.w	fp, r4, #26
 8006fa6:	e7f4      	b.n	8006f92 <_printf_float+0x40e>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4642      	mov	r2, r8
 8006fac:	e7e1      	b.n	8006f72 <_printf_float+0x3ee>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	464a      	mov	r2, r9
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae3e 	beq.w	8006c3a <_printf_float+0xb6>
 8006fbe:	f108 0801 	add.w	r8, r8, #1
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fc6:	1a5b      	subs	r3, r3, r1
 8006fc8:	4543      	cmp	r3, r8
 8006fca:	dcf0      	bgt.n	8006fae <_printf_float+0x42a>
 8006fcc:	e6fc      	b.n	8006dc8 <_printf_float+0x244>
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	f104 0919 	add.w	r9, r4, #25
 8006fd6:	e7f4      	b.n	8006fc2 <_printf_float+0x43e>

08006fd8 <_printf_common>:
 8006fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fdc:	4616      	mov	r6, r2
 8006fde:	4698      	mov	r8, r3
 8006fe0:	688a      	ldr	r2, [r1, #8]
 8006fe2:	690b      	ldr	r3, [r1, #16]
 8006fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	bfb8      	it	lt
 8006fec:	4613      	movlt	r3, r2
 8006fee:	6033      	str	r3, [r6, #0]
 8006ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b10a      	cbz	r2, 8006ffe <_printf_common+0x26>
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	6033      	str	r3, [r6, #0]
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	0699      	lsls	r1, r3, #26
 8007002:	bf42      	ittt	mi
 8007004:	6833      	ldrmi	r3, [r6, #0]
 8007006:	3302      	addmi	r3, #2
 8007008:	6033      	strmi	r3, [r6, #0]
 800700a:	6825      	ldr	r5, [r4, #0]
 800700c:	f015 0506 	ands.w	r5, r5, #6
 8007010:	d106      	bne.n	8007020 <_printf_common+0x48>
 8007012:	f104 0a19 	add.w	sl, r4, #25
 8007016:	68e3      	ldr	r3, [r4, #12]
 8007018:	6832      	ldr	r2, [r6, #0]
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	42ab      	cmp	r3, r5
 800701e:	dc26      	bgt.n	800706e <_printf_common+0x96>
 8007020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	3b00      	subs	r3, #0
 8007028:	bf18      	it	ne
 800702a:	2301      	movne	r3, #1
 800702c:	0692      	lsls	r2, r2, #26
 800702e:	d42b      	bmi.n	8007088 <_printf_common+0xb0>
 8007030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007034:	4641      	mov	r1, r8
 8007036:	4638      	mov	r0, r7
 8007038:	47c8      	blx	r9
 800703a:	3001      	adds	r0, #1
 800703c:	d01e      	beq.n	800707c <_printf_common+0xa4>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	6922      	ldr	r2, [r4, #16]
 8007042:	f003 0306 	and.w	r3, r3, #6
 8007046:	2b04      	cmp	r3, #4
 8007048:	bf02      	ittt	eq
 800704a:	68e5      	ldreq	r5, [r4, #12]
 800704c:	6833      	ldreq	r3, [r6, #0]
 800704e:	1aed      	subeq	r5, r5, r3
 8007050:	68a3      	ldr	r3, [r4, #8]
 8007052:	bf0c      	ite	eq
 8007054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007058:	2500      	movne	r5, #0
 800705a:	4293      	cmp	r3, r2
 800705c:	bfc4      	itt	gt
 800705e:	1a9b      	subgt	r3, r3, r2
 8007060:	18ed      	addgt	r5, r5, r3
 8007062:	2600      	movs	r6, #0
 8007064:	341a      	adds	r4, #26
 8007066:	42b5      	cmp	r5, r6
 8007068:	d11a      	bne.n	80070a0 <_printf_common+0xc8>
 800706a:	2000      	movs	r0, #0
 800706c:	e008      	b.n	8007080 <_printf_common+0xa8>
 800706e:	2301      	movs	r3, #1
 8007070:	4652      	mov	r2, sl
 8007072:	4641      	mov	r1, r8
 8007074:	4638      	mov	r0, r7
 8007076:	47c8      	blx	r9
 8007078:	3001      	adds	r0, #1
 800707a:	d103      	bne.n	8007084 <_printf_common+0xac>
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007084:	3501      	adds	r5, #1
 8007086:	e7c6      	b.n	8007016 <_printf_common+0x3e>
 8007088:	18e1      	adds	r1, r4, r3
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	2030      	movs	r0, #48	@ 0x30
 800708e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007092:	4422      	add	r2, r4
 8007094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800709c:	3302      	adds	r3, #2
 800709e:	e7c7      	b.n	8007030 <_printf_common+0x58>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4622      	mov	r2, r4
 80070a4:	4641      	mov	r1, r8
 80070a6:	4638      	mov	r0, r7
 80070a8:	47c8      	blx	r9
 80070aa:	3001      	adds	r0, #1
 80070ac:	d0e6      	beq.n	800707c <_printf_common+0xa4>
 80070ae:	3601      	adds	r6, #1
 80070b0:	e7d9      	b.n	8007066 <_printf_common+0x8e>
	...

080070b4 <_printf_i>:
 80070b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	7e0f      	ldrb	r7, [r1, #24]
 80070ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070bc:	2f78      	cmp	r7, #120	@ 0x78
 80070be:	4691      	mov	r9, r2
 80070c0:	4680      	mov	r8, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	469a      	mov	sl, r3
 80070c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070ca:	d807      	bhi.n	80070dc <_printf_i+0x28>
 80070cc:	2f62      	cmp	r7, #98	@ 0x62
 80070ce:	d80a      	bhi.n	80070e6 <_printf_i+0x32>
 80070d0:	2f00      	cmp	r7, #0
 80070d2:	f000 80d1 	beq.w	8007278 <_printf_i+0x1c4>
 80070d6:	2f58      	cmp	r7, #88	@ 0x58
 80070d8:	f000 80b8 	beq.w	800724c <_printf_i+0x198>
 80070dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070e4:	e03a      	b.n	800715c <_printf_i+0xa8>
 80070e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070ea:	2b15      	cmp	r3, #21
 80070ec:	d8f6      	bhi.n	80070dc <_printf_i+0x28>
 80070ee:	a101      	add	r1, pc, #4	@ (adr r1, 80070f4 <_printf_i+0x40>)
 80070f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f4:	0800714d 	.word	0x0800714d
 80070f8:	08007161 	.word	0x08007161
 80070fc:	080070dd 	.word	0x080070dd
 8007100:	080070dd 	.word	0x080070dd
 8007104:	080070dd 	.word	0x080070dd
 8007108:	080070dd 	.word	0x080070dd
 800710c:	08007161 	.word	0x08007161
 8007110:	080070dd 	.word	0x080070dd
 8007114:	080070dd 	.word	0x080070dd
 8007118:	080070dd 	.word	0x080070dd
 800711c:	080070dd 	.word	0x080070dd
 8007120:	0800725f 	.word	0x0800725f
 8007124:	0800718b 	.word	0x0800718b
 8007128:	08007219 	.word	0x08007219
 800712c:	080070dd 	.word	0x080070dd
 8007130:	080070dd 	.word	0x080070dd
 8007134:	08007281 	.word	0x08007281
 8007138:	080070dd 	.word	0x080070dd
 800713c:	0800718b 	.word	0x0800718b
 8007140:	080070dd 	.word	0x080070dd
 8007144:	080070dd 	.word	0x080070dd
 8007148:	08007221 	.word	0x08007221
 800714c:	6833      	ldr	r3, [r6, #0]
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6032      	str	r2, [r6, #0]
 8007154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800715c:	2301      	movs	r3, #1
 800715e:	e09c      	b.n	800729a <_printf_i+0x1e6>
 8007160:	6833      	ldr	r3, [r6, #0]
 8007162:	6820      	ldr	r0, [r4, #0]
 8007164:	1d19      	adds	r1, r3, #4
 8007166:	6031      	str	r1, [r6, #0]
 8007168:	0606      	lsls	r6, r0, #24
 800716a:	d501      	bpl.n	8007170 <_printf_i+0xbc>
 800716c:	681d      	ldr	r5, [r3, #0]
 800716e:	e003      	b.n	8007178 <_printf_i+0xc4>
 8007170:	0645      	lsls	r5, r0, #25
 8007172:	d5fb      	bpl.n	800716c <_printf_i+0xb8>
 8007174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007178:	2d00      	cmp	r5, #0
 800717a:	da03      	bge.n	8007184 <_printf_i+0xd0>
 800717c:	232d      	movs	r3, #45	@ 0x2d
 800717e:	426d      	negs	r5, r5
 8007180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007184:	4858      	ldr	r0, [pc, #352]	@ (80072e8 <_printf_i+0x234>)
 8007186:	230a      	movs	r3, #10
 8007188:	e011      	b.n	80071ae <_printf_i+0xfa>
 800718a:	6821      	ldr	r1, [r4, #0]
 800718c:	6833      	ldr	r3, [r6, #0]
 800718e:	0608      	lsls	r0, r1, #24
 8007190:	f853 5b04 	ldr.w	r5, [r3], #4
 8007194:	d402      	bmi.n	800719c <_printf_i+0xe8>
 8007196:	0649      	lsls	r1, r1, #25
 8007198:	bf48      	it	mi
 800719a:	b2ad      	uxthmi	r5, r5
 800719c:	2f6f      	cmp	r7, #111	@ 0x6f
 800719e:	4852      	ldr	r0, [pc, #328]	@ (80072e8 <_printf_i+0x234>)
 80071a0:	6033      	str	r3, [r6, #0]
 80071a2:	bf14      	ite	ne
 80071a4:	230a      	movne	r3, #10
 80071a6:	2308      	moveq	r3, #8
 80071a8:	2100      	movs	r1, #0
 80071aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071ae:	6866      	ldr	r6, [r4, #4]
 80071b0:	60a6      	str	r6, [r4, #8]
 80071b2:	2e00      	cmp	r6, #0
 80071b4:	db05      	blt.n	80071c2 <_printf_i+0x10e>
 80071b6:	6821      	ldr	r1, [r4, #0]
 80071b8:	432e      	orrs	r6, r5
 80071ba:	f021 0104 	bic.w	r1, r1, #4
 80071be:	6021      	str	r1, [r4, #0]
 80071c0:	d04b      	beq.n	800725a <_printf_i+0x1a6>
 80071c2:	4616      	mov	r6, r2
 80071c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80071c8:	fb03 5711 	mls	r7, r3, r1, r5
 80071cc:	5dc7      	ldrb	r7, [r0, r7]
 80071ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071d2:	462f      	mov	r7, r5
 80071d4:	42bb      	cmp	r3, r7
 80071d6:	460d      	mov	r5, r1
 80071d8:	d9f4      	bls.n	80071c4 <_printf_i+0x110>
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d10b      	bne.n	80071f6 <_printf_i+0x142>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	07df      	lsls	r7, r3, #31
 80071e2:	d508      	bpl.n	80071f6 <_printf_i+0x142>
 80071e4:	6923      	ldr	r3, [r4, #16]
 80071e6:	6861      	ldr	r1, [r4, #4]
 80071e8:	4299      	cmp	r1, r3
 80071ea:	bfde      	ittt	le
 80071ec:	2330      	movle	r3, #48	@ 0x30
 80071ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071f6:	1b92      	subs	r2, r2, r6
 80071f8:	6122      	str	r2, [r4, #16]
 80071fa:	f8cd a000 	str.w	sl, [sp]
 80071fe:	464b      	mov	r3, r9
 8007200:	aa03      	add	r2, sp, #12
 8007202:	4621      	mov	r1, r4
 8007204:	4640      	mov	r0, r8
 8007206:	f7ff fee7 	bl	8006fd8 <_printf_common>
 800720a:	3001      	adds	r0, #1
 800720c:	d14a      	bne.n	80072a4 <_printf_i+0x1f0>
 800720e:	f04f 30ff 	mov.w	r0, #4294967295
 8007212:	b004      	add	sp, #16
 8007214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	f043 0320 	orr.w	r3, r3, #32
 800721e:	6023      	str	r3, [r4, #0]
 8007220:	4832      	ldr	r0, [pc, #200]	@ (80072ec <_printf_i+0x238>)
 8007222:	2778      	movs	r7, #120	@ 0x78
 8007224:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	6831      	ldr	r1, [r6, #0]
 800722c:	061f      	lsls	r7, r3, #24
 800722e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007232:	d402      	bmi.n	800723a <_printf_i+0x186>
 8007234:	065f      	lsls	r7, r3, #25
 8007236:	bf48      	it	mi
 8007238:	b2ad      	uxthmi	r5, r5
 800723a:	6031      	str	r1, [r6, #0]
 800723c:	07d9      	lsls	r1, r3, #31
 800723e:	bf44      	itt	mi
 8007240:	f043 0320 	orrmi.w	r3, r3, #32
 8007244:	6023      	strmi	r3, [r4, #0]
 8007246:	b11d      	cbz	r5, 8007250 <_printf_i+0x19c>
 8007248:	2310      	movs	r3, #16
 800724a:	e7ad      	b.n	80071a8 <_printf_i+0xf4>
 800724c:	4826      	ldr	r0, [pc, #152]	@ (80072e8 <_printf_i+0x234>)
 800724e:	e7e9      	b.n	8007224 <_printf_i+0x170>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f023 0320 	bic.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	e7f6      	b.n	8007248 <_printf_i+0x194>
 800725a:	4616      	mov	r6, r2
 800725c:	e7bd      	b.n	80071da <_printf_i+0x126>
 800725e:	6833      	ldr	r3, [r6, #0]
 8007260:	6825      	ldr	r5, [r4, #0]
 8007262:	6961      	ldr	r1, [r4, #20]
 8007264:	1d18      	adds	r0, r3, #4
 8007266:	6030      	str	r0, [r6, #0]
 8007268:	062e      	lsls	r6, r5, #24
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	d501      	bpl.n	8007272 <_printf_i+0x1be>
 800726e:	6019      	str	r1, [r3, #0]
 8007270:	e002      	b.n	8007278 <_printf_i+0x1c4>
 8007272:	0668      	lsls	r0, r5, #25
 8007274:	d5fb      	bpl.n	800726e <_printf_i+0x1ba>
 8007276:	8019      	strh	r1, [r3, #0]
 8007278:	2300      	movs	r3, #0
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	4616      	mov	r6, r2
 800727e:	e7bc      	b.n	80071fa <_printf_i+0x146>
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	6032      	str	r2, [r6, #0]
 8007286:	681e      	ldr	r6, [r3, #0]
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	2100      	movs	r1, #0
 800728c:	4630      	mov	r0, r6
 800728e:	f7f8 ffa7 	bl	80001e0 <memchr>
 8007292:	b108      	cbz	r0, 8007298 <_printf_i+0x1e4>
 8007294:	1b80      	subs	r0, r0, r6
 8007296:	6060      	str	r0, [r4, #4]
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	2300      	movs	r3, #0
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072a2:	e7aa      	b.n	80071fa <_printf_i+0x146>
 80072a4:	6923      	ldr	r3, [r4, #16]
 80072a6:	4632      	mov	r2, r6
 80072a8:	4649      	mov	r1, r9
 80072aa:	4640      	mov	r0, r8
 80072ac:	47d0      	blx	sl
 80072ae:	3001      	adds	r0, #1
 80072b0:	d0ad      	beq.n	800720e <_printf_i+0x15a>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	079b      	lsls	r3, r3, #30
 80072b6:	d413      	bmi.n	80072e0 <_printf_i+0x22c>
 80072b8:	68e0      	ldr	r0, [r4, #12]
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	4298      	cmp	r0, r3
 80072be:	bfb8      	it	lt
 80072c0:	4618      	movlt	r0, r3
 80072c2:	e7a6      	b.n	8007212 <_printf_i+0x15e>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4632      	mov	r2, r6
 80072c8:	4649      	mov	r1, r9
 80072ca:	4640      	mov	r0, r8
 80072cc:	47d0      	blx	sl
 80072ce:	3001      	adds	r0, #1
 80072d0:	d09d      	beq.n	800720e <_printf_i+0x15a>
 80072d2:	3501      	adds	r5, #1
 80072d4:	68e3      	ldr	r3, [r4, #12]
 80072d6:	9903      	ldr	r1, [sp, #12]
 80072d8:	1a5b      	subs	r3, r3, r1
 80072da:	42ab      	cmp	r3, r5
 80072dc:	dcf2      	bgt.n	80072c4 <_printf_i+0x210>
 80072de:	e7eb      	b.n	80072b8 <_printf_i+0x204>
 80072e0:	2500      	movs	r5, #0
 80072e2:	f104 0619 	add.w	r6, r4, #25
 80072e6:	e7f5      	b.n	80072d4 <_printf_i+0x220>
 80072e8:	0800b3cf 	.word	0x0800b3cf
 80072ec:	0800b3e0 	.word	0x0800b3e0

080072f0 <_scanf_float>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	b087      	sub	sp, #28
 80072f6:	4691      	mov	r9, r2
 80072f8:	9303      	str	r3, [sp, #12]
 80072fa:	688b      	ldr	r3, [r1, #8]
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007302:	bf81      	itttt	hi
 8007304:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007308:	eb03 0b05 	addhi.w	fp, r3, r5
 800730c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007310:	608b      	strhi	r3, [r1, #8]
 8007312:	680b      	ldr	r3, [r1, #0]
 8007314:	460a      	mov	r2, r1
 8007316:	f04f 0500 	mov.w	r5, #0
 800731a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800731e:	f842 3b1c 	str.w	r3, [r2], #28
 8007322:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007326:	4680      	mov	r8, r0
 8007328:	460c      	mov	r4, r1
 800732a:	bf98      	it	ls
 800732c:	f04f 0b00 	movls.w	fp, #0
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	4616      	mov	r6, r2
 8007334:	46aa      	mov	sl, r5
 8007336:	462f      	mov	r7, r5
 8007338:	9502      	str	r5, [sp, #8]
 800733a:	68a2      	ldr	r2, [r4, #8]
 800733c:	b15a      	cbz	r2, 8007356 <_scanf_float+0x66>
 800733e:	f8d9 3000 	ldr.w	r3, [r9]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b4e      	cmp	r3, #78	@ 0x4e
 8007346:	d863      	bhi.n	8007410 <_scanf_float+0x120>
 8007348:	2b40      	cmp	r3, #64	@ 0x40
 800734a:	d83b      	bhi.n	80073c4 <_scanf_float+0xd4>
 800734c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007350:	b2c8      	uxtb	r0, r1
 8007352:	280e      	cmp	r0, #14
 8007354:	d939      	bls.n	80073ca <_scanf_float+0xda>
 8007356:	b11f      	cbz	r7, 8007360 <_scanf_float+0x70>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007364:	f1ba 0f01 	cmp.w	sl, #1
 8007368:	f200 8114 	bhi.w	8007594 <_scanf_float+0x2a4>
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	429e      	cmp	r6, r3
 8007370:	f200 8105 	bhi.w	800757e <_scanf_float+0x28e>
 8007374:	2001      	movs	r0, #1
 8007376:	b007      	add	sp, #28
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007380:	2a0d      	cmp	r2, #13
 8007382:	d8e8      	bhi.n	8007356 <_scanf_float+0x66>
 8007384:	a101      	add	r1, pc, #4	@ (adr r1, 800738c <_scanf_float+0x9c>)
 8007386:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800738a:	bf00      	nop
 800738c:	080074d5 	.word	0x080074d5
 8007390:	08007357 	.word	0x08007357
 8007394:	08007357 	.word	0x08007357
 8007398:	08007357 	.word	0x08007357
 800739c:	08007531 	.word	0x08007531
 80073a0:	0800750b 	.word	0x0800750b
 80073a4:	08007357 	.word	0x08007357
 80073a8:	08007357 	.word	0x08007357
 80073ac:	080074e3 	.word	0x080074e3
 80073b0:	08007357 	.word	0x08007357
 80073b4:	08007357 	.word	0x08007357
 80073b8:	08007357 	.word	0x08007357
 80073bc:	08007357 	.word	0x08007357
 80073c0:	0800749f 	.word	0x0800749f
 80073c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80073c8:	e7da      	b.n	8007380 <_scanf_float+0x90>
 80073ca:	290e      	cmp	r1, #14
 80073cc:	d8c3      	bhi.n	8007356 <_scanf_float+0x66>
 80073ce:	a001      	add	r0, pc, #4	@ (adr r0, 80073d4 <_scanf_float+0xe4>)
 80073d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073d4:	0800748f 	.word	0x0800748f
 80073d8:	08007357 	.word	0x08007357
 80073dc:	0800748f 	.word	0x0800748f
 80073e0:	0800751f 	.word	0x0800751f
 80073e4:	08007357 	.word	0x08007357
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007475 	.word	0x08007475
 80073f0:	08007475 	.word	0x08007475
 80073f4:	08007475 	.word	0x08007475
 80073f8:	08007475 	.word	0x08007475
 80073fc:	08007475 	.word	0x08007475
 8007400:	08007475 	.word	0x08007475
 8007404:	08007475 	.word	0x08007475
 8007408:	08007475 	.word	0x08007475
 800740c:	08007475 	.word	0x08007475
 8007410:	2b6e      	cmp	r3, #110	@ 0x6e
 8007412:	d809      	bhi.n	8007428 <_scanf_float+0x138>
 8007414:	2b60      	cmp	r3, #96	@ 0x60
 8007416:	d8b1      	bhi.n	800737c <_scanf_float+0x8c>
 8007418:	2b54      	cmp	r3, #84	@ 0x54
 800741a:	d07b      	beq.n	8007514 <_scanf_float+0x224>
 800741c:	2b59      	cmp	r3, #89	@ 0x59
 800741e:	d19a      	bne.n	8007356 <_scanf_float+0x66>
 8007420:	2d07      	cmp	r5, #7
 8007422:	d198      	bne.n	8007356 <_scanf_float+0x66>
 8007424:	2508      	movs	r5, #8
 8007426:	e02f      	b.n	8007488 <_scanf_float+0x198>
 8007428:	2b74      	cmp	r3, #116	@ 0x74
 800742a:	d073      	beq.n	8007514 <_scanf_float+0x224>
 800742c:	2b79      	cmp	r3, #121	@ 0x79
 800742e:	e7f6      	b.n	800741e <_scanf_float+0x12e>
 8007430:	6821      	ldr	r1, [r4, #0]
 8007432:	05c8      	lsls	r0, r1, #23
 8007434:	d51e      	bpl.n	8007474 <_scanf_float+0x184>
 8007436:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800743a:	6021      	str	r1, [r4, #0]
 800743c:	3701      	adds	r7, #1
 800743e:	f1bb 0f00 	cmp.w	fp, #0
 8007442:	d003      	beq.n	800744c <_scanf_float+0x15c>
 8007444:	3201      	adds	r2, #1
 8007446:	f10b 3bff 	add.w	fp, fp, #4294967295
 800744a:	60a2      	str	r2, [r4, #8]
 800744c:	68a3      	ldr	r3, [r4, #8]
 800744e:	3b01      	subs	r3, #1
 8007450:	60a3      	str	r3, [r4, #8]
 8007452:	6923      	ldr	r3, [r4, #16]
 8007454:	3301      	adds	r3, #1
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800745c:	3b01      	subs	r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	f8c9 3004 	str.w	r3, [r9, #4]
 8007464:	f340 8082 	ble.w	800756c <_scanf_float+0x27c>
 8007468:	f8d9 3000 	ldr.w	r3, [r9]
 800746c:	3301      	adds	r3, #1
 800746e:	f8c9 3000 	str.w	r3, [r9]
 8007472:	e762      	b.n	800733a <_scanf_float+0x4a>
 8007474:	eb1a 0105 	adds.w	r1, sl, r5
 8007478:	f47f af6d 	bne.w	8007356 <_scanf_float+0x66>
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007482:	6022      	str	r2, [r4, #0]
 8007484:	460d      	mov	r5, r1
 8007486:	468a      	mov	sl, r1
 8007488:	f806 3b01 	strb.w	r3, [r6], #1
 800748c:	e7de      	b.n	800744c <_scanf_float+0x15c>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	0610      	lsls	r0, r2, #24
 8007492:	f57f af60 	bpl.w	8007356 <_scanf_float+0x66>
 8007496:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	e7f4      	b.n	8007488 <_scanf_float+0x198>
 800749e:	f1ba 0f00 	cmp.w	sl, #0
 80074a2:	d10c      	bne.n	80074be <_scanf_float+0x1ce>
 80074a4:	b977      	cbnz	r7, 80074c4 <_scanf_float+0x1d4>
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074b0:	d108      	bne.n	80074c4 <_scanf_float+0x1d4>
 80074b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074b6:	6022      	str	r2, [r4, #0]
 80074b8:	f04f 0a01 	mov.w	sl, #1
 80074bc:	e7e4      	b.n	8007488 <_scanf_float+0x198>
 80074be:	f1ba 0f02 	cmp.w	sl, #2
 80074c2:	d050      	beq.n	8007566 <_scanf_float+0x276>
 80074c4:	2d01      	cmp	r5, #1
 80074c6:	d002      	beq.n	80074ce <_scanf_float+0x1de>
 80074c8:	2d04      	cmp	r5, #4
 80074ca:	f47f af44 	bne.w	8007356 <_scanf_float+0x66>
 80074ce:	3501      	adds	r5, #1
 80074d0:	b2ed      	uxtb	r5, r5
 80074d2:	e7d9      	b.n	8007488 <_scanf_float+0x198>
 80074d4:	f1ba 0f01 	cmp.w	sl, #1
 80074d8:	f47f af3d 	bne.w	8007356 <_scanf_float+0x66>
 80074dc:	f04f 0a02 	mov.w	sl, #2
 80074e0:	e7d2      	b.n	8007488 <_scanf_float+0x198>
 80074e2:	b975      	cbnz	r5, 8007502 <_scanf_float+0x212>
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	f47f af37 	bne.w	8007358 <_scanf_float+0x68>
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074f4:	f040 8103 	bne.w	80076fe <_scanf_float+0x40e>
 80074f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074fc:	6022      	str	r2, [r4, #0]
 80074fe:	2501      	movs	r5, #1
 8007500:	e7c2      	b.n	8007488 <_scanf_float+0x198>
 8007502:	2d03      	cmp	r5, #3
 8007504:	d0e3      	beq.n	80074ce <_scanf_float+0x1de>
 8007506:	2d05      	cmp	r5, #5
 8007508:	e7df      	b.n	80074ca <_scanf_float+0x1da>
 800750a:	2d02      	cmp	r5, #2
 800750c:	f47f af23 	bne.w	8007356 <_scanf_float+0x66>
 8007510:	2503      	movs	r5, #3
 8007512:	e7b9      	b.n	8007488 <_scanf_float+0x198>
 8007514:	2d06      	cmp	r5, #6
 8007516:	f47f af1e 	bne.w	8007356 <_scanf_float+0x66>
 800751a:	2507      	movs	r5, #7
 800751c:	e7b4      	b.n	8007488 <_scanf_float+0x198>
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	0591      	lsls	r1, r2, #22
 8007522:	f57f af18 	bpl.w	8007356 <_scanf_float+0x66>
 8007526:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800752a:	6022      	str	r2, [r4, #0]
 800752c:	9702      	str	r7, [sp, #8]
 800752e:	e7ab      	b.n	8007488 <_scanf_float+0x198>
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007536:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800753a:	d005      	beq.n	8007548 <_scanf_float+0x258>
 800753c:	0550      	lsls	r0, r2, #21
 800753e:	f57f af0a 	bpl.w	8007356 <_scanf_float+0x66>
 8007542:	2f00      	cmp	r7, #0
 8007544:	f000 80db 	beq.w	80076fe <_scanf_float+0x40e>
 8007548:	0591      	lsls	r1, r2, #22
 800754a:	bf58      	it	pl
 800754c:	9902      	ldrpl	r1, [sp, #8]
 800754e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007552:	bf58      	it	pl
 8007554:	1a79      	subpl	r1, r7, r1
 8007556:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800755a:	bf58      	it	pl
 800755c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007560:	6022      	str	r2, [r4, #0]
 8007562:	2700      	movs	r7, #0
 8007564:	e790      	b.n	8007488 <_scanf_float+0x198>
 8007566:	f04f 0a03 	mov.w	sl, #3
 800756a:	e78d      	b.n	8007488 <_scanf_float+0x198>
 800756c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007570:	4649      	mov	r1, r9
 8007572:	4640      	mov	r0, r8
 8007574:	4798      	blx	r3
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f aedf 	beq.w	800733a <_scanf_float+0x4a>
 800757c:	e6eb      	b.n	8007356 <_scanf_float+0x66>
 800757e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007586:	464a      	mov	r2, r9
 8007588:	4640      	mov	r0, r8
 800758a:	4798      	blx	r3
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	3b01      	subs	r3, #1
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	e6eb      	b.n	800736c <_scanf_float+0x7c>
 8007594:	1e6b      	subs	r3, r5, #1
 8007596:	2b06      	cmp	r3, #6
 8007598:	d824      	bhi.n	80075e4 <_scanf_float+0x2f4>
 800759a:	2d02      	cmp	r5, #2
 800759c:	d836      	bhi.n	800760c <_scanf_float+0x31c>
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	429e      	cmp	r6, r3
 80075a2:	f67f aee7 	bls.w	8007374 <_scanf_float+0x84>
 80075a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ae:	464a      	mov	r2, r9
 80075b0:	4640      	mov	r0, r8
 80075b2:	4798      	blx	r3
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	e7f0      	b.n	800759e <_scanf_float+0x2ae>
 80075bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80075c4:	464a      	mov	r2, r9
 80075c6:	4640      	mov	r0, r8
 80075c8:	4798      	blx	r3
 80075ca:	6923      	ldr	r3, [r4, #16]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	6123      	str	r3, [r4, #16]
 80075d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d4:	fa5f fa8a 	uxtb.w	sl, sl
 80075d8:	f1ba 0f02 	cmp.w	sl, #2
 80075dc:	d1ee      	bne.n	80075bc <_scanf_float+0x2cc>
 80075de:	3d03      	subs	r5, #3
 80075e0:	b2ed      	uxtb	r5, r5
 80075e2:	1b76      	subs	r6, r6, r5
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	05da      	lsls	r2, r3, #23
 80075e8:	d530      	bpl.n	800764c <_scanf_float+0x35c>
 80075ea:	055b      	lsls	r3, r3, #21
 80075ec:	d511      	bpl.n	8007612 <_scanf_float+0x322>
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	429e      	cmp	r6, r3
 80075f2:	f67f aebf 	bls.w	8007374 <_scanf_float+0x84>
 80075f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075fe:	464a      	mov	r2, r9
 8007600:	4640      	mov	r0, r8
 8007602:	4798      	blx	r3
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	3b01      	subs	r3, #1
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	e7f0      	b.n	80075ee <_scanf_float+0x2fe>
 800760c:	46aa      	mov	sl, r5
 800760e:	46b3      	mov	fp, r6
 8007610:	e7de      	b.n	80075d0 <_scanf_float+0x2e0>
 8007612:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	2965      	cmp	r1, #101	@ 0x65
 800761a:	f103 33ff 	add.w	r3, r3, #4294967295
 800761e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007622:	6123      	str	r3, [r4, #16]
 8007624:	d00c      	beq.n	8007640 <_scanf_float+0x350>
 8007626:	2945      	cmp	r1, #69	@ 0x45
 8007628:	d00a      	beq.n	8007640 <_scanf_float+0x350>
 800762a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800762e:	464a      	mov	r2, r9
 8007630:	4640      	mov	r0, r8
 8007632:	4798      	blx	r3
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800763a:	3b01      	subs	r3, #1
 800763c:	1eb5      	subs	r5, r6, #2
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007644:	464a      	mov	r2, r9
 8007646:	4640      	mov	r0, r8
 8007648:	4798      	blx	r3
 800764a:	462e      	mov	r6, r5
 800764c:	6822      	ldr	r2, [r4, #0]
 800764e:	f012 0210 	ands.w	r2, r2, #16
 8007652:	d001      	beq.n	8007658 <_scanf_float+0x368>
 8007654:	2000      	movs	r0, #0
 8007656:	e68e      	b.n	8007376 <_scanf_float+0x86>
 8007658:	7032      	strb	r2, [r6, #0]
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007664:	d125      	bne.n	80076b2 <_scanf_float+0x3c2>
 8007666:	9b02      	ldr	r3, [sp, #8]
 8007668:	429f      	cmp	r7, r3
 800766a:	d00a      	beq.n	8007682 <_scanf_float+0x392>
 800766c:	1bda      	subs	r2, r3, r7
 800766e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007672:	429e      	cmp	r6, r3
 8007674:	bf28      	it	cs
 8007676:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800767a:	4922      	ldr	r1, [pc, #136]	@ (8007704 <_scanf_float+0x414>)
 800767c:	4630      	mov	r0, r6
 800767e:	f000 f977 	bl	8007970 <siprintf>
 8007682:	9901      	ldr	r1, [sp, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	4640      	mov	r0, r8
 8007688:	f002 fd32 	bl	800a0f0 <_strtod_r>
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f011 0f02 	tst.w	r1, #2
 8007696:	ec57 6b10 	vmov	r6, r7, d0
 800769a:	f103 0204 	add.w	r2, r3, #4
 800769e:	d015      	beq.n	80076cc <_scanf_float+0x3dc>
 80076a0:	9903      	ldr	r1, [sp, #12]
 80076a2:	600a      	str	r2, [r1, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	e9c3 6700 	strd	r6, r7, [r3]
 80076aa:	68e3      	ldr	r3, [r4, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60e3      	str	r3, [r4, #12]
 80076b0:	e7d0      	b.n	8007654 <_scanf_float+0x364>
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0e4      	beq.n	8007682 <_scanf_float+0x392>
 80076b8:	9905      	ldr	r1, [sp, #20]
 80076ba:	230a      	movs	r3, #10
 80076bc:	3101      	adds	r1, #1
 80076be:	4640      	mov	r0, r8
 80076c0:	f7ff f9b4 	bl	8006a2c <_strtol_r>
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	9e05      	ldr	r6, [sp, #20]
 80076c8:	1ac2      	subs	r2, r0, r3
 80076ca:	e7d0      	b.n	800766e <_scanf_float+0x37e>
 80076cc:	f011 0f04 	tst.w	r1, #4
 80076d0:	9903      	ldr	r1, [sp, #12]
 80076d2:	600a      	str	r2, [r1, #0]
 80076d4:	d1e6      	bne.n	80076a4 <_scanf_float+0x3b4>
 80076d6:	681d      	ldr	r5, [r3, #0]
 80076d8:	4632      	mov	r2, r6
 80076da:	463b      	mov	r3, r7
 80076dc:	4630      	mov	r0, r6
 80076de:	4639      	mov	r1, r7
 80076e0:	f7f9 fa2c 	bl	8000b3c <__aeabi_dcmpun>
 80076e4:	b128      	cbz	r0, 80076f2 <_scanf_float+0x402>
 80076e6:	4808      	ldr	r0, [pc, #32]	@ (8007708 <_scanf_float+0x418>)
 80076e8:	f000 faf8 	bl	8007cdc <nanf>
 80076ec:	ed85 0a00 	vstr	s0, [r5]
 80076f0:	e7db      	b.n	80076aa <_scanf_float+0x3ba>
 80076f2:	4630      	mov	r0, r6
 80076f4:	4639      	mov	r1, r7
 80076f6:	f7f9 fa7f 	bl	8000bf8 <__aeabi_d2f>
 80076fa:	6028      	str	r0, [r5, #0]
 80076fc:	e7d5      	b.n	80076aa <_scanf_float+0x3ba>
 80076fe:	2700      	movs	r7, #0
 8007700:	e62e      	b.n	8007360 <_scanf_float+0x70>
 8007702:	bf00      	nop
 8007704:	0800b3f1 	.word	0x0800b3f1
 8007708:	0800b532 	.word	0x0800b532

0800770c <std>:
 800770c:	2300      	movs	r3, #0
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	e9c0 3300 	strd	r3, r3, [r0]
 8007716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771a:	6083      	str	r3, [r0, #8]
 800771c:	8181      	strh	r1, [r0, #12]
 800771e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007720:	81c2      	strh	r2, [r0, #14]
 8007722:	6183      	str	r3, [r0, #24]
 8007724:	4619      	mov	r1, r3
 8007726:	2208      	movs	r2, #8
 8007728:	305c      	adds	r0, #92	@ 0x5c
 800772a:	f000 fa57 	bl	8007bdc <memset>
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <std+0x58>)
 8007730:	6263      	str	r3, [r4, #36]	@ 0x24
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <std+0x5c>)
 8007734:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007736:	4b0d      	ldr	r3, [pc, #52]	@ (800776c <std+0x60>)
 8007738:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800773a:	4b0d      	ldr	r3, [pc, #52]	@ (8007770 <std+0x64>)
 800773c:	6323      	str	r3, [r4, #48]	@ 0x30
 800773e:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <std+0x68>)
 8007740:	6224      	str	r4, [r4, #32]
 8007742:	429c      	cmp	r4, r3
 8007744:	d006      	beq.n	8007754 <std+0x48>
 8007746:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800774a:	4294      	cmp	r4, r2
 800774c:	d002      	beq.n	8007754 <std+0x48>
 800774e:	33d0      	adds	r3, #208	@ 0xd0
 8007750:	429c      	cmp	r4, r3
 8007752:	d105      	bne.n	8007760 <std+0x54>
 8007754:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800775c:	f000 baba 	b.w	8007cd4 <__retarget_lock_init_recursive>
 8007760:	bd10      	pop	{r4, pc}
 8007762:	bf00      	nop
 8007764:	080079b5 	.word	0x080079b5
 8007768:	080079d7 	.word	0x080079d7
 800776c:	08007a0f 	.word	0x08007a0f
 8007770:	08007a33 	.word	0x08007a33
 8007774:	20000340 	.word	0x20000340

08007778 <stdio_exit_handler>:
 8007778:	4a02      	ldr	r2, [pc, #8]	@ (8007784 <stdio_exit_handler+0xc>)
 800777a:	4903      	ldr	r1, [pc, #12]	@ (8007788 <stdio_exit_handler+0x10>)
 800777c:	4803      	ldr	r0, [pc, #12]	@ (800778c <stdio_exit_handler+0x14>)
 800777e:	f000 b869 	b.w	8007854 <_fwalk_sglue>
 8007782:	bf00      	nop
 8007784:	2000000c 	.word	0x2000000c
 8007788:	0800a739 	.word	0x0800a739
 800778c:	2000001c 	.word	0x2000001c

08007790 <cleanup_stdio>:
 8007790:	6841      	ldr	r1, [r0, #4]
 8007792:	4b0c      	ldr	r3, [pc, #48]	@ (80077c4 <cleanup_stdio+0x34>)
 8007794:	4299      	cmp	r1, r3
 8007796:	b510      	push	{r4, lr}
 8007798:	4604      	mov	r4, r0
 800779a:	d001      	beq.n	80077a0 <cleanup_stdio+0x10>
 800779c:	f002 ffcc 	bl	800a738 <_fflush_r>
 80077a0:	68a1      	ldr	r1, [r4, #8]
 80077a2:	4b09      	ldr	r3, [pc, #36]	@ (80077c8 <cleanup_stdio+0x38>)
 80077a4:	4299      	cmp	r1, r3
 80077a6:	d002      	beq.n	80077ae <cleanup_stdio+0x1e>
 80077a8:	4620      	mov	r0, r4
 80077aa:	f002 ffc5 	bl	800a738 <_fflush_r>
 80077ae:	68e1      	ldr	r1, [r4, #12]
 80077b0:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <cleanup_stdio+0x3c>)
 80077b2:	4299      	cmp	r1, r3
 80077b4:	d004      	beq.n	80077c0 <cleanup_stdio+0x30>
 80077b6:	4620      	mov	r0, r4
 80077b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077bc:	f002 bfbc 	b.w	800a738 <_fflush_r>
 80077c0:	bd10      	pop	{r4, pc}
 80077c2:	bf00      	nop
 80077c4:	20000340 	.word	0x20000340
 80077c8:	200003a8 	.word	0x200003a8
 80077cc:	20000410 	.word	0x20000410

080077d0 <global_stdio_init.part.0>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007800 <global_stdio_init.part.0+0x30>)
 80077d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007804 <global_stdio_init.part.0+0x34>)
 80077d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007808 <global_stdio_init.part.0+0x38>)
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	4620      	mov	r0, r4
 80077dc:	2200      	movs	r2, #0
 80077de:	2104      	movs	r1, #4
 80077e0:	f7ff ff94 	bl	800770c <std>
 80077e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077e8:	2201      	movs	r2, #1
 80077ea:	2109      	movs	r1, #9
 80077ec:	f7ff ff8e 	bl	800770c <std>
 80077f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077f4:	2202      	movs	r2, #2
 80077f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077fa:	2112      	movs	r1, #18
 80077fc:	f7ff bf86 	b.w	800770c <std>
 8007800:	20000478 	.word	0x20000478
 8007804:	20000340 	.word	0x20000340
 8007808:	08007779 	.word	0x08007779

0800780c <__sfp_lock_acquire>:
 800780c:	4801      	ldr	r0, [pc, #4]	@ (8007814 <__sfp_lock_acquire+0x8>)
 800780e:	f000 ba62 	b.w	8007cd6 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	20000481 	.word	0x20000481

08007818 <__sfp_lock_release>:
 8007818:	4801      	ldr	r0, [pc, #4]	@ (8007820 <__sfp_lock_release+0x8>)
 800781a:	f000 ba5d 	b.w	8007cd8 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	20000481 	.word	0x20000481

08007824 <__sinit>:
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	f7ff fff0 	bl	800780c <__sfp_lock_acquire>
 800782c:	6a23      	ldr	r3, [r4, #32]
 800782e:	b11b      	cbz	r3, 8007838 <__sinit+0x14>
 8007830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007834:	f7ff bff0 	b.w	8007818 <__sfp_lock_release>
 8007838:	4b04      	ldr	r3, [pc, #16]	@ (800784c <__sinit+0x28>)
 800783a:	6223      	str	r3, [r4, #32]
 800783c:	4b04      	ldr	r3, [pc, #16]	@ (8007850 <__sinit+0x2c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f5      	bne.n	8007830 <__sinit+0xc>
 8007844:	f7ff ffc4 	bl	80077d0 <global_stdio_init.part.0>
 8007848:	e7f2      	b.n	8007830 <__sinit+0xc>
 800784a:	bf00      	nop
 800784c:	08007791 	.word	0x08007791
 8007850:	20000478 	.word	0x20000478

08007854 <_fwalk_sglue>:
 8007854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007858:	4607      	mov	r7, r0
 800785a:	4688      	mov	r8, r1
 800785c:	4614      	mov	r4, r2
 800785e:	2600      	movs	r6, #0
 8007860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007864:	f1b9 0901 	subs.w	r9, r9, #1
 8007868:	d505      	bpl.n	8007876 <_fwalk_sglue+0x22>
 800786a:	6824      	ldr	r4, [r4, #0]
 800786c:	2c00      	cmp	r4, #0
 800786e:	d1f7      	bne.n	8007860 <_fwalk_sglue+0xc>
 8007870:	4630      	mov	r0, r6
 8007872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d907      	bls.n	800788c <_fwalk_sglue+0x38>
 800787c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007880:	3301      	adds	r3, #1
 8007882:	d003      	beq.n	800788c <_fwalk_sglue+0x38>
 8007884:	4629      	mov	r1, r5
 8007886:	4638      	mov	r0, r7
 8007888:	47c0      	blx	r8
 800788a:	4306      	orrs	r6, r0
 800788c:	3568      	adds	r5, #104	@ 0x68
 800788e:	e7e9      	b.n	8007864 <_fwalk_sglue+0x10>

08007890 <iprintf>:
 8007890:	b40f      	push	{r0, r1, r2, r3}
 8007892:	b507      	push	{r0, r1, r2, lr}
 8007894:	4906      	ldr	r1, [pc, #24]	@ (80078b0 <iprintf+0x20>)
 8007896:	ab04      	add	r3, sp, #16
 8007898:	6808      	ldr	r0, [r1, #0]
 800789a:	f853 2b04 	ldr.w	r2, [r3], #4
 800789e:	6881      	ldr	r1, [r0, #8]
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	f002 fdad 	bl	800a400 <_vfiprintf_r>
 80078a6:	b003      	add	sp, #12
 80078a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078ac:	b004      	add	sp, #16
 80078ae:	4770      	bx	lr
 80078b0:	20000018 	.word	0x20000018

080078b4 <_puts_r>:
 80078b4:	6a03      	ldr	r3, [r0, #32]
 80078b6:	b570      	push	{r4, r5, r6, lr}
 80078b8:	6884      	ldr	r4, [r0, #8]
 80078ba:	4605      	mov	r5, r0
 80078bc:	460e      	mov	r6, r1
 80078be:	b90b      	cbnz	r3, 80078c4 <_puts_r+0x10>
 80078c0:	f7ff ffb0 	bl	8007824 <__sinit>
 80078c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c6:	07db      	lsls	r3, r3, #31
 80078c8:	d405      	bmi.n	80078d6 <_puts_r+0x22>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	0598      	lsls	r0, r3, #22
 80078ce:	d402      	bmi.n	80078d6 <_puts_r+0x22>
 80078d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d2:	f000 fa00 	bl	8007cd6 <__retarget_lock_acquire_recursive>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	0719      	lsls	r1, r3, #28
 80078da:	d502      	bpl.n	80078e2 <_puts_r+0x2e>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d135      	bne.n	800794e <_puts_r+0x9a>
 80078e2:	4621      	mov	r1, r4
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 f923 	bl	8007b30 <__swsetup_r>
 80078ea:	b380      	cbz	r0, 800794e <_puts_r+0x9a>
 80078ec:	f04f 35ff 	mov.w	r5, #4294967295
 80078f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078f2:	07da      	lsls	r2, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_puts_r+0x4e>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	059b      	lsls	r3, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_puts_r+0x4e>
 80078fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fe:	f000 f9eb 	bl	8007cd8 <__retarget_lock_release_recursive>
 8007902:	4628      	mov	r0, r5
 8007904:	bd70      	pop	{r4, r5, r6, pc}
 8007906:	2b00      	cmp	r3, #0
 8007908:	da04      	bge.n	8007914 <_puts_r+0x60>
 800790a:	69a2      	ldr	r2, [r4, #24]
 800790c:	429a      	cmp	r2, r3
 800790e:	dc17      	bgt.n	8007940 <_puts_r+0x8c>
 8007910:	290a      	cmp	r1, #10
 8007912:	d015      	beq.n	8007940 <_puts_r+0x8c>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	6022      	str	r2, [r4, #0]
 800791a:	7019      	strb	r1, [r3, #0]
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007922:	3b01      	subs	r3, #1
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	2900      	cmp	r1, #0
 8007928:	d1ed      	bne.n	8007906 <_puts_r+0x52>
 800792a:	2b00      	cmp	r3, #0
 800792c:	da11      	bge.n	8007952 <_puts_r+0x9e>
 800792e:	4622      	mov	r2, r4
 8007930:	210a      	movs	r1, #10
 8007932:	4628      	mov	r0, r5
 8007934:	f000 f8be 	bl	8007ab4 <__swbuf_r>
 8007938:	3001      	adds	r0, #1
 800793a:	d0d7      	beq.n	80078ec <_puts_r+0x38>
 800793c:	250a      	movs	r5, #10
 800793e:	e7d7      	b.n	80078f0 <_puts_r+0x3c>
 8007940:	4622      	mov	r2, r4
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f8b6 	bl	8007ab4 <__swbuf_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d1e7      	bne.n	800791c <_puts_r+0x68>
 800794c:	e7ce      	b.n	80078ec <_puts_r+0x38>
 800794e:	3e01      	subs	r6, #1
 8007950:	e7e4      	b.n	800791c <_puts_r+0x68>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	6022      	str	r2, [r4, #0]
 8007958:	220a      	movs	r2, #10
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e7ee      	b.n	800793c <_puts_r+0x88>
	...

08007960 <puts>:
 8007960:	4b02      	ldr	r3, [pc, #8]	@ (800796c <puts+0xc>)
 8007962:	4601      	mov	r1, r0
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f7ff bfa5 	b.w	80078b4 <_puts_r>
 800796a:	bf00      	nop
 800796c:	20000018 	.word	0x20000018

08007970 <siprintf>:
 8007970:	b40e      	push	{r1, r2, r3}
 8007972:	b510      	push	{r4, lr}
 8007974:	b09d      	sub	sp, #116	@ 0x74
 8007976:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007978:	9002      	str	r0, [sp, #8]
 800797a:	9006      	str	r0, [sp, #24]
 800797c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007980:	480a      	ldr	r0, [pc, #40]	@ (80079ac <siprintf+0x3c>)
 8007982:	9107      	str	r1, [sp, #28]
 8007984:	9104      	str	r1, [sp, #16]
 8007986:	490a      	ldr	r1, [pc, #40]	@ (80079b0 <siprintf+0x40>)
 8007988:	f853 2b04 	ldr.w	r2, [r3], #4
 800798c:	9105      	str	r1, [sp, #20]
 800798e:	2400      	movs	r4, #0
 8007990:	a902      	add	r1, sp, #8
 8007992:	6800      	ldr	r0, [r0, #0]
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007998:	f002 fc0c 	bl	800a1b4 <_svfiprintf_r>
 800799c:	9b02      	ldr	r3, [sp, #8]
 800799e:	701c      	strb	r4, [r3, #0]
 80079a0:	b01d      	add	sp, #116	@ 0x74
 80079a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a6:	b003      	add	sp, #12
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	20000018 	.word	0x20000018
 80079b0:	ffff0208 	.word	0xffff0208

080079b4 <__sread>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	460c      	mov	r4, r1
 80079b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079bc:	f000 f93c 	bl	8007c38 <_read_r>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	bfab      	itete	ge
 80079c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079c6:	89a3      	ldrhlt	r3, [r4, #12]
 80079c8:	181b      	addge	r3, r3, r0
 80079ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079ce:	bfac      	ite	ge
 80079d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079d2:	81a3      	strhlt	r3, [r4, #12]
 80079d4:	bd10      	pop	{r4, pc}

080079d6 <__swrite>:
 80079d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079da:	461f      	mov	r7, r3
 80079dc:	898b      	ldrh	r3, [r1, #12]
 80079de:	05db      	lsls	r3, r3, #23
 80079e0:	4605      	mov	r5, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	4616      	mov	r6, r2
 80079e6:	d505      	bpl.n	80079f4 <__swrite+0x1e>
 80079e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ec:	2302      	movs	r3, #2
 80079ee:	2200      	movs	r2, #0
 80079f0:	f000 f910 	bl	8007c14 <_lseek_r>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	4632      	mov	r2, r6
 8007a02:	463b      	mov	r3, r7
 8007a04:	4628      	mov	r0, r5
 8007a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0a:	f000 b927 	b.w	8007c5c <_write_r>

08007a0e <__sseek>:
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	460c      	mov	r4, r1
 8007a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a16:	f000 f8fd 	bl	8007c14 <_lseek_r>
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	bf15      	itete	ne
 8007a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a2a:	81a3      	strheq	r3, [r4, #12]
 8007a2c:	bf18      	it	ne
 8007a2e:	81a3      	strhne	r3, [r4, #12]
 8007a30:	bd10      	pop	{r4, pc}

08007a32 <__sclose>:
 8007a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a36:	f000 b8dd 	b.w	8007bf4 <_close_r>

08007a3a <_vsniprintf_r>:
 8007a3a:	b530      	push	{r4, r5, lr}
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	b09b      	sub	sp, #108	@ 0x6c
 8007a42:	4605      	mov	r5, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	da05      	bge.n	8007a54 <_vsniprintf_r+0x1a>
 8007a48:	238b      	movs	r3, #139	@ 0x8b
 8007a4a:	6003      	str	r3, [r0, #0]
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	b01b      	add	sp, #108	@ 0x6c
 8007a52:	bd30      	pop	{r4, r5, pc}
 8007a54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a62:	bf14      	ite	ne
 8007a64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a68:	4623      	moveq	r3, r4
 8007a6a:	9302      	str	r3, [sp, #8]
 8007a6c:	9305      	str	r3, [sp, #20]
 8007a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a72:	9100      	str	r1, [sp, #0]
 8007a74:	9104      	str	r1, [sp, #16]
 8007a76:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007a7a:	4669      	mov	r1, sp
 8007a7c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007a7e:	f002 fb99 	bl	800a1b4 <_svfiprintf_r>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	bfbc      	itt	lt
 8007a86:	238b      	movlt	r3, #139	@ 0x8b
 8007a88:	602b      	strlt	r3, [r5, #0]
 8007a8a:	2c00      	cmp	r4, #0
 8007a8c:	d0e0      	beq.n	8007a50 <_vsniprintf_r+0x16>
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e7dc      	b.n	8007a50 <_vsniprintf_r+0x16>
	...

08007a98 <vsniprintf>:
 8007a98:	b507      	push	{r0, r1, r2, lr}
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	460a      	mov	r2, r1
 8007aa0:	4601      	mov	r1, r0
 8007aa2:	4803      	ldr	r0, [pc, #12]	@ (8007ab0 <vsniprintf+0x18>)
 8007aa4:	6800      	ldr	r0, [r0, #0]
 8007aa6:	f7ff ffc8 	bl	8007a3a <_vsniprintf_r>
 8007aaa:	b003      	add	sp, #12
 8007aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ab0:	20000018 	.word	0x20000018

08007ab4 <__swbuf_r>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	460e      	mov	r6, r1
 8007ab8:	4614      	mov	r4, r2
 8007aba:	4605      	mov	r5, r0
 8007abc:	b118      	cbz	r0, 8007ac6 <__swbuf_r+0x12>
 8007abe:	6a03      	ldr	r3, [r0, #32]
 8007ac0:	b90b      	cbnz	r3, 8007ac6 <__swbuf_r+0x12>
 8007ac2:	f7ff feaf 	bl	8007824 <__sinit>
 8007ac6:	69a3      	ldr	r3, [r4, #24]
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	071a      	lsls	r2, r3, #28
 8007ace:	d501      	bpl.n	8007ad4 <__swbuf_r+0x20>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	b943      	cbnz	r3, 8007ae6 <__swbuf_r+0x32>
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f000 f82a 	bl	8007b30 <__swsetup_r>
 8007adc:	b118      	cbz	r0, 8007ae6 <__swbuf_r+0x32>
 8007ade:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	6922      	ldr	r2, [r4, #16]
 8007aea:	1a98      	subs	r0, r3, r2
 8007aec:	6963      	ldr	r3, [r4, #20]
 8007aee:	b2f6      	uxtb	r6, r6
 8007af0:	4283      	cmp	r3, r0
 8007af2:	4637      	mov	r7, r6
 8007af4:	dc05      	bgt.n	8007b02 <__swbuf_r+0x4e>
 8007af6:	4621      	mov	r1, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	f002 fe1d 	bl	800a738 <_fflush_r>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d1ed      	bne.n	8007ade <__swbuf_r+0x2a>
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	60a3      	str	r3, [r4, #8]
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	701e      	strb	r6, [r3, #0]
 8007b10:	6962      	ldr	r2, [r4, #20]
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d004      	beq.n	8007b22 <__swbuf_r+0x6e>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	07db      	lsls	r3, r3, #31
 8007b1c:	d5e1      	bpl.n	8007ae2 <__swbuf_r+0x2e>
 8007b1e:	2e0a      	cmp	r6, #10
 8007b20:	d1df      	bne.n	8007ae2 <__swbuf_r+0x2e>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f002 fe07 	bl	800a738 <_fflush_r>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d0d9      	beq.n	8007ae2 <__swbuf_r+0x2e>
 8007b2e:	e7d6      	b.n	8007ade <__swbuf_r+0x2a>

08007b30 <__swsetup_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4b29      	ldr	r3, [pc, #164]	@ (8007bd8 <__swsetup_r+0xa8>)
 8007b34:	4605      	mov	r5, r0
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	460c      	mov	r4, r1
 8007b3a:	b118      	cbz	r0, 8007b44 <__swsetup_r+0x14>
 8007b3c:	6a03      	ldr	r3, [r0, #32]
 8007b3e:	b90b      	cbnz	r3, 8007b44 <__swsetup_r+0x14>
 8007b40:	f7ff fe70 	bl	8007824 <__sinit>
 8007b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b48:	0719      	lsls	r1, r3, #28
 8007b4a:	d422      	bmi.n	8007b92 <__swsetup_r+0x62>
 8007b4c:	06da      	lsls	r2, r3, #27
 8007b4e:	d407      	bmi.n	8007b60 <__swsetup_r+0x30>
 8007b50:	2209      	movs	r2, #9
 8007b52:	602a      	str	r2, [r5, #0]
 8007b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	e033      	b.n	8007bc8 <__swsetup_r+0x98>
 8007b60:	0758      	lsls	r0, r3, #29
 8007b62:	d512      	bpl.n	8007b8a <__swsetup_r+0x5a>
 8007b64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b66:	b141      	cbz	r1, 8007b7a <__swsetup_r+0x4a>
 8007b68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b6c:	4299      	cmp	r1, r3
 8007b6e:	d002      	beq.n	8007b76 <__swsetup_r+0x46>
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 ff11 	bl	8008998 <_free_r>
 8007b76:	2300      	movs	r3, #0
 8007b78:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	2300      	movs	r3, #0
 8007b84:	6063      	str	r3, [r4, #4]
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f043 0308 	orr.w	r3, r3, #8
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	b94b      	cbnz	r3, 8007baa <__swsetup_r+0x7a>
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba0:	d003      	beq.n	8007baa <__swsetup_r+0x7a>
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f002 fe15 	bl	800a7d4 <__smakebuf_r>
 8007baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bae:	f013 0201 	ands.w	r2, r3, #1
 8007bb2:	d00a      	beq.n	8007bca <__swsetup_r+0x9a>
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	60a2      	str	r2, [r4, #8]
 8007bb8:	6962      	ldr	r2, [r4, #20]
 8007bba:	4252      	negs	r2, r2
 8007bbc:	61a2      	str	r2, [r4, #24]
 8007bbe:	6922      	ldr	r2, [r4, #16]
 8007bc0:	b942      	cbnz	r2, 8007bd4 <__swsetup_r+0xa4>
 8007bc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bc6:	d1c5      	bne.n	8007b54 <__swsetup_r+0x24>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	0799      	lsls	r1, r3, #30
 8007bcc:	bf58      	it	pl
 8007bce:	6962      	ldrpl	r2, [r4, #20]
 8007bd0:	60a2      	str	r2, [r4, #8]
 8007bd2:	e7f4      	b.n	8007bbe <__swsetup_r+0x8e>
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	e7f7      	b.n	8007bc8 <__swsetup_r+0x98>
 8007bd8:	20000018 	.word	0x20000018

08007bdc <memset>:
 8007bdc:	4402      	add	r2, r0
 8007bde:	4603      	mov	r3, r0
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d100      	bne.n	8007be6 <memset+0xa>
 8007be4:	4770      	bx	lr
 8007be6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bea:	e7f9      	b.n	8007be0 <memset+0x4>

08007bec <_localeconv_r>:
 8007bec:	4800      	ldr	r0, [pc, #0]	@ (8007bf0 <_localeconv_r+0x4>)
 8007bee:	4770      	bx	lr
 8007bf0:	20000158 	.word	0x20000158

08007bf4 <_close_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d06      	ldr	r5, [pc, #24]	@ (8007c10 <_close_r+0x1c>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	f7fa fed2 	bl	80029a8 <_close>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_close_r+0x1a>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_close_r+0x1a>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	2000047c 	.word	0x2000047c

08007c14 <_lseek_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	@ (8007c34 <_lseek_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7fa fee7 	bl	80029f6 <_lseek>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_lseek_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_lseek_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	2000047c 	.word	0x2000047c

08007c38 <_read_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	@ (8007c58 <_read_r+0x20>)
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	602a      	str	r2, [r5, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7fa fe75 	bl	8002936 <_read>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_read_r+0x1e>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_read_r+0x1e>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	2000047c 	.word	0x2000047c

08007c5c <_write_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	@ (8007c7c <_write_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7fa fe80 	bl	8002970 <_write>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_write_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_write_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	2000047c 	.word	0x2000047c

08007c80 <__errno>:
 8007c80:	4b01      	ldr	r3, [pc, #4]	@ (8007c88 <__errno+0x8>)
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000018 	.word	0x20000018

08007c8c <__libc_init_array>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007cc4 <__libc_init_array+0x38>)
 8007c90:	4c0d      	ldr	r4, [pc, #52]	@ (8007cc8 <__libc_init_array+0x3c>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	2600      	movs	r6, #0
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	d109      	bne.n	8007cb0 <__libc_init_array+0x24>
 8007c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007ccc <__libc_init_array+0x40>)
 8007c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007cd0 <__libc_init_array+0x44>)
 8007ca0:	f003 fa68 	bl	800b174 <_init>
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	2600      	movs	r6, #0
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	d105      	bne.n	8007cba <__libc_init_array+0x2e>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb4:	4798      	blx	r3
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7ee      	b.n	8007c98 <__libc_init_array+0xc>
 8007cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbe:	4798      	blx	r3
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7f2      	b.n	8007caa <__libc_init_array+0x1e>
 8007cc4:	0800b6e8 	.word	0x0800b6e8
 8007cc8:	0800b6e8 	.word	0x0800b6e8
 8007ccc:	0800b6e8 	.word	0x0800b6e8
 8007cd0:	0800b6ec 	.word	0x0800b6ec

08007cd4 <__retarget_lock_init_recursive>:
 8007cd4:	4770      	bx	lr

08007cd6 <__retarget_lock_acquire_recursive>:
 8007cd6:	4770      	bx	lr

08007cd8 <__retarget_lock_release_recursive>:
 8007cd8:	4770      	bx	lr
	...

08007cdc <nanf>:
 8007cdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007ce4 <nanf+0x8>
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	7fc00000 	.word	0x7fc00000

08007ce8 <quorem>:
 8007ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	6903      	ldr	r3, [r0, #16]
 8007cee:	690c      	ldr	r4, [r1, #16]
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	4607      	mov	r7, r0
 8007cf4:	db7e      	blt.n	8007df4 <quorem+0x10c>
 8007cf6:	3c01      	subs	r4, #1
 8007cf8:	f101 0814 	add.w	r8, r1, #20
 8007cfc:	00a3      	lsls	r3, r4, #2
 8007cfe:	f100 0514 	add.w	r5, r0, #20
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d12:	3301      	adds	r3, #1
 8007d14:	429a      	cmp	r2, r3
 8007d16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d1e:	d32e      	bcc.n	8007d7e <quorem+0x96>
 8007d20:	f04f 0a00 	mov.w	sl, #0
 8007d24:	46c4      	mov	ip, r8
 8007d26:	46ae      	mov	lr, r5
 8007d28:	46d3      	mov	fp, sl
 8007d2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d2e:	b298      	uxth	r0, r3
 8007d30:	fb06 a000 	mla	r0, r6, r0, sl
 8007d34:	0c02      	lsrs	r2, r0, #16
 8007d36:	0c1b      	lsrs	r3, r3, #16
 8007d38:	fb06 2303 	mla	r3, r6, r3, r2
 8007d3c:	f8de 2000 	ldr.w	r2, [lr]
 8007d40:	b280      	uxth	r0, r0
 8007d42:	b292      	uxth	r2, r2
 8007d44:	1a12      	subs	r2, r2, r0
 8007d46:	445a      	add	r2, fp
 8007d48:	f8de 0000 	ldr.w	r0, [lr]
 8007d4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d60:	45e1      	cmp	r9, ip
 8007d62:	f84e 2b04 	str.w	r2, [lr], #4
 8007d66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d6a:	d2de      	bcs.n	8007d2a <quorem+0x42>
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	58eb      	ldr	r3, [r5, r3]
 8007d70:	b92b      	cbnz	r3, 8007d7e <quorem+0x96>
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	3b04      	subs	r3, #4
 8007d76:	429d      	cmp	r5, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	d32f      	bcc.n	8007ddc <quorem+0xf4>
 8007d7c:	613c      	str	r4, [r7, #16]
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f001 f9c6 	bl	8009110 <__mcmp>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	db25      	blt.n	8007dd4 <quorem+0xec>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d90:	f8d1 c000 	ldr.w	ip, [r1]
 8007d94:	fa1f fe82 	uxth.w	lr, r2
 8007d98:	fa1f f38c 	uxth.w	r3, ip
 8007d9c:	eba3 030e 	sub.w	r3, r3, lr
 8007da0:	4403      	add	r3, r0
 8007da2:	0c12      	lsrs	r2, r2, #16
 8007da4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007da8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007db2:	45c1      	cmp	r9, r8
 8007db4:	f841 3b04 	str.w	r3, [r1], #4
 8007db8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007dbc:	d2e6      	bcs.n	8007d8c <quorem+0xa4>
 8007dbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dc6:	b922      	cbnz	r2, 8007dd2 <quorem+0xea>
 8007dc8:	3b04      	subs	r3, #4
 8007dca:	429d      	cmp	r5, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	d30b      	bcc.n	8007de8 <quorem+0x100>
 8007dd0:	613c      	str	r4, [r7, #16]
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	b003      	add	sp, #12
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	3b04      	subs	r3, #4
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d1cb      	bne.n	8007d7c <quorem+0x94>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	e7c6      	b.n	8007d76 <quorem+0x8e>
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	3b04      	subs	r3, #4
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d1ef      	bne.n	8007dd0 <quorem+0xe8>
 8007df0:	3c01      	subs	r4, #1
 8007df2:	e7ea      	b.n	8007dca <quorem+0xe2>
 8007df4:	2000      	movs	r0, #0
 8007df6:	e7ee      	b.n	8007dd6 <quorem+0xee>

08007df8 <_dtoa_r>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	69c7      	ldr	r7, [r0, #28]
 8007dfe:	b097      	sub	sp, #92	@ 0x5c
 8007e00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e04:	ec55 4b10 	vmov	r4, r5, d0
 8007e08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007e0a:	9107      	str	r1, [sp, #28]
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e10:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e12:	b97f      	cbnz	r7, 8007e34 <_dtoa_r+0x3c>
 8007e14:	2010      	movs	r0, #16
 8007e16:	f000 fe09 	bl	8008a2c <malloc>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007e20:	b920      	cbnz	r0, 8007e2c <_dtoa_r+0x34>
 8007e22:	4ba9      	ldr	r3, [pc, #676]	@ (80080c8 <_dtoa_r+0x2d0>)
 8007e24:	21ef      	movs	r1, #239	@ 0xef
 8007e26:	48a9      	ldr	r0, [pc, #676]	@ (80080cc <_dtoa_r+0x2d4>)
 8007e28:	f002 fd86 	bl	800a938 <__assert_func>
 8007e2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e30:	6007      	str	r7, [r0, #0]
 8007e32:	60c7      	str	r7, [r0, #12]
 8007e34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	b159      	cbz	r1, 8007e54 <_dtoa_r+0x5c>
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	604a      	str	r2, [r1, #4]
 8007e40:	2301      	movs	r3, #1
 8007e42:	4093      	lsls	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
 8007e46:	4648      	mov	r0, r9
 8007e48:	f000 fee6 	bl	8008c18 <_Bfree>
 8007e4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	1e2b      	subs	r3, r5, #0
 8007e56:	bfb9      	ittee	lt
 8007e58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e5c:	9305      	strlt	r3, [sp, #20]
 8007e5e:	2300      	movge	r3, #0
 8007e60:	6033      	strge	r3, [r6, #0]
 8007e62:	9f05      	ldr	r7, [sp, #20]
 8007e64:	4b9a      	ldr	r3, [pc, #616]	@ (80080d0 <_dtoa_r+0x2d8>)
 8007e66:	bfbc      	itt	lt
 8007e68:	2201      	movlt	r2, #1
 8007e6a:	6032      	strlt	r2, [r6, #0]
 8007e6c:	43bb      	bics	r3, r7
 8007e6e:	d112      	bne.n	8007e96 <_dtoa_r+0x9e>
 8007e70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007e72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e7c:	4323      	orrs	r3, r4
 8007e7e:	f000 855a 	beq.w	8008936 <_dtoa_r+0xb3e>
 8007e82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80080e4 <_dtoa_r+0x2ec>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 855c 	beq.w	8008946 <_dtoa_r+0xb4e>
 8007e8e:	f10a 0303 	add.w	r3, sl, #3
 8007e92:	f000 bd56 	b.w	8008942 <_dtoa_r+0xb4a>
 8007e96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	ec51 0b17 	vmov	r0, r1, d7
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ea6:	f7f8 fe17 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eaa:	4680      	mov	r8, r0
 8007eac:	b158      	cbz	r0, 8007ec6 <_dtoa_r+0xce>
 8007eae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eb6:	b113      	cbz	r3, 8007ebe <_dtoa_r+0xc6>
 8007eb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007eba:	4b86      	ldr	r3, [pc, #536]	@ (80080d4 <_dtoa_r+0x2dc>)
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80080e8 <_dtoa_r+0x2f0>
 8007ec2:	f000 bd40 	b.w	8008946 <_dtoa_r+0xb4e>
 8007ec6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007eca:	aa14      	add	r2, sp, #80	@ 0x50
 8007ecc:	a915      	add	r1, sp, #84	@ 0x54
 8007ece:	4648      	mov	r0, r9
 8007ed0:	f001 fa3e 	bl	8009350 <__d2b>
 8007ed4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ed8:	9002      	str	r0, [sp, #8]
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d078      	beq.n	8007fd0 <_dtoa_r+0x1d8>
 8007ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ee0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007eec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ef0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ef4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ef8:	4619      	mov	r1, r3
 8007efa:	2200      	movs	r2, #0
 8007efc:	4b76      	ldr	r3, [pc, #472]	@ (80080d8 <_dtoa_r+0x2e0>)
 8007efe:	f7f8 f9cb 	bl	8000298 <__aeabi_dsub>
 8007f02:	a36b      	add	r3, pc, #428	@ (adr r3, 80080b0 <_dtoa_r+0x2b8>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 fb7e 	bl	8000608 <__aeabi_dmul>
 8007f0c:	a36a      	add	r3, pc, #424	@ (adr r3, 80080b8 <_dtoa_r+0x2c0>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f7f8 f9c3 	bl	800029c <__adddf3>
 8007f16:	4604      	mov	r4, r0
 8007f18:	4630      	mov	r0, r6
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	f7f8 fb0a 	bl	8000534 <__aeabi_i2d>
 8007f20:	a367      	add	r3, pc, #412	@ (adr r3, 80080c0 <_dtoa_r+0x2c8>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fb6f 	bl	8000608 <__aeabi_dmul>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7f8 f9b3 	bl	800029c <__adddf3>
 8007f36:	4604      	mov	r4, r0
 8007f38:	460d      	mov	r5, r1
 8007f3a:	f7f8 fe15 	bl	8000b68 <__aeabi_d2iz>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4607      	mov	r7, r0
 8007f42:	2300      	movs	r3, #0
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fdd0 	bl	8000aec <__aeabi_dcmplt>
 8007f4c:	b140      	cbz	r0, 8007f60 <_dtoa_r+0x168>
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f7f8 faf0 	bl	8000534 <__aeabi_i2d>
 8007f54:	4622      	mov	r2, r4
 8007f56:	462b      	mov	r3, r5
 8007f58:	f7f8 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f5c:	b900      	cbnz	r0, 8007f60 <_dtoa_r+0x168>
 8007f5e:	3f01      	subs	r7, #1
 8007f60:	2f16      	cmp	r7, #22
 8007f62:	d852      	bhi.n	800800a <_dtoa_r+0x212>
 8007f64:	4b5d      	ldr	r3, [pc, #372]	@ (80080dc <_dtoa_r+0x2e4>)
 8007f66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f72:	f7f8 fdbb 	bl	8000aec <__aeabi_dcmplt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d049      	beq.n	800800e <_dtoa_r+0x216>
 8007f7a:	3f01      	subs	r7, #1
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f82:	1b9b      	subs	r3, r3, r6
 8007f84:	1e5a      	subs	r2, r3, #1
 8007f86:	bf45      	ittet	mi
 8007f88:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f8c:	9300      	strmi	r3, [sp, #0]
 8007f8e:	2300      	movpl	r3, #0
 8007f90:	2300      	movmi	r3, #0
 8007f92:	9206      	str	r2, [sp, #24]
 8007f94:	bf54      	ite	pl
 8007f96:	9300      	strpl	r3, [sp, #0]
 8007f98:	9306      	strmi	r3, [sp, #24]
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	db39      	blt.n	8008012 <_dtoa_r+0x21a>
 8007f9e:	9b06      	ldr	r3, [sp, #24]
 8007fa0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007fa2:	443b      	add	r3, r7
 8007fa4:	9306      	str	r3, [sp, #24]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9308      	str	r3, [sp, #32]
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	2b09      	cmp	r3, #9
 8007fae:	d863      	bhi.n	8008078 <_dtoa_r+0x280>
 8007fb0:	2b05      	cmp	r3, #5
 8007fb2:	bfc4      	itt	gt
 8007fb4:	3b04      	subgt	r3, #4
 8007fb6:	9307      	strgt	r3, [sp, #28]
 8007fb8:	9b07      	ldr	r3, [sp, #28]
 8007fba:	f1a3 0302 	sub.w	r3, r3, #2
 8007fbe:	bfcc      	ite	gt
 8007fc0:	2400      	movgt	r4, #0
 8007fc2:	2401      	movle	r4, #1
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d863      	bhi.n	8008090 <_dtoa_r+0x298>
 8007fc8:	e8df f003 	tbb	[pc, r3]
 8007fcc:	2b375452 	.word	0x2b375452
 8007fd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007fd4:	441e      	add	r6, r3
 8007fd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	bfc1      	itttt	gt
 8007fde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007fe2:	409f      	lslgt	r7, r3
 8007fe4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007fe8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fec:	bfd6      	itet	le
 8007fee:	f1c3 0320 	rsble	r3, r3, #32
 8007ff2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ff6:	fa04 f003 	lslle.w	r0, r4, r3
 8007ffa:	f7f8 fa8b 	bl	8000514 <__aeabi_ui2d>
 8007ffe:	2201      	movs	r2, #1
 8008000:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008004:	3e01      	subs	r6, #1
 8008006:	9212      	str	r2, [sp, #72]	@ 0x48
 8008008:	e776      	b.n	8007ef8 <_dtoa_r+0x100>
 800800a:	2301      	movs	r3, #1
 800800c:	e7b7      	b.n	8007f7e <_dtoa_r+0x186>
 800800e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008010:	e7b6      	b.n	8007f80 <_dtoa_r+0x188>
 8008012:	9b00      	ldr	r3, [sp, #0]
 8008014:	1bdb      	subs	r3, r3, r7
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	427b      	negs	r3, r7
 800801a:	9308      	str	r3, [sp, #32]
 800801c:	2300      	movs	r3, #0
 800801e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008020:	e7c3      	b.n	8007faa <_dtoa_r+0x1b2>
 8008022:	2301      	movs	r3, #1
 8008024:	9309      	str	r3, [sp, #36]	@ 0x24
 8008026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008028:	eb07 0b03 	add.w	fp, r7, r3
 800802c:	f10b 0301 	add.w	r3, fp, #1
 8008030:	2b01      	cmp	r3, #1
 8008032:	9303      	str	r3, [sp, #12]
 8008034:	bfb8      	it	lt
 8008036:	2301      	movlt	r3, #1
 8008038:	e006      	b.n	8008048 <_dtoa_r+0x250>
 800803a:	2301      	movs	r3, #1
 800803c:	9309      	str	r3, [sp, #36]	@ 0x24
 800803e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008040:	2b00      	cmp	r3, #0
 8008042:	dd28      	ble.n	8008096 <_dtoa_r+0x29e>
 8008044:	469b      	mov	fp, r3
 8008046:	9303      	str	r3, [sp, #12]
 8008048:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800804c:	2100      	movs	r1, #0
 800804e:	2204      	movs	r2, #4
 8008050:	f102 0514 	add.w	r5, r2, #20
 8008054:	429d      	cmp	r5, r3
 8008056:	d926      	bls.n	80080a6 <_dtoa_r+0x2ae>
 8008058:	6041      	str	r1, [r0, #4]
 800805a:	4648      	mov	r0, r9
 800805c:	f000 fd9c 	bl	8008b98 <_Balloc>
 8008060:	4682      	mov	sl, r0
 8008062:	2800      	cmp	r0, #0
 8008064:	d142      	bne.n	80080ec <_dtoa_r+0x2f4>
 8008066:	4b1e      	ldr	r3, [pc, #120]	@ (80080e0 <_dtoa_r+0x2e8>)
 8008068:	4602      	mov	r2, r0
 800806a:	f240 11af 	movw	r1, #431	@ 0x1af
 800806e:	e6da      	b.n	8007e26 <_dtoa_r+0x2e>
 8008070:	2300      	movs	r3, #0
 8008072:	e7e3      	b.n	800803c <_dtoa_r+0x244>
 8008074:	2300      	movs	r3, #0
 8008076:	e7d5      	b.n	8008024 <_dtoa_r+0x22c>
 8008078:	2401      	movs	r4, #1
 800807a:	2300      	movs	r3, #0
 800807c:	9307      	str	r3, [sp, #28]
 800807e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008080:	f04f 3bff 	mov.w	fp, #4294967295
 8008084:	2200      	movs	r2, #0
 8008086:	f8cd b00c 	str.w	fp, [sp, #12]
 800808a:	2312      	movs	r3, #18
 800808c:	920c      	str	r2, [sp, #48]	@ 0x30
 800808e:	e7db      	b.n	8008048 <_dtoa_r+0x250>
 8008090:	2301      	movs	r3, #1
 8008092:	9309      	str	r3, [sp, #36]	@ 0x24
 8008094:	e7f4      	b.n	8008080 <_dtoa_r+0x288>
 8008096:	f04f 0b01 	mov.w	fp, #1
 800809a:	f8cd b00c 	str.w	fp, [sp, #12]
 800809e:	465b      	mov	r3, fp
 80080a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80080a4:	e7d0      	b.n	8008048 <_dtoa_r+0x250>
 80080a6:	3101      	adds	r1, #1
 80080a8:	0052      	lsls	r2, r2, #1
 80080aa:	e7d1      	b.n	8008050 <_dtoa_r+0x258>
 80080ac:	f3af 8000 	nop.w
 80080b0:	636f4361 	.word	0x636f4361
 80080b4:	3fd287a7 	.word	0x3fd287a7
 80080b8:	8b60c8b3 	.word	0x8b60c8b3
 80080bc:	3fc68a28 	.word	0x3fc68a28
 80080c0:	509f79fb 	.word	0x509f79fb
 80080c4:	3fd34413 	.word	0x3fd34413
 80080c8:	0800b403 	.word	0x0800b403
 80080cc:	0800b41a 	.word	0x0800b41a
 80080d0:	7ff00000 	.word	0x7ff00000
 80080d4:	0800b3ce 	.word	0x0800b3ce
 80080d8:	3ff80000 	.word	0x3ff80000
 80080dc:	0800b5c8 	.word	0x0800b5c8
 80080e0:	0800b472 	.word	0x0800b472
 80080e4:	0800b3ff 	.word	0x0800b3ff
 80080e8:	0800b3cd 	.word	0x0800b3cd
 80080ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080f0:	6018      	str	r0, [r3, #0]
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	2b0e      	cmp	r3, #14
 80080f6:	f200 80a1 	bhi.w	800823c <_dtoa_r+0x444>
 80080fa:	2c00      	cmp	r4, #0
 80080fc:	f000 809e 	beq.w	800823c <_dtoa_r+0x444>
 8008100:	2f00      	cmp	r7, #0
 8008102:	dd33      	ble.n	800816c <_dtoa_r+0x374>
 8008104:	4b9c      	ldr	r3, [pc, #624]	@ (8008378 <_dtoa_r+0x580>)
 8008106:	f007 020f 	and.w	r2, r7, #15
 800810a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810e:	ed93 7b00 	vldr	d7, [r3]
 8008112:	05f8      	lsls	r0, r7, #23
 8008114:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008118:	ea4f 1427 	mov.w	r4, r7, asr #4
 800811c:	d516      	bpl.n	800814c <_dtoa_r+0x354>
 800811e:	4b97      	ldr	r3, [pc, #604]	@ (800837c <_dtoa_r+0x584>)
 8008120:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008128:	f7f8 fb98 	bl	800085c <__aeabi_ddiv>
 800812c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008130:	f004 040f 	and.w	r4, r4, #15
 8008134:	2603      	movs	r6, #3
 8008136:	4d91      	ldr	r5, [pc, #580]	@ (800837c <_dtoa_r+0x584>)
 8008138:	b954      	cbnz	r4, 8008150 <_dtoa_r+0x358>
 800813a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800813e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008142:	f7f8 fb8b 	bl	800085c <__aeabi_ddiv>
 8008146:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800814a:	e028      	b.n	800819e <_dtoa_r+0x3a6>
 800814c:	2602      	movs	r6, #2
 800814e:	e7f2      	b.n	8008136 <_dtoa_r+0x33e>
 8008150:	07e1      	lsls	r1, r4, #31
 8008152:	d508      	bpl.n	8008166 <_dtoa_r+0x36e>
 8008154:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008158:	e9d5 2300 	ldrd	r2, r3, [r5]
 800815c:	f7f8 fa54 	bl	8000608 <__aeabi_dmul>
 8008160:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008164:	3601      	adds	r6, #1
 8008166:	1064      	asrs	r4, r4, #1
 8008168:	3508      	adds	r5, #8
 800816a:	e7e5      	b.n	8008138 <_dtoa_r+0x340>
 800816c:	f000 80af 	beq.w	80082ce <_dtoa_r+0x4d6>
 8008170:	427c      	negs	r4, r7
 8008172:	4b81      	ldr	r3, [pc, #516]	@ (8008378 <_dtoa_r+0x580>)
 8008174:	4d81      	ldr	r5, [pc, #516]	@ (800837c <_dtoa_r+0x584>)
 8008176:	f004 020f 	and.w	r2, r4, #15
 800817a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008186:	f7f8 fa3f 	bl	8000608 <__aeabi_dmul>
 800818a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800818e:	1124      	asrs	r4, r4, #4
 8008190:	2300      	movs	r3, #0
 8008192:	2602      	movs	r6, #2
 8008194:	2c00      	cmp	r4, #0
 8008196:	f040 808f 	bne.w	80082b8 <_dtoa_r+0x4c0>
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1d3      	bne.n	8008146 <_dtoa_r+0x34e>
 800819e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 8094 	beq.w	80082d2 <_dtoa_r+0x4da>
 80081aa:	4b75      	ldr	r3, [pc, #468]	@ (8008380 <_dtoa_r+0x588>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	4620      	mov	r0, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7f8 fc9b 	bl	8000aec <__aeabi_dcmplt>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f000 808b 	beq.w	80082d2 <_dtoa_r+0x4da>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 8087 	beq.w	80082d2 <_dtoa_r+0x4da>
 80081c4:	f1bb 0f00 	cmp.w	fp, #0
 80081c8:	dd34      	ble.n	8008234 <_dtoa_r+0x43c>
 80081ca:	4620      	mov	r0, r4
 80081cc:	4b6d      	ldr	r3, [pc, #436]	@ (8008384 <_dtoa_r+0x58c>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	4629      	mov	r1, r5
 80081d2:	f7f8 fa19 	bl	8000608 <__aeabi_dmul>
 80081d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081da:	f107 38ff 	add.w	r8, r7, #4294967295
 80081de:	3601      	adds	r6, #1
 80081e0:	465c      	mov	r4, fp
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7f8 f9a6 	bl	8000534 <__aeabi_i2d>
 80081e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ec:	f7f8 fa0c 	bl	8000608 <__aeabi_dmul>
 80081f0:	4b65      	ldr	r3, [pc, #404]	@ (8008388 <_dtoa_r+0x590>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	f7f8 f852 	bl	800029c <__adddf3>
 80081f8:	4605      	mov	r5, r0
 80081fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d16a      	bne.n	80082d8 <_dtoa_r+0x4e0>
 8008202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008206:	4b61      	ldr	r3, [pc, #388]	@ (800838c <_dtoa_r+0x594>)
 8008208:	2200      	movs	r2, #0
 800820a:	f7f8 f845 	bl	8000298 <__aeabi_dsub>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008216:	462a      	mov	r2, r5
 8008218:	4633      	mov	r3, r6
 800821a:	f7f8 fc85 	bl	8000b28 <__aeabi_dcmpgt>
 800821e:	2800      	cmp	r0, #0
 8008220:	f040 8298 	bne.w	8008754 <_dtoa_r+0x95c>
 8008224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008228:	462a      	mov	r2, r5
 800822a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800822e:	f7f8 fc5d 	bl	8000aec <__aeabi_dcmplt>
 8008232:	bb38      	cbnz	r0, 8008284 <_dtoa_r+0x48c>
 8008234:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008238:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800823c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800823e:	2b00      	cmp	r3, #0
 8008240:	f2c0 8157 	blt.w	80084f2 <_dtoa_r+0x6fa>
 8008244:	2f0e      	cmp	r7, #14
 8008246:	f300 8154 	bgt.w	80084f2 <_dtoa_r+0x6fa>
 800824a:	4b4b      	ldr	r3, [pc, #300]	@ (8008378 <_dtoa_r+0x580>)
 800824c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008250:	ed93 7b00 	vldr	d7, [r3]
 8008254:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008256:	2b00      	cmp	r3, #0
 8008258:	ed8d 7b00 	vstr	d7, [sp]
 800825c:	f280 80e5 	bge.w	800842a <_dtoa_r+0x632>
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f300 80e1 	bgt.w	800842a <_dtoa_r+0x632>
 8008268:	d10c      	bne.n	8008284 <_dtoa_r+0x48c>
 800826a:	4b48      	ldr	r3, [pc, #288]	@ (800838c <_dtoa_r+0x594>)
 800826c:	2200      	movs	r2, #0
 800826e:	ec51 0b17 	vmov	r0, r1, d7
 8008272:	f7f8 f9c9 	bl	8000608 <__aeabi_dmul>
 8008276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800827a:	f7f8 fc4b 	bl	8000b14 <__aeabi_dcmpge>
 800827e:	2800      	cmp	r0, #0
 8008280:	f000 8266 	beq.w	8008750 <_dtoa_r+0x958>
 8008284:	2400      	movs	r4, #0
 8008286:	4625      	mov	r5, r4
 8008288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800828a:	4656      	mov	r6, sl
 800828c:	ea6f 0803 	mvn.w	r8, r3
 8008290:	2700      	movs	r7, #0
 8008292:	4621      	mov	r1, r4
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fcbf 	bl	8008c18 <_Bfree>
 800829a:	2d00      	cmp	r5, #0
 800829c:	f000 80bd 	beq.w	800841a <_dtoa_r+0x622>
 80082a0:	b12f      	cbz	r7, 80082ae <_dtoa_r+0x4b6>
 80082a2:	42af      	cmp	r7, r5
 80082a4:	d003      	beq.n	80082ae <_dtoa_r+0x4b6>
 80082a6:	4639      	mov	r1, r7
 80082a8:	4648      	mov	r0, r9
 80082aa:	f000 fcb5 	bl	8008c18 <_Bfree>
 80082ae:	4629      	mov	r1, r5
 80082b0:	4648      	mov	r0, r9
 80082b2:	f000 fcb1 	bl	8008c18 <_Bfree>
 80082b6:	e0b0      	b.n	800841a <_dtoa_r+0x622>
 80082b8:	07e2      	lsls	r2, r4, #31
 80082ba:	d505      	bpl.n	80082c8 <_dtoa_r+0x4d0>
 80082bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082c0:	f7f8 f9a2 	bl	8000608 <__aeabi_dmul>
 80082c4:	3601      	adds	r6, #1
 80082c6:	2301      	movs	r3, #1
 80082c8:	1064      	asrs	r4, r4, #1
 80082ca:	3508      	adds	r5, #8
 80082cc:	e762      	b.n	8008194 <_dtoa_r+0x39c>
 80082ce:	2602      	movs	r6, #2
 80082d0:	e765      	b.n	800819e <_dtoa_r+0x3a6>
 80082d2:	9c03      	ldr	r4, [sp, #12]
 80082d4:	46b8      	mov	r8, r7
 80082d6:	e784      	b.n	80081e2 <_dtoa_r+0x3ea>
 80082d8:	4b27      	ldr	r3, [pc, #156]	@ (8008378 <_dtoa_r+0x580>)
 80082da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082e4:	4454      	add	r4, sl
 80082e6:	2900      	cmp	r1, #0
 80082e8:	d054      	beq.n	8008394 <_dtoa_r+0x59c>
 80082ea:	4929      	ldr	r1, [pc, #164]	@ (8008390 <_dtoa_r+0x598>)
 80082ec:	2000      	movs	r0, #0
 80082ee:	f7f8 fab5 	bl	800085c <__aeabi_ddiv>
 80082f2:	4633      	mov	r3, r6
 80082f4:	462a      	mov	r2, r5
 80082f6:	f7f7 ffcf 	bl	8000298 <__aeabi_dsub>
 80082fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80082fe:	4656      	mov	r6, sl
 8008300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008304:	f7f8 fc30 	bl	8000b68 <__aeabi_d2iz>
 8008308:	4605      	mov	r5, r0
 800830a:	f7f8 f913 	bl	8000534 <__aeabi_i2d>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008316:	f7f7 ffbf 	bl	8000298 <__aeabi_dsub>
 800831a:	3530      	adds	r5, #48	@ 0x30
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008324:	f806 5b01 	strb.w	r5, [r6], #1
 8008328:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800832c:	f7f8 fbde 	bl	8000aec <__aeabi_dcmplt>
 8008330:	2800      	cmp	r0, #0
 8008332:	d172      	bne.n	800841a <_dtoa_r+0x622>
 8008334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008338:	4911      	ldr	r1, [pc, #68]	@ (8008380 <_dtoa_r+0x588>)
 800833a:	2000      	movs	r0, #0
 800833c:	f7f7 ffac 	bl	8000298 <__aeabi_dsub>
 8008340:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008344:	f7f8 fbd2 	bl	8000aec <__aeabi_dcmplt>
 8008348:	2800      	cmp	r0, #0
 800834a:	f040 80b4 	bne.w	80084b6 <_dtoa_r+0x6be>
 800834e:	42a6      	cmp	r6, r4
 8008350:	f43f af70 	beq.w	8008234 <_dtoa_r+0x43c>
 8008354:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008358:	4b0a      	ldr	r3, [pc, #40]	@ (8008384 <_dtoa_r+0x58c>)
 800835a:	2200      	movs	r2, #0
 800835c:	f7f8 f954 	bl	8000608 <__aeabi_dmul>
 8008360:	4b08      	ldr	r3, [pc, #32]	@ (8008384 <_dtoa_r+0x58c>)
 8008362:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008366:	2200      	movs	r2, #0
 8008368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008374:	e7c4      	b.n	8008300 <_dtoa_r+0x508>
 8008376:	bf00      	nop
 8008378:	0800b5c8 	.word	0x0800b5c8
 800837c:	0800b5a0 	.word	0x0800b5a0
 8008380:	3ff00000 	.word	0x3ff00000
 8008384:	40240000 	.word	0x40240000
 8008388:	401c0000 	.word	0x401c0000
 800838c:	40140000 	.word	0x40140000
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	f7f8 f936 	bl	8000608 <__aeabi_dmul>
 800839c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80083a2:	4656      	mov	r6, sl
 80083a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a8:	f7f8 fbde 	bl	8000b68 <__aeabi_d2iz>
 80083ac:	4605      	mov	r5, r0
 80083ae:	f7f8 f8c1 	bl	8000534 <__aeabi_i2d>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ba:	f7f7 ff6d 	bl	8000298 <__aeabi_dsub>
 80083be:	3530      	adds	r5, #48	@ 0x30
 80083c0:	f806 5b01 	strb.w	r5, [r6], #1
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	42a6      	cmp	r6, r4
 80083ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	d124      	bne.n	800841e <_dtoa_r+0x626>
 80083d4:	4baf      	ldr	r3, [pc, #700]	@ (8008694 <_dtoa_r+0x89c>)
 80083d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083da:	f7f7 ff5f 	bl	800029c <__adddf3>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e6:	f7f8 fb9f 	bl	8000b28 <__aeabi_dcmpgt>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d163      	bne.n	80084b6 <_dtoa_r+0x6be>
 80083ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083f2:	49a8      	ldr	r1, [pc, #672]	@ (8008694 <_dtoa_r+0x89c>)
 80083f4:	2000      	movs	r0, #0
 80083f6:	f7f7 ff4f 	bl	8000298 <__aeabi_dsub>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008402:	f7f8 fb73 	bl	8000aec <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f af14 	beq.w	8008234 <_dtoa_r+0x43c>
 800840c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800840e:	1e73      	subs	r3, r6, #1
 8008410:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008412:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008416:	2b30      	cmp	r3, #48	@ 0x30
 8008418:	d0f8      	beq.n	800840c <_dtoa_r+0x614>
 800841a:	4647      	mov	r7, r8
 800841c:	e03b      	b.n	8008496 <_dtoa_r+0x69e>
 800841e:	4b9e      	ldr	r3, [pc, #632]	@ (8008698 <_dtoa_r+0x8a0>)
 8008420:	f7f8 f8f2 	bl	8000608 <__aeabi_dmul>
 8008424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008428:	e7bc      	b.n	80083a4 <_dtoa_r+0x5ac>
 800842a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800842e:	4656      	mov	r6, sl
 8008430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f8 fa10 	bl	800085c <__aeabi_ddiv>
 800843c:	f7f8 fb94 	bl	8000b68 <__aeabi_d2iz>
 8008440:	4680      	mov	r8, r0
 8008442:	f7f8 f877 	bl	8000534 <__aeabi_i2d>
 8008446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844a:	f7f8 f8dd 	bl	8000608 <__aeabi_dmul>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4620      	mov	r0, r4
 8008454:	4629      	mov	r1, r5
 8008456:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800845a:	f7f7 ff1d 	bl	8000298 <__aeabi_dsub>
 800845e:	f806 4b01 	strb.w	r4, [r6], #1
 8008462:	9d03      	ldr	r5, [sp, #12]
 8008464:	eba6 040a 	sub.w	r4, r6, sl
 8008468:	42a5      	cmp	r5, r4
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	d133      	bne.n	80084d8 <_dtoa_r+0x6e0>
 8008470:	f7f7 ff14 	bl	800029c <__adddf3>
 8008474:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008478:	4604      	mov	r4, r0
 800847a:	460d      	mov	r5, r1
 800847c:	f7f8 fb54 	bl	8000b28 <__aeabi_dcmpgt>
 8008480:	b9c0      	cbnz	r0, 80084b4 <_dtoa_r+0x6bc>
 8008482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	f7f8 fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800848e:	b110      	cbz	r0, 8008496 <_dtoa_r+0x69e>
 8008490:	f018 0f01 	tst.w	r8, #1
 8008494:	d10e      	bne.n	80084b4 <_dtoa_r+0x6bc>
 8008496:	9902      	ldr	r1, [sp, #8]
 8008498:	4648      	mov	r0, r9
 800849a:	f000 fbbd 	bl	8008c18 <_Bfree>
 800849e:	2300      	movs	r3, #0
 80084a0:	7033      	strb	r3, [r6, #0]
 80084a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80084a4:	3701      	adds	r7, #1
 80084a6:	601f      	str	r7, [r3, #0]
 80084a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 824b 	beq.w	8008946 <_dtoa_r+0xb4e>
 80084b0:	601e      	str	r6, [r3, #0]
 80084b2:	e248      	b.n	8008946 <_dtoa_r+0xb4e>
 80084b4:	46b8      	mov	r8, r7
 80084b6:	4633      	mov	r3, r6
 80084b8:	461e      	mov	r6, r3
 80084ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084be:	2a39      	cmp	r2, #57	@ 0x39
 80084c0:	d106      	bne.n	80084d0 <_dtoa_r+0x6d8>
 80084c2:	459a      	cmp	sl, r3
 80084c4:	d1f8      	bne.n	80084b8 <_dtoa_r+0x6c0>
 80084c6:	2230      	movs	r2, #48	@ 0x30
 80084c8:	f108 0801 	add.w	r8, r8, #1
 80084cc:	f88a 2000 	strb.w	r2, [sl]
 80084d0:	781a      	ldrb	r2, [r3, #0]
 80084d2:	3201      	adds	r2, #1
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e7a0      	b.n	800841a <_dtoa_r+0x622>
 80084d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008698 <_dtoa_r+0x8a0>)
 80084da:	2200      	movs	r2, #0
 80084dc:	f7f8 f894 	bl	8000608 <__aeabi_dmul>
 80084e0:	2200      	movs	r2, #0
 80084e2:	2300      	movs	r3, #0
 80084e4:	4604      	mov	r4, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	f7f8 faf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d09f      	beq.n	8008430 <_dtoa_r+0x638>
 80084f0:	e7d1      	b.n	8008496 <_dtoa_r+0x69e>
 80084f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	f000 80ea 	beq.w	80086ce <_dtoa_r+0x8d6>
 80084fa:	9a07      	ldr	r2, [sp, #28]
 80084fc:	2a01      	cmp	r2, #1
 80084fe:	f300 80cd 	bgt.w	800869c <_dtoa_r+0x8a4>
 8008502:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008504:	2a00      	cmp	r2, #0
 8008506:	f000 80c1 	beq.w	800868c <_dtoa_r+0x894>
 800850a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800850e:	9c08      	ldr	r4, [sp, #32]
 8008510:	9e00      	ldr	r6, [sp, #0]
 8008512:	9a00      	ldr	r2, [sp, #0]
 8008514:	441a      	add	r2, r3
 8008516:	9200      	str	r2, [sp, #0]
 8008518:	9a06      	ldr	r2, [sp, #24]
 800851a:	2101      	movs	r1, #1
 800851c:	441a      	add	r2, r3
 800851e:	4648      	mov	r0, r9
 8008520:	9206      	str	r2, [sp, #24]
 8008522:	f000 fc77 	bl	8008e14 <__i2b>
 8008526:	4605      	mov	r5, r0
 8008528:	b166      	cbz	r6, 8008544 <_dtoa_r+0x74c>
 800852a:	9b06      	ldr	r3, [sp, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	dd09      	ble.n	8008544 <_dtoa_r+0x74c>
 8008530:	42b3      	cmp	r3, r6
 8008532:	9a00      	ldr	r2, [sp, #0]
 8008534:	bfa8      	it	ge
 8008536:	4633      	movge	r3, r6
 8008538:	1ad2      	subs	r2, r2, r3
 800853a:	9200      	str	r2, [sp, #0]
 800853c:	9a06      	ldr	r2, [sp, #24]
 800853e:	1af6      	subs	r6, r6, r3
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	9306      	str	r3, [sp, #24]
 8008544:	9b08      	ldr	r3, [sp, #32]
 8008546:	b30b      	cbz	r3, 800858c <_dtoa_r+0x794>
 8008548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80c6 	beq.w	80086dc <_dtoa_r+0x8e4>
 8008550:	2c00      	cmp	r4, #0
 8008552:	f000 80c0 	beq.w	80086d6 <_dtoa_r+0x8de>
 8008556:	4629      	mov	r1, r5
 8008558:	4622      	mov	r2, r4
 800855a:	4648      	mov	r0, r9
 800855c:	f000 fd12 	bl	8008f84 <__pow5mult>
 8008560:	9a02      	ldr	r2, [sp, #8]
 8008562:	4601      	mov	r1, r0
 8008564:	4605      	mov	r5, r0
 8008566:	4648      	mov	r0, r9
 8008568:	f000 fc6a 	bl	8008e40 <__multiply>
 800856c:	9902      	ldr	r1, [sp, #8]
 800856e:	4680      	mov	r8, r0
 8008570:	4648      	mov	r0, r9
 8008572:	f000 fb51 	bl	8008c18 <_Bfree>
 8008576:	9b08      	ldr	r3, [sp, #32]
 8008578:	1b1b      	subs	r3, r3, r4
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	f000 80b1 	beq.w	80086e2 <_dtoa_r+0x8ea>
 8008580:	9a08      	ldr	r2, [sp, #32]
 8008582:	4641      	mov	r1, r8
 8008584:	4648      	mov	r0, r9
 8008586:	f000 fcfd 	bl	8008f84 <__pow5mult>
 800858a:	9002      	str	r0, [sp, #8]
 800858c:	2101      	movs	r1, #1
 800858e:	4648      	mov	r0, r9
 8008590:	f000 fc40 	bl	8008e14 <__i2b>
 8008594:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008596:	4604      	mov	r4, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 81d8 	beq.w	800894e <_dtoa_r+0xb56>
 800859e:	461a      	mov	r2, r3
 80085a0:	4601      	mov	r1, r0
 80085a2:	4648      	mov	r0, r9
 80085a4:	f000 fcee 	bl	8008f84 <__pow5mult>
 80085a8:	9b07      	ldr	r3, [sp, #28]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	4604      	mov	r4, r0
 80085ae:	f300 809f 	bgt.w	80086f0 <_dtoa_r+0x8f8>
 80085b2:	9b04      	ldr	r3, [sp, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f040 8097 	bne.w	80086e8 <_dtoa_r+0x8f0>
 80085ba:	9b05      	ldr	r3, [sp, #20]
 80085bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 8093 	bne.w	80086ec <_dtoa_r+0x8f4>
 80085c6:	9b05      	ldr	r3, [sp, #20]
 80085c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085cc:	0d1b      	lsrs	r3, r3, #20
 80085ce:	051b      	lsls	r3, r3, #20
 80085d0:	b133      	cbz	r3, 80085e0 <_dtoa_r+0x7e8>
 80085d2:	9b00      	ldr	r3, [sp, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	9b06      	ldr	r3, [sp, #24]
 80085da:	3301      	adds	r3, #1
 80085dc:	9306      	str	r3, [sp, #24]
 80085de:	2301      	movs	r3, #1
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 81b8 	beq.w	800895a <_dtoa_r+0xb62>
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085f0:	6918      	ldr	r0, [r3, #16]
 80085f2:	f000 fbc3 	bl	8008d7c <__hi0bits>
 80085f6:	f1c0 0020 	rsb	r0, r0, #32
 80085fa:	9b06      	ldr	r3, [sp, #24]
 80085fc:	4418      	add	r0, r3
 80085fe:	f010 001f 	ands.w	r0, r0, #31
 8008602:	f000 8082 	beq.w	800870a <_dtoa_r+0x912>
 8008606:	f1c0 0320 	rsb	r3, r0, #32
 800860a:	2b04      	cmp	r3, #4
 800860c:	dd73      	ble.n	80086f6 <_dtoa_r+0x8fe>
 800860e:	9b00      	ldr	r3, [sp, #0]
 8008610:	f1c0 001c 	rsb	r0, r0, #28
 8008614:	4403      	add	r3, r0
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	4403      	add	r3, r0
 800861c:	4406      	add	r6, r0
 800861e:	9306      	str	r3, [sp, #24]
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	dd05      	ble.n	8008632 <_dtoa_r+0x83a>
 8008626:	9902      	ldr	r1, [sp, #8]
 8008628:	461a      	mov	r2, r3
 800862a:	4648      	mov	r0, r9
 800862c:	f000 fd04 	bl	8009038 <__lshift>
 8008630:	9002      	str	r0, [sp, #8]
 8008632:	9b06      	ldr	r3, [sp, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	dd05      	ble.n	8008644 <_dtoa_r+0x84c>
 8008638:	4621      	mov	r1, r4
 800863a:	461a      	mov	r2, r3
 800863c:	4648      	mov	r0, r9
 800863e:	f000 fcfb 	bl	8009038 <__lshift>
 8008642:	4604      	mov	r4, r0
 8008644:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d061      	beq.n	800870e <_dtoa_r+0x916>
 800864a:	9802      	ldr	r0, [sp, #8]
 800864c:	4621      	mov	r1, r4
 800864e:	f000 fd5f 	bl	8009110 <__mcmp>
 8008652:	2800      	cmp	r0, #0
 8008654:	da5b      	bge.n	800870e <_dtoa_r+0x916>
 8008656:	2300      	movs	r3, #0
 8008658:	9902      	ldr	r1, [sp, #8]
 800865a:	220a      	movs	r2, #10
 800865c:	4648      	mov	r0, r9
 800865e:	f000 fafd 	bl	8008c5c <__multadd>
 8008662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008664:	9002      	str	r0, [sp, #8]
 8008666:	f107 38ff 	add.w	r8, r7, #4294967295
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8177 	beq.w	800895e <_dtoa_r+0xb66>
 8008670:	4629      	mov	r1, r5
 8008672:	2300      	movs	r3, #0
 8008674:	220a      	movs	r2, #10
 8008676:	4648      	mov	r0, r9
 8008678:	f000 faf0 	bl	8008c5c <__multadd>
 800867c:	f1bb 0f00 	cmp.w	fp, #0
 8008680:	4605      	mov	r5, r0
 8008682:	dc6f      	bgt.n	8008764 <_dtoa_r+0x96c>
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	2b02      	cmp	r3, #2
 8008688:	dc49      	bgt.n	800871e <_dtoa_r+0x926>
 800868a:	e06b      	b.n	8008764 <_dtoa_r+0x96c>
 800868c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800868e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008692:	e73c      	b.n	800850e <_dtoa_r+0x716>
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	40240000 	.word	0x40240000
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	1e5c      	subs	r4, r3, #1
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	db09      	blt.n	80086ba <_dtoa_r+0x8c2>
 80086a6:	1b1c      	subs	r4, r3, r4
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f6bf af30 	bge.w	8008510 <_dtoa_r+0x718>
 80086b0:	9b00      	ldr	r3, [sp, #0]
 80086b2:	9a03      	ldr	r2, [sp, #12]
 80086b4:	1a9e      	subs	r6, r3, r2
 80086b6:	2300      	movs	r3, #0
 80086b8:	e72b      	b.n	8008512 <_dtoa_r+0x71a>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086be:	9408      	str	r4, [sp, #32]
 80086c0:	1ae3      	subs	r3, r4, r3
 80086c2:	441a      	add	r2, r3
 80086c4:	9e00      	ldr	r6, [sp, #0]
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80086ca:	2400      	movs	r4, #0
 80086cc:	e721      	b.n	8008512 <_dtoa_r+0x71a>
 80086ce:	9c08      	ldr	r4, [sp, #32]
 80086d0:	9e00      	ldr	r6, [sp, #0]
 80086d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80086d4:	e728      	b.n	8008528 <_dtoa_r+0x730>
 80086d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80086da:	e751      	b.n	8008580 <_dtoa_r+0x788>
 80086dc:	9a08      	ldr	r2, [sp, #32]
 80086de:	9902      	ldr	r1, [sp, #8]
 80086e0:	e750      	b.n	8008584 <_dtoa_r+0x78c>
 80086e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80086e6:	e751      	b.n	800858c <_dtoa_r+0x794>
 80086e8:	2300      	movs	r3, #0
 80086ea:	e779      	b.n	80085e0 <_dtoa_r+0x7e8>
 80086ec:	9b04      	ldr	r3, [sp, #16]
 80086ee:	e777      	b.n	80085e0 <_dtoa_r+0x7e8>
 80086f0:	2300      	movs	r3, #0
 80086f2:	9308      	str	r3, [sp, #32]
 80086f4:	e779      	b.n	80085ea <_dtoa_r+0x7f2>
 80086f6:	d093      	beq.n	8008620 <_dtoa_r+0x828>
 80086f8:	9a00      	ldr	r2, [sp, #0]
 80086fa:	331c      	adds	r3, #28
 80086fc:	441a      	add	r2, r3
 80086fe:	9200      	str	r2, [sp, #0]
 8008700:	9a06      	ldr	r2, [sp, #24]
 8008702:	441a      	add	r2, r3
 8008704:	441e      	add	r6, r3
 8008706:	9206      	str	r2, [sp, #24]
 8008708:	e78a      	b.n	8008620 <_dtoa_r+0x828>
 800870a:	4603      	mov	r3, r0
 800870c:	e7f4      	b.n	80086f8 <_dtoa_r+0x900>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	46b8      	mov	r8, r7
 8008714:	dc20      	bgt.n	8008758 <_dtoa_r+0x960>
 8008716:	469b      	mov	fp, r3
 8008718:	9b07      	ldr	r3, [sp, #28]
 800871a:	2b02      	cmp	r3, #2
 800871c:	dd1e      	ble.n	800875c <_dtoa_r+0x964>
 800871e:	f1bb 0f00 	cmp.w	fp, #0
 8008722:	f47f adb1 	bne.w	8008288 <_dtoa_r+0x490>
 8008726:	4621      	mov	r1, r4
 8008728:	465b      	mov	r3, fp
 800872a:	2205      	movs	r2, #5
 800872c:	4648      	mov	r0, r9
 800872e:	f000 fa95 	bl	8008c5c <__multadd>
 8008732:	4601      	mov	r1, r0
 8008734:	4604      	mov	r4, r0
 8008736:	9802      	ldr	r0, [sp, #8]
 8008738:	f000 fcea 	bl	8009110 <__mcmp>
 800873c:	2800      	cmp	r0, #0
 800873e:	f77f ada3 	ble.w	8008288 <_dtoa_r+0x490>
 8008742:	4656      	mov	r6, sl
 8008744:	2331      	movs	r3, #49	@ 0x31
 8008746:	f806 3b01 	strb.w	r3, [r6], #1
 800874a:	f108 0801 	add.w	r8, r8, #1
 800874e:	e59f      	b.n	8008290 <_dtoa_r+0x498>
 8008750:	9c03      	ldr	r4, [sp, #12]
 8008752:	46b8      	mov	r8, r7
 8008754:	4625      	mov	r5, r4
 8008756:	e7f4      	b.n	8008742 <_dtoa_r+0x94a>
 8008758:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800875c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8101 	beq.w	8008966 <_dtoa_r+0xb6e>
 8008764:	2e00      	cmp	r6, #0
 8008766:	dd05      	ble.n	8008774 <_dtoa_r+0x97c>
 8008768:	4629      	mov	r1, r5
 800876a:	4632      	mov	r2, r6
 800876c:	4648      	mov	r0, r9
 800876e:	f000 fc63 	bl	8009038 <__lshift>
 8008772:	4605      	mov	r5, r0
 8008774:	9b08      	ldr	r3, [sp, #32]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d05c      	beq.n	8008834 <_dtoa_r+0xa3c>
 800877a:	6869      	ldr	r1, [r5, #4]
 800877c:	4648      	mov	r0, r9
 800877e:	f000 fa0b 	bl	8008b98 <_Balloc>
 8008782:	4606      	mov	r6, r0
 8008784:	b928      	cbnz	r0, 8008792 <_dtoa_r+0x99a>
 8008786:	4b82      	ldr	r3, [pc, #520]	@ (8008990 <_dtoa_r+0xb98>)
 8008788:	4602      	mov	r2, r0
 800878a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800878e:	f7ff bb4a 	b.w	8007e26 <_dtoa_r+0x2e>
 8008792:	692a      	ldr	r2, [r5, #16]
 8008794:	3202      	adds	r2, #2
 8008796:	0092      	lsls	r2, r2, #2
 8008798:	f105 010c 	add.w	r1, r5, #12
 800879c:	300c      	adds	r0, #12
 800879e:	f002 f8b3 	bl	800a908 <memcpy>
 80087a2:	2201      	movs	r2, #1
 80087a4:	4631      	mov	r1, r6
 80087a6:	4648      	mov	r0, r9
 80087a8:	f000 fc46 	bl	8009038 <__lshift>
 80087ac:	f10a 0301 	add.w	r3, sl, #1
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	eb0a 030b 	add.w	r3, sl, fp
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	462f      	mov	r7, r5
 80087c0:	9306      	str	r3, [sp, #24]
 80087c2:	4605      	mov	r5, r0
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	9802      	ldr	r0, [sp, #8]
 80087c8:	4621      	mov	r1, r4
 80087ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80087ce:	f7ff fa8b 	bl	8007ce8 <quorem>
 80087d2:	4603      	mov	r3, r0
 80087d4:	3330      	adds	r3, #48	@ 0x30
 80087d6:	9003      	str	r0, [sp, #12]
 80087d8:	4639      	mov	r1, r7
 80087da:	9802      	ldr	r0, [sp, #8]
 80087dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087de:	f000 fc97 	bl	8009110 <__mcmp>
 80087e2:	462a      	mov	r2, r5
 80087e4:	9004      	str	r0, [sp, #16]
 80087e6:	4621      	mov	r1, r4
 80087e8:	4648      	mov	r0, r9
 80087ea:	f000 fcad 	bl	8009148 <__mdiff>
 80087ee:	68c2      	ldr	r2, [r0, #12]
 80087f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f2:	4606      	mov	r6, r0
 80087f4:	bb02      	cbnz	r2, 8008838 <_dtoa_r+0xa40>
 80087f6:	4601      	mov	r1, r0
 80087f8:	9802      	ldr	r0, [sp, #8]
 80087fa:	f000 fc89 	bl	8009110 <__mcmp>
 80087fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008800:	4602      	mov	r2, r0
 8008802:	4631      	mov	r1, r6
 8008804:	4648      	mov	r0, r9
 8008806:	920c      	str	r2, [sp, #48]	@ 0x30
 8008808:	9309      	str	r3, [sp, #36]	@ 0x24
 800880a:	f000 fa05 	bl	8008c18 <_Bfree>
 800880e:	9b07      	ldr	r3, [sp, #28]
 8008810:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008812:	9e00      	ldr	r6, [sp, #0]
 8008814:	ea42 0103 	orr.w	r1, r2, r3
 8008818:	9b06      	ldr	r3, [sp, #24]
 800881a:	4319      	orrs	r1, r3
 800881c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881e:	d10d      	bne.n	800883c <_dtoa_r+0xa44>
 8008820:	2b39      	cmp	r3, #57	@ 0x39
 8008822:	d027      	beq.n	8008874 <_dtoa_r+0xa7c>
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	2a00      	cmp	r2, #0
 8008828:	dd01      	ble.n	800882e <_dtoa_r+0xa36>
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	3331      	adds	r3, #49	@ 0x31
 800882e:	f88b 3000 	strb.w	r3, [fp]
 8008832:	e52e      	b.n	8008292 <_dtoa_r+0x49a>
 8008834:	4628      	mov	r0, r5
 8008836:	e7b9      	b.n	80087ac <_dtoa_r+0x9b4>
 8008838:	2201      	movs	r2, #1
 800883a:	e7e2      	b.n	8008802 <_dtoa_r+0xa0a>
 800883c:	9904      	ldr	r1, [sp, #16]
 800883e:	2900      	cmp	r1, #0
 8008840:	db04      	blt.n	800884c <_dtoa_r+0xa54>
 8008842:	9807      	ldr	r0, [sp, #28]
 8008844:	4301      	orrs	r1, r0
 8008846:	9806      	ldr	r0, [sp, #24]
 8008848:	4301      	orrs	r1, r0
 800884a:	d120      	bne.n	800888e <_dtoa_r+0xa96>
 800884c:	2a00      	cmp	r2, #0
 800884e:	ddee      	ble.n	800882e <_dtoa_r+0xa36>
 8008850:	9902      	ldr	r1, [sp, #8]
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	2201      	movs	r2, #1
 8008856:	4648      	mov	r0, r9
 8008858:	f000 fbee 	bl	8009038 <__lshift>
 800885c:	4621      	mov	r1, r4
 800885e:	9002      	str	r0, [sp, #8]
 8008860:	f000 fc56 	bl	8009110 <__mcmp>
 8008864:	2800      	cmp	r0, #0
 8008866:	9b00      	ldr	r3, [sp, #0]
 8008868:	dc02      	bgt.n	8008870 <_dtoa_r+0xa78>
 800886a:	d1e0      	bne.n	800882e <_dtoa_r+0xa36>
 800886c:	07da      	lsls	r2, r3, #31
 800886e:	d5de      	bpl.n	800882e <_dtoa_r+0xa36>
 8008870:	2b39      	cmp	r3, #57	@ 0x39
 8008872:	d1da      	bne.n	800882a <_dtoa_r+0xa32>
 8008874:	2339      	movs	r3, #57	@ 0x39
 8008876:	f88b 3000 	strb.w	r3, [fp]
 800887a:	4633      	mov	r3, r6
 800887c:	461e      	mov	r6, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008884:	2a39      	cmp	r2, #57	@ 0x39
 8008886:	d04e      	beq.n	8008926 <_dtoa_r+0xb2e>
 8008888:	3201      	adds	r2, #1
 800888a:	701a      	strb	r2, [r3, #0]
 800888c:	e501      	b.n	8008292 <_dtoa_r+0x49a>
 800888e:	2a00      	cmp	r2, #0
 8008890:	dd03      	ble.n	800889a <_dtoa_r+0xaa2>
 8008892:	2b39      	cmp	r3, #57	@ 0x39
 8008894:	d0ee      	beq.n	8008874 <_dtoa_r+0xa7c>
 8008896:	3301      	adds	r3, #1
 8008898:	e7c9      	b.n	800882e <_dtoa_r+0xa36>
 800889a:	9a00      	ldr	r2, [sp, #0]
 800889c:	9908      	ldr	r1, [sp, #32]
 800889e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088a2:	428a      	cmp	r2, r1
 80088a4:	d028      	beq.n	80088f8 <_dtoa_r+0xb00>
 80088a6:	9902      	ldr	r1, [sp, #8]
 80088a8:	2300      	movs	r3, #0
 80088aa:	220a      	movs	r2, #10
 80088ac:	4648      	mov	r0, r9
 80088ae:	f000 f9d5 	bl	8008c5c <__multadd>
 80088b2:	42af      	cmp	r7, r5
 80088b4:	9002      	str	r0, [sp, #8]
 80088b6:	f04f 0300 	mov.w	r3, #0
 80088ba:	f04f 020a 	mov.w	r2, #10
 80088be:	4639      	mov	r1, r7
 80088c0:	4648      	mov	r0, r9
 80088c2:	d107      	bne.n	80088d4 <_dtoa_r+0xadc>
 80088c4:	f000 f9ca 	bl	8008c5c <__multadd>
 80088c8:	4607      	mov	r7, r0
 80088ca:	4605      	mov	r5, r0
 80088cc:	9b00      	ldr	r3, [sp, #0]
 80088ce:	3301      	adds	r3, #1
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	e777      	b.n	80087c4 <_dtoa_r+0x9cc>
 80088d4:	f000 f9c2 	bl	8008c5c <__multadd>
 80088d8:	4629      	mov	r1, r5
 80088da:	4607      	mov	r7, r0
 80088dc:	2300      	movs	r3, #0
 80088de:	220a      	movs	r2, #10
 80088e0:	4648      	mov	r0, r9
 80088e2:	f000 f9bb 	bl	8008c5c <__multadd>
 80088e6:	4605      	mov	r5, r0
 80088e8:	e7f0      	b.n	80088cc <_dtoa_r+0xad4>
 80088ea:	f1bb 0f00 	cmp.w	fp, #0
 80088ee:	bfcc      	ite	gt
 80088f0:	465e      	movgt	r6, fp
 80088f2:	2601      	movle	r6, #1
 80088f4:	4456      	add	r6, sl
 80088f6:	2700      	movs	r7, #0
 80088f8:	9902      	ldr	r1, [sp, #8]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	2201      	movs	r2, #1
 80088fe:	4648      	mov	r0, r9
 8008900:	f000 fb9a 	bl	8009038 <__lshift>
 8008904:	4621      	mov	r1, r4
 8008906:	9002      	str	r0, [sp, #8]
 8008908:	f000 fc02 	bl	8009110 <__mcmp>
 800890c:	2800      	cmp	r0, #0
 800890e:	dcb4      	bgt.n	800887a <_dtoa_r+0xa82>
 8008910:	d102      	bne.n	8008918 <_dtoa_r+0xb20>
 8008912:	9b00      	ldr	r3, [sp, #0]
 8008914:	07db      	lsls	r3, r3, #31
 8008916:	d4b0      	bmi.n	800887a <_dtoa_r+0xa82>
 8008918:	4633      	mov	r3, r6
 800891a:	461e      	mov	r6, r3
 800891c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008920:	2a30      	cmp	r2, #48	@ 0x30
 8008922:	d0fa      	beq.n	800891a <_dtoa_r+0xb22>
 8008924:	e4b5      	b.n	8008292 <_dtoa_r+0x49a>
 8008926:	459a      	cmp	sl, r3
 8008928:	d1a8      	bne.n	800887c <_dtoa_r+0xa84>
 800892a:	2331      	movs	r3, #49	@ 0x31
 800892c:	f108 0801 	add.w	r8, r8, #1
 8008930:	f88a 3000 	strb.w	r3, [sl]
 8008934:	e4ad      	b.n	8008292 <_dtoa_r+0x49a>
 8008936:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008938:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008994 <_dtoa_r+0xb9c>
 800893c:	b11b      	cbz	r3, 8008946 <_dtoa_r+0xb4e>
 800893e:	f10a 0308 	add.w	r3, sl, #8
 8008942:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	4650      	mov	r0, sl
 8008948:	b017      	add	sp, #92	@ 0x5c
 800894a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894e:	9b07      	ldr	r3, [sp, #28]
 8008950:	2b01      	cmp	r3, #1
 8008952:	f77f ae2e 	ble.w	80085b2 <_dtoa_r+0x7ba>
 8008956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008958:	9308      	str	r3, [sp, #32]
 800895a:	2001      	movs	r0, #1
 800895c:	e64d      	b.n	80085fa <_dtoa_r+0x802>
 800895e:	f1bb 0f00 	cmp.w	fp, #0
 8008962:	f77f aed9 	ble.w	8008718 <_dtoa_r+0x920>
 8008966:	4656      	mov	r6, sl
 8008968:	9802      	ldr	r0, [sp, #8]
 800896a:	4621      	mov	r1, r4
 800896c:	f7ff f9bc 	bl	8007ce8 <quorem>
 8008970:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008974:	f806 3b01 	strb.w	r3, [r6], #1
 8008978:	eba6 020a 	sub.w	r2, r6, sl
 800897c:	4593      	cmp	fp, r2
 800897e:	ddb4      	ble.n	80088ea <_dtoa_r+0xaf2>
 8008980:	9902      	ldr	r1, [sp, #8]
 8008982:	2300      	movs	r3, #0
 8008984:	220a      	movs	r2, #10
 8008986:	4648      	mov	r0, r9
 8008988:	f000 f968 	bl	8008c5c <__multadd>
 800898c:	9002      	str	r0, [sp, #8]
 800898e:	e7eb      	b.n	8008968 <_dtoa_r+0xb70>
 8008990:	0800b472 	.word	0x0800b472
 8008994:	0800b3f6 	.word	0x0800b3f6

08008998 <_free_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4605      	mov	r5, r0
 800899c:	2900      	cmp	r1, #0
 800899e:	d041      	beq.n	8008a24 <_free_r+0x8c>
 80089a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a4:	1f0c      	subs	r4, r1, #4
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	bfb8      	it	lt
 80089aa:	18e4      	addlt	r4, r4, r3
 80089ac:	f000 f8e8 	bl	8008b80 <__malloc_lock>
 80089b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a28 <_free_r+0x90>)
 80089b2:	6813      	ldr	r3, [r2, #0]
 80089b4:	b933      	cbnz	r3, 80089c4 <_free_r+0x2c>
 80089b6:	6063      	str	r3, [r4, #4]
 80089b8:	6014      	str	r4, [r2, #0]
 80089ba:	4628      	mov	r0, r5
 80089bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c0:	f000 b8e4 	b.w	8008b8c <__malloc_unlock>
 80089c4:	42a3      	cmp	r3, r4
 80089c6:	d908      	bls.n	80089da <_free_r+0x42>
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	1821      	adds	r1, r4, r0
 80089cc:	428b      	cmp	r3, r1
 80089ce:	bf01      	itttt	eq
 80089d0:	6819      	ldreq	r1, [r3, #0]
 80089d2:	685b      	ldreq	r3, [r3, #4]
 80089d4:	1809      	addeq	r1, r1, r0
 80089d6:	6021      	streq	r1, [r4, #0]
 80089d8:	e7ed      	b.n	80089b6 <_free_r+0x1e>
 80089da:	461a      	mov	r2, r3
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	b10b      	cbz	r3, 80089e4 <_free_r+0x4c>
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	d9fa      	bls.n	80089da <_free_r+0x42>
 80089e4:	6811      	ldr	r1, [r2, #0]
 80089e6:	1850      	adds	r0, r2, r1
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d10b      	bne.n	8008a04 <_free_r+0x6c>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	4401      	add	r1, r0
 80089f0:	1850      	adds	r0, r2, r1
 80089f2:	4283      	cmp	r3, r0
 80089f4:	6011      	str	r1, [r2, #0]
 80089f6:	d1e0      	bne.n	80089ba <_free_r+0x22>
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	6053      	str	r3, [r2, #4]
 80089fe:	4408      	add	r0, r1
 8008a00:	6010      	str	r0, [r2, #0]
 8008a02:	e7da      	b.n	80089ba <_free_r+0x22>
 8008a04:	d902      	bls.n	8008a0c <_free_r+0x74>
 8008a06:	230c      	movs	r3, #12
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	e7d6      	b.n	80089ba <_free_r+0x22>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	1821      	adds	r1, r4, r0
 8008a10:	428b      	cmp	r3, r1
 8008a12:	bf04      	itt	eq
 8008a14:	6819      	ldreq	r1, [r3, #0]
 8008a16:	685b      	ldreq	r3, [r3, #4]
 8008a18:	6063      	str	r3, [r4, #4]
 8008a1a:	bf04      	itt	eq
 8008a1c:	1809      	addeq	r1, r1, r0
 8008a1e:	6021      	streq	r1, [r4, #0]
 8008a20:	6054      	str	r4, [r2, #4]
 8008a22:	e7ca      	b.n	80089ba <_free_r+0x22>
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20000488 	.word	0x20000488

08008a2c <malloc>:
 8008a2c:	4b02      	ldr	r3, [pc, #8]	@ (8008a38 <malloc+0xc>)
 8008a2e:	4601      	mov	r1, r0
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	f000 b825 	b.w	8008a80 <_malloc_r>
 8008a36:	bf00      	nop
 8008a38:	20000018 	.word	0x20000018

08008a3c <sbrk_aligned>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a7c <sbrk_aligned+0x40>)
 8008a40:	460c      	mov	r4, r1
 8008a42:	6831      	ldr	r1, [r6, #0]
 8008a44:	4605      	mov	r5, r0
 8008a46:	b911      	cbnz	r1, 8008a4e <sbrk_aligned+0x12>
 8008a48:	f001 ff4e 	bl	800a8e8 <_sbrk_r>
 8008a4c:	6030      	str	r0, [r6, #0]
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	f001 ff49 	bl	800a8e8 <_sbrk_r>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	d103      	bne.n	8008a62 <sbrk_aligned+0x26>
 8008a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a5e:	4620      	mov	r0, r4
 8008a60:	bd70      	pop	{r4, r5, r6, pc}
 8008a62:	1cc4      	adds	r4, r0, #3
 8008a64:	f024 0403 	bic.w	r4, r4, #3
 8008a68:	42a0      	cmp	r0, r4
 8008a6a:	d0f8      	beq.n	8008a5e <sbrk_aligned+0x22>
 8008a6c:	1a21      	subs	r1, r4, r0
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f001 ff3a 	bl	800a8e8 <_sbrk_r>
 8008a74:	3001      	adds	r0, #1
 8008a76:	d1f2      	bne.n	8008a5e <sbrk_aligned+0x22>
 8008a78:	e7ef      	b.n	8008a5a <sbrk_aligned+0x1e>
 8008a7a:	bf00      	nop
 8008a7c:	20000484 	.word	0x20000484

08008a80 <_malloc_r>:
 8008a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a84:	1ccd      	adds	r5, r1, #3
 8008a86:	f025 0503 	bic.w	r5, r5, #3
 8008a8a:	3508      	adds	r5, #8
 8008a8c:	2d0c      	cmp	r5, #12
 8008a8e:	bf38      	it	cc
 8008a90:	250c      	movcc	r5, #12
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	4606      	mov	r6, r0
 8008a96:	db01      	blt.n	8008a9c <_malloc_r+0x1c>
 8008a98:	42a9      	cmp	r1, r5
 8008a9a:	d904      	bls.n	8008aa6 <_malloc_r+0x26>
 8008a9c:	230c      	movs	r3, #12
 8008a9e:	6033      	str	r3, [r6, #0]
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b7c <_malloc_r+0xfc>
 8008aaa:	f000 f869 	bl	8008b80 <__malloc_lock>
 8008aae:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab2:	461c      	mov	r4, r3
 8008ab4:	bb44      	cbnz	r4, 8008b08 <_malloc_r+0x88>
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff ffbf 	bl	8008a3c <sbrk_aligned>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	d158      	bne.n	8008b76 <_malloc_r+0xf6>
 8008ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ac8:	4627      	mov	r7, r4
 8008aca:	2f00      	cmp	r7, #0
 8008acc:	d143      	bne.n	8008b56 <_malloc_r+0xd6>
 8008ace:	2c00      	cmp	r4, #0
 8008ad0:	d04b      	beq.n	8008b6a <_malloc_r+0xea>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	eb04 0903 	add.w	r9, r4, r3
 8008adc:	f001 ff04 	bl	800a8e8 <_sbrk_r>
 8008ae0:	4581      	cmp	r9, r0
 8008ae2:	d142      	bne.n	8008b6a <_malloc_r+0xea>
 8008ae4:	6821      	ldr	r1, [r4, #0]
 8008ae6:	1a6d      	subs	r5, r5, r1
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff ffa6 	bl	8008a3c <sbrk_aligned>
 8008af0:	3001      	adds	r0, #1
 8008af2:	d03a      	beq.n	8008b6a <_malloc_r+0xea>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	442b      	add	r3, r5
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	f8d8 3000 	ldr.w	r3, [r8]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	bb62      	cbnz	r2, 8008b5c <_malloc_r+0xdc>
 8008b02:	f8c8 7000 	str.w	r7, [r8]
 8008b06:	e00f      	b.n	8008b28 <_malloc_r+0xa8>
 8008b08:	6822      	ldr	r2, [r4, #0]
 8008b0a:	1b52      	subs	r2, r2, r5
 8008b0c:	d420      	bmi.n	8008b50 <_malloc_r+0xd0>
 8008b0e:	2a0b      	cmp	r2, #11
 8008b10:	d917      	bls.n	8008b42 <_malloc_r+0xc2>
 8008b12:	1961      	adds	r1, r4, r5
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	6025      	str	r5, [r4, #0]
 8008b18:	bf18      	it	ne
 8008b1a:	6059      	strne	r1, [r3, #4]
 8008b1c:	6863      	ldr	r3, [r4, #4]
 8008b1e:	bf08      	it	eq
 8008b20:	f8c8 1000 	streq.w	r1, [r8]
 8008b24:	5162      	str	r2, [r4, r5]
 8008b26:	604b      	str	r3, [r1, #4]
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f000 f82f 	bl	8008b8c <__malloc_unlock>
 8008b2e:	f104 000b 	add.w	r0, r4, #11
 8008b32:	1d23      	adds	r3, r4, #4
 8008b34:	f020 0007 	bic.w	r0, r0, #7
 8008b38:	1ac2      	subs	r2, r0, r3
 8008b3a:	bf1c      	itt	ne
 8008b3c:	1a1b      	subne	r3, r3, r0
 8008b3e:	50a3      	strne	r3, [r4, r2]
 8008b40:	e7af      	b.n	8008aa2 <_malloc_r+0x22>
 8008b42:	6862      	ldr	r2, [r4, #4]
 8008b44:	42a3      	cmp	r3, r4
 8008b46:	bf0c      	ite	eq
 8008b48:	f8c8 2000 	streq.w	r2, [r8]
 8008b4c:	605a      	strne	r2, [r3, #4]
 8008b4e:	e7eb      	b.n	8008b28 <_malloc_r+0xa8>
 8008b50:	4623      	mov	r3, r4
 8008b52:	6864      	ldr	r4, [r4, #4]
 8008b54:	e7ae      	b.n	8008ab4 <_malloc_r+0x34>
 8008b56:	463c      	mov	r4, r7
 8008b58:	687f      	ldr	r7, [r7, #4]
 8008b5a:	e7b6      	b.n	8008aca <_malloc_r+0x4a>
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d1fb      	bne.n	8008b5c <_malloc_r+0xdc>
 8008b64:	2300      	movs	r3, #0
 8008b66:	6053      	str	r3, [r2, #4]
 8008b68:	e7de      	b.n	8008b28 <_malloc_r+0xa8>
 8008b6a:	230c      	movs	r3, #12
 8008b6c:	6033      	str	r3, [r6, #0]
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f000 f80c 	bl	8008b8c <__malloc_unlock>
 8008b74:	e794      	b.n	8008aa0 <_malloc_r+0x20>
 8008b76:	6005      	str	r5, [r0, #0]
 8008b78:	e7d6      	b.n	8008b28 <_malloc_r+0xa8>
 8008b7a:	bf00      	nop
 8008b7c:	20000488 	.word	0x20000488

08008b80 <__malloc_lock>:
 8008b80:	4801      	ldr	r0, [pc, #4]	@ (8008b88 <__malloc_lock+0x8>)
 8008b82:	f7ff b8a8 	b.w	8007cd6 <__retarget_lock_acquire_recursive>
 8008b86:	bf00      	nop
 8008b88:	20000480 	.word	0x20000480

08008b8c <__malloc_unlock>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	@ (8008b94 <__malloc_unlock+0x8>)
 8008b8e:	f7ff b8a3 	b.w	8007cd8 <__retarget_lock_release_recursive>
 8008b92:	bf00      	nop
 8008b94:	20000480 	.word	0x20000480

08008b98 <_Balloc>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	69c6      	ldr	r6, [r0, #28]
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	b976      	cbnz	r6, 8008bc0 <_Balloc+0x28>
 8008ba2:	2010      	movs	r0, #16
 8008ba4:	f7ff ff42 	bl	8008a2c <malloc>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	61e0      	str	r0, [r4, #28]
 8008bac:	b920      	cbnz	r0, 8008bb8 <_Balloc+0x20>
 8008bae:	4b18      	ldr	r3, [pc, #96]	@ (8008c10 <_Balloc+0x78>)
 8008bb0:	4818      	ldr	r0, [pc, #96]	@ (8008c14 <_Balloc+0x7c>)
 8008bb2:	216b      	movs	r1, #107	@ 0x6b
 8008bb4:	f001 fec0 	bl	800a938 <__assert_func>
 8008bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bbc:	6006      	str	r6, [r0, #0]
 8008bbe:	60c6      	str	r6, [r0, #12]
 8008bc0:	69e6      	ldr	r6, [r4, #28]
 8008bc2:	68f3      	ldr	r3, [r6, #12]
 8008bc4:	b183      	cbz	r3, 8008be8 <_Balloc+0x50>
 8008bc6:	69e3      	ldr	r3, [r4, #28]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bce:	b9b8      	cbnz	r0, 8008c00 <_Balloc+0x68>
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8008bd6:	1d72      	adds	r2, r6, #5
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f001 feca 	bl	800a974 <_calloc_r>
 8008be0:	b160      	cbz	r0, 8008bfc <_Balloc+0x64>
 8008be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008be6:	e00e      	b.n	8008c06 <_Balloc+0x6e>
 8008be8:	2221      	movs	r2, #33	@ 0x21
 8008bea:	2104      	movs	r1, #4
 8008bec:	4620      	mov	r0, r4
 8008bee:	f001 fec1 	bl	800a974 <_calloc_r>
 8008bf2:	69e3      	ldr	r3, [r4, #28]
 8008bf4:	60f0      	str	r0, [r6, #12]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e4      	bne.n	8008bc6 <_Balloc+0x2e>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	6802      	ldr	r2, [r0, #0]
 8008c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c06:	2300      	movs	r3, #0
 8008c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c0c:	e7f7      	b.n	8008bfe <_Balloc+0x66>
 8008c0e:	bf00      	nop
 8008c10:	0800b403 	.word	0x0800b403
 8008c14:	0800b483 	.word	0x0800b483

08008c18 <_Bfree>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	69c6      	ldr	r6, [r0, #28]
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	b976      	cbnz	r6, 8008c40 <_Bfree+0x28>
 8008c22:	2010      	movs	r0, #16
 8008c24:	f7ff ff02 	bl	8008a2c <malloc>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	61e8      	str	r0, [r5, #28]
 8008c2c:	b920      	cbnz	r0, 8008c38 <_Bfree+0x20>
 8008c2e:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <_Bfree+0x3c>)
 8008c30:	4809      	ldr	r0, [pc, #36]	@ (8008c58 <_Bfree+0x40>)
 8008c32:	218f      	movs	r1, #143	@ 0x8f
 8008c34:	f001 fe80 	bl	800a938 <__assert_func>
 8008c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c3c:	6006      	str	r6, [r0, #0]
 8008c3e:	60c6      	str	r6, [r0, #12]
 8008c40:	b13c      	cbz	r4, 8008c52 <_Bfree+0x3a>
 8008c42:	69eb      	ldr	r3, [r5, #28]
 8008c44:	6862      	ldr	r2, [r4, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c4c:	6021      	str	r1, [r4, #0]
 8008c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	0800b403 	.word	0x0800b403
 8008c58:	0800b483 	.word	0x0800b483

08008c5c <__multadd>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	690d      	ldr	r5, [r1, #16]
 8008c62:	4607      	mov	r7, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	461e      	mov	r6, r3
 8008c68:	f101 0c14 	add.w	ip, r1, #20
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c72:	b299      	uxth	r1, r3
 8008c74:	fb02 6101 	mla	r1, r2, r1, r6
 8008c78:	0c1e      	lsrs	r6, r3, #16
 8008c7a:	0c0b      	lsrs	r3, r1, #16
 8008c7c:	fb02 3306 	mla	r3, r2, r6, r3
 8008c80:	b289      	uxth	r1, r1
 8008c82:	3001      	adds	r0, #1
 8008c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c88:	4285      	cmp	r5, r0
 8008c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8008c8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c92:	dcec      	bgt.n	8008c6e <__multadd+0x12>
 8008c94:	b30e      	cbz	r6, 8008cda <__multadd+0x7e>
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dc19      	bgt.n	8008cd0 <__multadd+0x74>
 8008c9c:	6861      	ldr	r1, [r4, #4]
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	3101      	adds	r1, #1
 8008ca2:	f7ff ff79 	bl	8008b98 <_Balloc>
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	b928      	cbnz	r0, 8008cb6 <__multadd+0x5a>
 8008caa:	4602      	mov	r2, r0
 8008cac:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce0 <__multadd+0x84>)
 8008cae:	480d      	ldr	r0, [pc, #52]	@ (8008ce4 <__multadd+0x88>)
 8008cb0:	21ba      	movs	r1, #186	@ 0xba
 8008cb2:	f001 fe41 	bl	800a938 <__assert_func>
 8008cb6:	6922      	ldr	r2, [r4, #16]
 8008cb8:	3202      	adds	r2, #2
 8008cba:	f104 010c 	add.w	r1, r4, #12
 8008cbe:	0092      	lsls	r2, r2, #2
 8008cc0:	300c      	adds	r0, #12
 8008cc2:	f001 fe21 	bl	800a908 <memcpy>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff ffa5 	bl	8008c18 <_Bfree>
 8008cce:	4644      	mov	r4, r8
 8008cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	615e      	str	r6, [r3, #20]
 8008cd8:	6125      	str	r5, [r4, #16]
 8008cda:	4620      	mov	r0, r4
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	0800b472 	.word	0x0800b472
 8008ce4:	0800b483 	.word	0x0800b483

08008ce8 <__s2b>:
 8008ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	4615      	mov	r5, r2
 8008cf0:	461f      	mov	r7, r3
 8008cf2:	2209      	movs	r2, #9
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	2201      	movs	r2, #1
 8008d00:	429a      	cmp	r2, r3
 8008d02:	db09      	blt.n	8008d18 <__s2b+0x30>
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff ff47 	bl	8008b98 <_Balloc>
 8008d0a:	b940      	cbnz	r0, 8008d1e <__s2b+0x36>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <__s2b+0x8c>)
 8008d10:	4819      	ldr	r0, [pc, #100]	@ (8008d78 <__s2b+0x90>)
 8008d12:	21d3      	movs	r1, #211	@ 0xd3
 8008d14:	f001 fe10 	bl	800a938 <__assert_func>
 8008d18:	0052      	lsls	r2, r2, #1
 8008d1a:	3101      	adds	r1, #1
 8008d1c:	e7f0      	b.n	8008d00 <__s2b+0x18>
 8008d1e:	9b08      	ldr	r3, [sp, #32]
 8008d20:	6143      	str	r3, [r0, #20]
 8008d22:	2d09      	cmp	r5, #9
 8008d24:	f04f 0301 	mov.w	r3, #1
 8008d28:	6103      	str	r3, [r0, #16]
 8008d2a:	dd16      	ble.n	8008d5a <__s2b+0x72>
 8008d2c:	f104 0909 	add.w	r9, r4, #9
 8008d30:	46c8      	mov	r8, r9
 8008d32:	442c      	add	r4, r5
 8008d34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d38:	4601      	mov	r1, r0
 8008d3a:	3b30      	subs	r3, #48	@ 0x30
 8008d3c:	220a      	movs	r2, #10
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7ff ff8c 	bl	8008c5c <__multadd>
 8008d44:	45a0      	cmp	r8, r4
 8008d46:	d1f5      	bne.n	8008d34 <__s2b+0x4c>
 8008d48:	f1a5 0408 	sub.w	r4, r5, #8
 8008d4c:	444c      	add	r4, r9
 8008d4e:	1b2d      	subs	r5, r5, r4
 8008d50:	1963      	adds	r3, r4, r5
 8008d52:	42bb      	cmp	r3, r7
 8008d54:	db04      	blt.n	8008d60 <__s2b+0x78>
 8008d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5a:	340a      	adds	r4, #10
 8008d5c:	2509      	movs	r5, #9
 8008d5e:	e7f6      	b.n	8008d4e <__s2b+0x66>
 8008d60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d64:	4601      	mov	r1, r0
 8008d66:	3b30      	subs	r3, #48	@ 0x30
 8008d68:	220a      	movs	r2, #10
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	f7ff ff76 	bl	8008c5c <__multadd>
 8008d70:	e7ee      	b.n	8008d50 <__s2b+0x68>
 8008d72:	bf00      	nop
 8008d74:	0800b472 	.word	0x0800b472
 8008d78:	0800b483 	.word	0x0800b483

08008d7c <__hi0bits>:
 8008d7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d80:	4603      	mov	r3, r0
 8008d82:	bf36      	itet	cc
 8008d84:	0403      	lslcc	r3, r0, #16
 8008d86:	2000      	movcs	r0, #0
 8008d88:	2010      	movcc	r0, #16
 8008d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d8e:	bf3c      	itt	cc
 8008d90:	021b      	lslcc	r3, r3, #8
 8008d92:	3008      	addcc	r0, #8
 8008d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d98:	bf3c      	itt	cc
 8008d9a:	011b      	lslcc	r3, r3, #4
 8008d9c:	3004      	addcc	r0, #4
 8008d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da2:	bf3c      	itt	cc
 8008da4:	009b      	lslcc	r3, r3, #2
 8008da6:	3002      	addcc	r0, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	db05      	blt.n	8008db8 <__hi0bits+0x3c>
 8008dac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008db0:	f100 0001 	add.w	r0, r0, #1
 8008db4:	bf08      	it	eq
 8008db6:	2020      	moveq	r0, #32
 8008db8:	4770      	bx	lr

08008dba <__lo0bits>:
 8008dba:	6803      	ldr	r3, [r0, #0]
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	f013 0007 	ands.w	r0, r3, #7
 8008dc2:	d00b      	beq.n	8008ddc <__lo0bits+0x22>
 8008dc4:	07d9      	lsls	r1, r3, #31
 8008dc6:	d421      	bmi.n	8008e0c <__lo0bits+0x52>
 8008dc8:	0798      	lsls	r0, r3, #30
 8008dca:	bf49      	itett	mi
 8008dcc:	085b      	lsrmi	r3, r3, #1
 8008dce:	089b      	lsrpl	r3, r3, #2
 8008dd0:	2001      	movmi	r0, #1
 8008dd2:	6013      	strmi	r3, [r2, #0]
 8008dd4:	bf5c      	itt	pl
 8008dd6:	6013      	strpl	r3, [r2, #0]
 8008dd8:	2002      	movpl	r0, #2
 8008dda:	4770      	bx	lr
 8008ddc:	b299      	uxth	r1, r3
 8008dde:	b909      	cbnz	r1, 8008de4 <__lo0bits+0x2a>
 8008de0:	0c1b      	lsrs	r3, r3, #16
 8008de2:	2010      	movs	r0, #16
 8008de4:	b2d9      	uxtb	r1, r3
 8008de6:	b909      	cbnz	r1, 8008dec <__lo0bits+0x32>
 8008de8:	3008      	adds	r0, #8
 8008dea:	0a1b      	lsrs	r3, r3, #8
 8008dec:	0719      	lsls	r1, r3, #28
 8008dee:	bf04      	itt	eq
 8008df0:	091b      	lsreq	r3, r3, #4
 8008df2:	3004      	addeq	r0, #4
 8008df4:	0799      	lsls	r1, r3, #30
 8008df6:	bf04      	itt	eq
 8008df8:	089b      	lsreq	r3, r3, #2
 8008dfa:	3002      	addeq	r0, #2
 8008dfc:	07d9      	lsls	r1, r3, #31
 8008dfe:	d403      	bmi.n	8008e08 <__lo0bits+0x4e>
 8008e00:	085b      	lsrs	r3, r3, #1
 8008e02:	f100 0001 	add.w	r0, r0, #1
 8008e06:	d003      	beq.n	8008e10 <__lo0bits+0x56>
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	4770      	bx	lr
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	4770      	bx	lr
 8008e10:	2020      	movs	r0, #32
 8008e12:	4770      	bx	lr

08008e14 <__i2b>:
 8008e14:	b510      	push	{r4, lr}
 8008e16:	460c      	mov	r4, r1
 8008e18:	2101      	movs	r1, #1
 8008e1a:	f7ff febd 	bl	8008b98 <_Balloc>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	b928      	cbnz	r0, 8008e2e <__i2b+0x1a>
 8008e22:	4b05      	ldr	r3, [pc, #20]	@ (8008e38 <__i2b+0x24>)
 8008e24:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <__i2b+0x28>)
 8008e26:	f240 1145 	movw	r1, #325	@ 0x145
 8008e2a:	f001 fd85 	bl	800a938 <__assert_func>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	6144      	str	r4, [r0, #20]
 8008e32:	6103      	str	r3, [r0, #16]
 8008e34:	bd10      	pop	{r4, pc}
 8008e36:	bf00      	nop
 8008e38:	0800b472 	.word	0x0800b472
 8008e3c:	0800b483 	.word	0x0800b483

08008e40 <__multiply>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	4617      	mov	r7, r2
 8008e46:	690a      	ldr	r2, [r1, #16]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	bfa8      	it	ge
 8008e4e:	463b      	movge	r3, r7
 8008e50:	4689      	mov	r9, r1
 8008e52:	bfa4      	itt	ge
 8008e54:	460f      	movge	r7, r1
 8008e56:	4699      	movge	r9, r3
 8008e58:	693d      	ldr	r5, [r7, #16]
 8008e5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	eb05 060a 	add.w	r6, r5, sl
 8008e66:	42b3      	cmp	r3, r6
 8008e68:	b085      	sub	sp, #20
 8008e6a:	bfb8      	it	lt
 8008e6c:	3101      	addlt	r1, #1
 8008e6e:	f7ff fe93 	bl	8008b98 <_Balloc>
 8008e72:	b930      	cbnz	r0, 8008e82 <__multiply+0x42>
 8008e74:	4602      	mov	r2, r0
 8008e76:	4b41      	ldr	r3, [pc, #260]	@ (8008f7c <__multiply+0x13c>)
 8008e78:	4841      	ldr	r0, [pc, #260]	@ (8008f80 <__multiply+0x140>)
 8008e7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e7e:	f001 fd5b 	bl	800a938 <__assert_func>
 8008e82:	f100 0414 	add.w	r4, r0, #20
 8008e86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e8a:	4623      	mov	r3, r4
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4573      	cmp	r3, lr
 8008e90:	d320      	bcc.n	8008ed4 <__multiply+0x94>
 8008e92:	f107 0814 	add.w	r8, r7, #20
 8008e96:	f109 0114 	add.w	r1, r9, #20
 8008e9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ea2:	9302      	str	r3, [sp, #8]
 8008ea4:	1beb      	subs	r3, r5, r7
 8008ea6:	3b15      	subs	r3, #21
 8008ea8:	f023 0303 	bic.w	r3, r3, #3
 8008eac:	3304      	adds	r3, #4
 8008eae:	3715      	adds	r7, #21
 8008eb0:	42bd      	cmp	r5, r7
 8008eb2:	bf38      	it	cc
 8008eb4:	2304      	movcc	r3, #4
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	9b02      	ldr	r3, [sp, #8]
 8008eba:	9103      	str	r1, [sp, #12]
 8008ebc:	428b      	cmp	r3, r1
 8008ebe:	d80c      	bhi.n	8008eda <__multiply+0x9a>
 8008ec0:	2e00      	cmp	r6, #0
 8008ec2:	dd03      	ble.n	8008ecc <__multiply+0x8c>
 8008ec4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d055      	beq.n	8008f78 <__multiply+0x138>
 8008ecc:	6106      	str	r6, [r0, #16]
 8008ece:	b005      	add	sp, #20
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	f843 2b04 	str.w	r2, [r3], #4
 8008ed8:	e7d9      	b.n	8008e8e <__multiply+0x4e>
 8008eda:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ede:	f1ba 0f00 	cmp.w	sl, #0
 8008ee2:	d01f      	beq.n	8008f24 <__multiply+0xe4>
 8008ee4:	46c4      	mov	ip, r8
 8008ee6:	46a1      	mov	r9, r4
 8008ee8:	2700      	movs	r7, #0
 8008eea:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008eee:	f8d9 3000 	ldr.w	r3, [r9]
 8008ef2:	fa1f fb82 	uxth.w	fp, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008efc:	443b      	add	r3, r7
 8008efe:	f8d9 7000 	ldr.w	r7, [r9]
 8008f02:	0c12      	lsrs	r2, r2, #16
 8008f04:	0c3f      	lsrs	r7, r7, #16
 8008f06:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f14:	4565      	cmp	r5, ip
 8008f16:	f849 3b04 	str.w	r3, [r9], #4
 8008f1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f1e:	d8e4      	bhi.n	8008eea <__multiply+0xaa>
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	50e7      	str	r7, [r4, r3]
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f2a:	3104      	adds	r1, #4
 8008f2c:	f1b9 0f00 	cmp.w	r9, #0
 8008f30:	d020      	beq.n	8008f74 <__multiply+0x134>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	4647      	mov	r7, r8
 8008f36:	46a4      	mov	ip, r4
 8008f38:	f04f 0a00 	mov.w	sl, #0
 8008f3c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f44:	fb09 220b 	mla	r2, r9, fp, r2
 8008f48:	4452      	add	r2, sl
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f50:	f84c 3b04 	str.w	r3, [ip], #4
 8008f54:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f5c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f60:	fb09 330a 	mla	r3, r9, sl, r3
 8008f64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f68:	42bd      	cmp	r5, r7
 8008f6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f6e:	d8e5      	bhi.n	8008f3c <__multiply+0xfc>
 8008f70:	9a01      	ldr	r2, [sp, #4]
 8008f72:	50a3      	str	r3, [r4, r2]
 8008f74:	3404      	adds	r4, #4
 8008f76:	e79f      	b.n	8008eb8 <__multiply+0x78>
 8008f78:	3e01      	subs	r6, #1
 8008f7a:	e7a1      	b.n	8008ec0 <__multiply+0x80>
 8008f7c:	0800b472 	.word	0x0800b472
 8008f80:	0800b483 	.word	0x0800b483

08008f84 <__pow5mult>:
 8008f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f88:	4615      	mov	r5, r2
 8008f8a:	f012 0203 	ands.w	r2, r2, #3
 8008f8e:	4607      	mov	r7, r0
 8008f90:	460e      	mov	r6, r1
 8008f92:	d007      	beq.n	8008fa4 <__pow5mult+0x20>
 8008f94:	4c25      	ldr	r4, [pc, #148]	@ (800902c <__pow5mult+0xa8>)
 8008f96:	3a01      	subs	r2, #1
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f9e:	f7ff fe5d 	bl	8008c5c <__multadd>
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	10ad      	asrs	r5, r5, #2
 8008fa6:	d03d      	beq.n	8009024 <__pow5mult+0xa0>
 8008fa8:	69fc      	ldr	r4, [r7, #28]
 8008faa:	b97c      	cbnz	r4, 8008fcc <__pow5mult+0x48>
 8008fac:	2010      	movs	r0, #16
 8008fae:	f7ff fd3d 	bl	8008a2c <malloc>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	61f8      	str	r0, [r7, #28]
 8008fb6:	b928      	cbnz	r0, 8008fc4 <__pow5mult+0x40>
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8009030 <__pow5mult+0xac>)
 8008fba:	481e      	ldr	r0, [pc, #120]	@ (8009034 <__pow5mult+0xb0>)
 8008fbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fc0:	f001 fcba 	bl	800a938 <__assert_func>
 8008fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc8:	6004      	str	r4, [r0, #0]
 8008fca:	60c4      	str	r4, [r0, #12]
 8008fcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fd4:	b94c      	cbnz	r4, 8008fea <__pow5mult+0x66>
 8008fd6:	f240 2171 	movw	r1, #625	@ 0x271
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f7ff ff1a 	bl	8008e14 <__i2b>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	f04f 0900 	mov.w	r9, #0
 8008fee:	07eb      	lsls	r3, r5, #31
 8008ff0:	d50a      	bpl.n	8009008 <__pow5mult+0x84>
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f7ff ff22 	bl	8008e40 <__multiply>
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4680      	mov	r8, r0
 8009000:	4638      	mov	r0, r7
 8009002:	f7ff fe09 	bl	8008c18 <_Bfree>
 8009006:	4646      	mov	r6, r8
 8009008:	106d      	asrs	r5, r5, #1
 800900a:	d00b      	beq.n	8009024 <__pow5mult+0xa0>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	b938      	cbnz	r0, 8009020 <__pow5mult+0x9c>
 8009010:	4622      	mov	r2, r4
 8009012:	4621      	mov	r1, r4
 8009014:	4638      	mov	r0, r7
 8009016:	f7ff ff13 	bl	8008e40 <__multiply>
 800901a:	6020      	str	r0, [r4, #0]
 800901c:	f8c0 9000 	str.w	r9, [r0]
 8009020:	4604      	mov	r4, r0
 8009022:	e7e4      	b.n	8008fee <__pow5mult+0x6a>
 8009024:	4630      	mov	r0, r6
 8009026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902a:	bf00      	nop
 800902c:	0800b594 	.word	0x0800b594
 8009030:	0800b403 	.word	0x0800b403
 8009034:	0800b483 	.word	0x0800b483

08009038 <__lshift>:
 8009038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	460c      	mov	r4, r1
 800903e:	6849      	ldr	r1, [r1, #4]
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	4607      	mov	r7, r0
 800904a:	4691      	mov	r9, r2
 800904c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009050:	f108 0601 	add.w	r6, r8, #1
 8009054:	42b3      	cmp	r3, r6
 8009056:	db0b      	blt.n	8009070 <__lshift+0x38>
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff fd9d 	bl	8008b98 <_Balloc>
 800905e:	4605      	mov	r5, r0
 8009060:	b948      	cbnz	r0, 8009076 <__lshift+0x3e>
 8009062:	4602      	mov	r2, r0
 8009064:	4b28      	ldr	r3, [pc, #160]	@ (8009108 <__lshift+0xd0>)
 8009066:	4829      	ldr	r0, [pc, #164]	@ (800910c <__lshift+0xd4>)
 8009068:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800906c:	f001 fc64 	bl	800a938 <__assert_func>
 8009070:	3101      	adds	r1, #1
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	e7ee      	b.n	8009054 <__lshift+0x1c>
 8009076:	2300      	movs	r3, #0
 8009078:	f100 0114 	add.w	r1, r0, #20
 800907c:	f100 0210 	add.w	r2, r0, #16
 8009080:	4618      	mov	r0, r3
 8009082:	4553      	cmp	r3, sl
 8009084:	db33      	blt.n	80090ee <__lshift+0xb6>
 8009086:	6920      	ldr	r0, [r4, #16]
 8009088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800908c:	f104 0314 	add.w	r3, r4, #20
 8009090:	f019 091f 	ands.w	r9, r9, #31
 8009094:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009098:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800909c:	d02b      	beq.n	80090f6 <__lshift+0xbe>
 800909e:	f1c9 0e20 	rsb	lr, r9, #32
 80090a2:	468a      	mov	sl, r1
 80090a4:	2200      	movs	r2, #0
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	fa00 f009 	lsl.w	r0, r0, r9
 80090ac:	4310      	orrs	r0, r2
 80090ae:	f84a 0b04 	str.w	r0, [sl], #4
 80090b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b6:	459c      	cmp	ip, r3
 80090b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090bc:	d8f3      	bhi.n	80090a6 <__lshift+0x6e>
 80090be:	ebac 0304 	sub.w	r3, ip, r4
 80090c2:	3b15      	subs	r3, #21
 80090c4:	f023 0303 	bic.w	r3, r3, #3
 80090c8:	3304      	adds	r3, #4
 80090ca:	f104 0015 	add.w	r0, r4, #21
 80090ce:	4560      	cmp	r0, ip
 80090d0:	bf88      	it	hi
 80090d2:	2304      	movhi	r3, #4
 80090d4:	50ca      	str	r2, [r1, r3]
 80090d6:	b10a      	cbz	r2, 80090dc <__lshift+0xa4>
 80090d8:	f108 0602 	add.w	r6, r8, #2
 80090dc:	3e01      	subs	r6, #1
 80090de:	4638      	mov	r0, r7
 80090e0:	612e      	str	r6, [r5, #16]
 80090e2:	4621      	mov	r1, r4
 80090e4:	f7ff fd98 	bl	8008c18 <_Bfree>
 80090e8:	4628      	mov	r0, r5
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80090f2:	3301      	adds	r3, #1
 80090f4:	e7c5      	b.n	8009082 <__lshift+0x4a>
 80090f6:	3904      	subs	r1, #4
 80090f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009100:	459c      	cmp	ip, r3
 8009102:	d8f9      	bhi.n	80090f8 <__lshift+0xc0>
 8009104:	e7ea      	b.n	80090dc <__lshift+0xa4>
 8009106:	bf00      	nop
 8009108:	0800b472 	.word	0x0800b472
 800910c:	0800b483 	.word	0x0800b483

08009110 <__mcmp>:
 8009110:	690a      	ldr	r2, [r1, #16]
 8009112:	4603      	mov	r3, r0
 8009114:	6900      	ldr	r0, [r0, #16]
 8009116:	1a80      	subs	r0, r0, r2
 8009118:	b530      	push	{r4, r5, lr}
 800911a:	d10e      	bne.n	800913a <__mcmp+0x2a>
 800911c:	3314      	adds	r3, #20
 800911e:	3114      	adds	r1, #20
 8009120:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009124:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009128:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800912c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009130:	4295      	cmp	r5, r2
 8009132:	d003      	beq.n	800913c <__mcmp+0x2c>
 8009134:	d205      	bcs.n	8009142 <__mcmp+0x32>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	bd30      	pop	{r4, r5, pc}
 800913c:	42a3      	cmp	r3, r4
 800913e:	d3f3      	bcc.n	8009128 <__mcmp+0x18>
 8009140:	e7fb      	b.n	800913a <__mcmp+0x2a>
 8009142:	2001      	movs	r0, #1
 8009144:	e7f9      	b.n	800913a <__mcmp+0x2a>
	...

08009148 <__mdiff>:
 8009148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	4689      	mov	r9, r1
 800914e:	4606      	mov	r6, r0
 8009150:	4611      	mov	r1, r2
 8009152:	4648      	mov	r0, r9
 8009154:	4614      	mov	r4, r2
 8009156:	f7ff ffdb 	bl	8009110 <__mcmp>
 800915a:	1e05      	subs	r5, r0, #0
 800915c:	d112      	bne.n	8009184 <__mdiff+0x3c>
 800915e:	4629      	mov	r1, r5
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff fd19 	bl	8008b98 <_Balloc>
 8009166:	4602      	mov	r2, r0
 8009168:	b928      	cbnz	r0, 8009176 <__mdiff+0x2e>
 800916a:	4b3f      	ldr	r3, [pc, #252]	@ (8009268 <__mdiff+0x120>)
 800916c:	f240 2137 	movw	r1, #567	@ 0x237
 8009170:	483e      	ldr	r0, [pc, #248]	@ (800926c <__mdiff+0x124>)
 8009172:	f001 fbe1 	bl	800a938 <__assert_func>
 8009176:	2301      	movs	r3, #1
 8009178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800917c:	4610      	mov	r0, r2
 800917e:	b003      	add	sp, #12
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	bfbc      	itt	lt
 8009186:	464b      	movlt	r3, r9
 8009188:	46a1      	movlt	r9, r4
 800918a:	4630      	mov	r0, r6
 800918c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009190:	bfba      	itte	lt
 8009192:	461c      	movlt	r4, r3
 8009194:	2501      	movlt	r5, #1
 8009196:	2500      	movge	r5, #0
 8009198:	f7ff fcfe 	bl	8008b98 <_Balloc>
 800919c:	4602      	mov	r2, r0
 800919e:	b918      	cbnz	r0, 80091a8 <__mdiff+0x60>
 80091a0:	4b31      	ldr	r3, [pc, #196]	@ (8009268 <__mdiff+0x120>)
 80091a2:	f240 2145 	movw	r1, #581	@ 0x245
 80091a6:	e7e3      	b.n	8009170 <__mdiff+0x28>
 80091a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091ac:	6926      	ldr	r6, [r4, #16]
 80091ae:	60c5      	str	r5, [r0, #12]
 80091b0:	f109 0310 	add.w	r3, r9, #16
 80091b4:	f109 0514 	add.w	r5, r9, #20
 80091b8:	f104 0e14 	add.w	lr, r4, #20
 80091bc:	f100 0b14 	add.w	fp, r0, #20
 80091c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	46d9      	mov	r9, fp
 80091cc:	f04f 0c00 	mov.w	ip, #0
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	fa1f f38a 	uxth.w	r3, sl
 80091e0:	4619      	mov	r1, r3
 80091e2:	b283      	uxth	r3, r0
 80091e4:	1acb      	subs	r3, r1, r3
 80091e6:	0c00      	lsrs	r0, r0, #16
 80091e8:	4463      	add	r3, ip
 80091ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091f8:	4576      	cmp	r6, lr
 80091fa:	f849 3b04 	str.w	r3, [r9], #4
 80091fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009202:	d8e5      	bhi.n	80091d0 <__mdiff+0x88>
 8009204:	1b33      	subs	r3, r6, r4
 8009206:	3b15      	subs	r3, #21
 8009208:	f023 0303 	bic.w	r3, r3, #3
 800920c:	3415      	adds	r4, #21
 800920e:	3304      	adds	r3, #4
 8009210:	42a6      	cmp	r6, r4
 8009212:	bf38      	it	cc
 8009214:	2304      	movcc	r3, #4
 8009216:	441d      	add	r5, r3
 8009218:	445b      	add	r3, fp
 800921a:	461e      	mov	r6, r3
 800921c:	462c      	mov	r4, r5
 800921e:	4544      	cmp	r4, r8
 8009220:	d30e      	bcc.n	8009240 <__mdiff+0xf8>
 8009222:	f108 0103 	add.w	r1, r8, #3
 8009226:	1b49      	subs	r1, r1, r5
 8009228:	f021 0103 	bic.w	r1, r1, #3
 800922c:	3d03      	subs	r5, #3
 800922e:	45a8      	cmp	r8, r5
 8009230:	bf38      	it	cc
 8009232:	2100      	movcc	r1, #0
 8009234:	440b      	add	r3, r1
 8009236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800923a:	b191      	cbz	r1, 8009262 <__mdiff+0x11a>
 800923c:	6117      	str	r7, [r2, #16]
 800923e:	e79d      	b.n	800917c <__mdiff+0x34>
 8009240:	f854 1b04 	ldr.w	r1, [r4], #4
 8009244:	46e6      	mov	lr, ip
 8009246:	0c08      	lsrs	r0, r1, #16
 8009248:	fa1c fc81 	uxtah	ip, ip, r1
 800924c:	4471      	add	r1, lr
 800924e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009252:	b289      	uxth	r1, r1
 8009254:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009258:	f846 1b04 	str.w	r1, [r6], #4
 800925c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009260:	e7dd      	b.n	800921e <__mdiff+0xd6>
 8009262:	3f01      	subs	r7, #1
 8009264:	e7e7      	b.n	8009236 <__mdiff+0xee>
 8009266:	bf00      	nop
 8009268:	0800b472 	.word	0x0800b472
 800926c:	0800b483 	.word	0x0800b483

08009270 <__ulp>:
 8009270:	b082      	sub	sp, #8
 8009272:	ed8d 0b00 	vstr	d0, [sp]
 8009276:	9a01      	ldr	r2, [sp, #4]
 8009278:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <__ulp+0x48>)
 800927a:	4013      	ands	r3, r2
 800927c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc08      	bgt.n	8009296 <__ulp+0x26>
 8009284:	425b      	negs	r3, r3
 8009286:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800928a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800928e:	da04      	bge.n	800929a <__ulp+0x2a>
 8009290:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009294:	4113      	asrs	r3, r2
 8009296:	2200      	movs	r2, #0
 8009298:	e008      	b.n	80092ac <__ulp+0x3c>
 800929a:	f1a2 0314 	sub.w	r3, r2, #20
 800929e:	2b1e      	cmp	r3, #30
 80092a0:	bfda      	itte	le
 80092a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092a6:	40da      	lsrle	r2, r3
 80092a8:	2201      	movgt	r2, #1
 80092aa:	2300      	movs	r3, #0
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	ec41 0b10 	vmov	d0, r0, r1
 80092b4:	b002      	add	sp, #8
 80092b6:	4770      	bx	lr
 80092b8:	7ff00000 	.word	0x7ff00000

080092bc <__b2d>:
 80092bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c0:	6906      	ldr	r6, [r0, #16]
 80092c2:	f100 0814 	add.w	r8, r0, #20
 80092c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092ca:	1f37      	subs	r7, r6, #4
 80092cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092d0:	4610      	mov	r0, r2
 80092d2:	f7ff fd53 	bl	8008d7c <__hi0bits>
 80092d6:	f1c0 0320 	rsb	r3, r0, #32
 80092da:	280a      	cmp	r0, #10
 80092dc:	600b      	str	r3, [r1, #0]
 80092de:	491b      	ldr	r1, [pc, #108]	@ (800934c <__b2d+0x90>)
 80092e0:	dc15      	bgt.n	800930e <__b2d+0x52>
 80092e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80092e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80092ea:	45b8      	cmp	r8, r7
 80092ec:	ea43 0501 	orr.w	r5, r3, r1
 80092f0:	bf34      	ite	cc
 80092f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092f6:	2300      	movcs	r3, #0
 80092f8:	3015      	adds	r0, #21
 80092fa:	fa02 f000 	lsl.w	r0, r2, r0
 80092fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8009302:	4303      	orrs	r3, r0
 8009304:	461c      	mov	r4, r3
 8009306:	ec45 4b10 	vmov	d0, r4, r5
 800930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930e:	45b8      	cmp	r8, r7
 8009310:	bf3a      	itte	cc
 8009312:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009316:	f1a6 0708 	subcc.w	r7, r6, #8
 800931a:	2300      	movcs	r3, #0
 800931c:	380b      	subs	r0, #11
 800931e:	d012      	beq.n	8009346 <__b2d+0x8a>
 8009320:	f1c0 0120 	rsb	r1, r0, #32
 8009324:	fa23 f401 	lsr.w	r4, r3, r1
 8009328:	4082      	lsls	r2, r0
 800932a:	4322      	orrs	r2, r4
 800932c:	4547      	cmp	r7, r8
 800932e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009332:	bf8c      	ite	hi
 8009334:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009338:	2200      	movls	r2, #0
 800933a:	4083      	lsls	r3, r0
 800933c:	40ca      	lsrs	r2, r1
 800933e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009342:	4313      	orrs	r3, r2
 8009344:	e7de      	b.n	8009304 <__b2d+0x48>
 8009346:	ea42 0501 	orr.w	r5, r2, r1
 800934a:	e7db      	b.n	8009304 <__b2d+0x48>
 800934c:	3ff00000 	.word	0x3ff00000

08009350 <__d2b>:
 8009350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009354:	460f      	mov	r7, r1
 8009356:	2101      	movs	r1, #1
 8009358:	ec59 8b10 	vmov	r8, r9, d0
 800935c:	4616      	mov	r6, r2
 800935e:	f7ff fc1b 	bl	8008b98 <_Balloc>
 8009362:	4604      	mov	r4, r0
 8009364:	b930      	cbnz	r0, 8009374 <__d2b+0x24>
 8009366:	4602      	mov	r2, r0
 8009368:	4b23      	ldr	r3, [pc, #140]	@ (80093f8 <__d2b+0xa8>)
 800936a:	4824      	ldr	r0, [pc, #144]	@ (80093fc <__d2b+0xac>)
 800936c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009370:	f001 fae2 	bl	800a938 <__assert_func>
 8009374:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800937c:	b10d      	cbz	r5, 8009382 <__d2b+0x32>
 800937e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	f1b8 0300 	subs.w	r3, r8, #0
 8009388:	d023      	beq.n	80093d2 <__d2b+0x82>
 800938a:	4668      	mov	r0, sp
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	f7ff fd14 	bl	8008dba <__lo0bits>
 8009392:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009396:	b1d0      	cbz	r0, 80093ce <__d2b+0x7e>
 8009398:	f1c0 0320 	rsb	r3, r0, #32
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	430b      	orrs	r3, r1
 80093a2:	40c2      	lsrs	r2, r0
 80093a4:	6163      	str	r3, [r4, #20]
 80093a6:	9201      	str	r2, [sp, #4]
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	61a3      	str	r3, [r4, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bf0c      	ite	eq
 80093b0:	2201      	moveq	r2, #1
 80093b2:	2202      	movne	r2, #2
 80093b4:	6122      	str	r2, [r4, #16]
 80093b6:	b1a5      	cbz	r5, 80093e2 <__d2b+0x92>
 80093b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093bc:	4405      	add	r5, r0
 80093be:	603d      	str	r5, [r7, #0]
 80093c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093c4:	6030      	str	r0, [r6, #0]
 80093c6:	4620      	mov	r0, r4
 80093c8:	b003      	add	sp, #12
 80093ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093ce:	6161      	str	r1, [r4, #20]
 80093d0:	e7ea      	b.n	80093a8 <__d2b+0x58>
 80093d2:	a801      	add	r0, sp, #4
 80093d4:	f7ff fcf1 	bl	8008dba <__lo0bits>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	6163      	str	r3, [r4, #20]
 80093dc:	3020      	adds	r0, #32
 80093de:	2201      	movs	r2, #1
 80093e0:	e7e8      	b.n	80093b4 <__d2b+0x64>
 80093e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093ea:	6038      	str	r0, [r7, #0]
 80093ec:	6918      	ldr	r0, [r3, #16]
 80093ee:	f7ff fcc5 	bl	8008d7c <__hi0bits>
 80093f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093f6:	e7e5      	b.n	80093c4 <__d2b+0x74>
 80093f8:	0800b472 	.word	0x0800b472
 80093fc:	0800b483 	.word	0x0800b483

08009400 <__ratio>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	b085      	sub	sp, #20
 8009406:	e9cd 1000 	strd	r1, r0, [sp]
 800940a:	a902      	add	r1, sp, #8
 800940c:	f7ff ff56 	bl	80092bc <__b2d>
 8009410:	9800      	ldr	r0, [sp, #0]
 8009412:	a903      	add	r1, sp, #12
 8009414:	ec55 4b10 	vmov	r4, r5, d0
 8009418:	f7ff ff50 	bl	80092bc <__b2d>
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	6919      	ldr	r1, [r3, #16]
 8009420:	9b00      	ldr	r3, [sp, #0]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	1ac9      	subs	r1, r1, r3
 8009426:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	ec5b ab10 	vmov	sl, fp, d0
 8009430:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009434:	2b00      	cmp	r3, #0
 8009436:	bfce      	itee	gt
 8009438:	462a      	movgt	r2, r5
 800943a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800943e:	465a      	movle	r2, fp
 8009440:	462f      	mov	r7, r5
 8009442:	46d9      	mov	r9, fp
 8009444:	bfcc      	ite	gt
 8009446:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800944a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800944e:	464b      	mov	r3, r9
 8009450:	4652      	mov	r2, sl
 8009452:	4620      	mov	r0, r4
 8009454:	4639      	mov	r1, r7
 8009456:	f7f7 fa01 	bl	800085c <__aeabi_ddiv>
 800945a:	ec41 0b10 	vmov	d0, r0, r1
 800945e:	b005      	add	sp, #20
 8009460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009464 <__copybits>:
 8009464:	3901      	subs	r1, #1
 8009466:	b570      	push	{r4, r5, r6, lr}
 8009468:	1149      	asrs	r1, r1, #5
 800946a:	6914      	ldr	r4, [r2, #16]
 800946c:	3101      	adds	r1, #1
 800946e:	f102 0314 	add.w	r3, r2, #20
 8009472:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009476:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800947a:	1f05      	subs	r5, r0, #4
 800947c:	42a3      	cmp	r3, r4
 800947e:	d30c      	bcc.n	800949a <__copybits+0x36>
 8009480:	1aa3      	subs	r3, r4, r2
 8009482:	3b11      	subs	r3, #17
 8009484:	f023 0303 	bic.w	r3, r3, #3
 8009488:	3211      	adds	r2, #17
 800948a:	42a2      	cmp	r2, r4
 800948c:	bf88      	it	hi
 800948e:	2300      	movhi	r3, #0
 8009490:	4418      	add	r0, r3
 8009492:	2300      	movs	r3, #0
 8009494:	4288      	cmp	r0, r1
 8009496:	d305      	bcc.n	80094a4 <__copybits+0x40>
 8009498:	bd70      	pop	{r4, r5, r6, pc}
 800949a:	f853 6b04 	ldr.w	r6, [r3], #4
 800949e:	f845 6f04 	str.w	r6, [r5, #4]!
 80094a2:	e7eb      	b.n	800947c <__copybits+0x18>
 80094a4:	f840 3b04 	str.w	r3, [r0], #4
 80094a8:	e7f4      	b.n	8009494 <__copybits+0x30>

080094aa <__any_on>:
 80094aa:	f100 0214 	add.w	r2, r0, #20
 80094ae:	6900      	ldr	r0, [r0, #16]
 80094b0:	114b      	asrs	r3, r1, #5
 80094b2:	4298      	cmp	r0, r3
 80094b4:	b510      	push	{r4, lr}
 80094b6:	db11      	blt.n	80094dc <__any_on+0x32>
 80094b8:	dd0a      	ble.n	80094d0 <__any_on+0x26>
 80094ba:	f011 011f 	ands.w	r1, r1, #31
 80094be:	d007      	beq.n	80094d0 <__any_on+0x26>
 80094c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094c4:	fa24 f001 	lsr.w	r0, r4, r1
 80094c8:	fa00 f101 	lsl.w	r1, r0, r1
 80094cc:	428c      	cmp	r4, r1
 80094ce:	d10b      	bne.n	80094e8 <__any_on+0x3e>
 80094d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d803      	bhi.n	80094e0 <__any_on+0x36>
 80094d8:	2000      	movs	r0, #0
 80094da:	bd10      	pop	{r4, pc}
 80094dc:	4603      	mov	r3, r0
 80094de:	e7f7      	b.n	80094d0 <__any_on+0x26>
 80094e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d0f5      	beq.n	80094d4 <__any_on+0x2a>
 80094e8:	2001      	movs	r0, #1
 80094ea:	e7f6      	b.n	80094da <__any_on+0x30>

080094ec <sulp>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	4604      	mov	r4, r0
 80094f0:	460d      	mov	r5, r1
 80094f2:	ec45 4b10 	vmov	d0, r4, r5
 80094f6:	4616      	mov	r6, r2
 80094f8:	f7ff feba 	bl	8009270 <__ulp>
 80094fc:	ec51 0b10 	vmov	r0, r1, d0
 8009500:	b17e      	cbz	r6, 8009522 <sulp+0x36>
 8009502:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009506:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800950a:	2b00      	cmp	r3, #0
 800950c:	dd09      	ble.n	8009522 <sulp+0x36>
 800950e:	051b      	lsls	r3, r3, #20
 8009510:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009514:	2400      	movs	r4, #0
 8009516:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800951a:	4622      	mov	r2, r4
 800951c:	462b      	mov	r3, r5
 800951e:	f7f7 f873 	bl	8000608 <__aeabi_dmul>
 8009522:	ec41 0b10 	vmov	d0, r0, r1
 8009526:	bd70      	pop	{r4, r5, r6, pc}

08009528 <_strtod_l>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	b09f      	sub	sp, #124	@ 0x7c
 800952e:	460c      	mov	r4, r1
 8009530:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009532:	2200      	movs	r2, #0
 8009534:	921a      	str	r2, [sp, #104]	@ 0x68
 8009536:	9005      	str	r0, [sp, #20]
 8009538:	f04f 0a00 	mov.w	sl, #0
 800953c:	f04f 0b00 	mov.w	fp, #0
 8009540:	460a      	mov	r2, r1
 8009542:	9219      	str	r2, [sp, #100]	@ 0x64
 8009544:	7811      	ldrb	r1, [r2, #0]
 8009546:	292b      	cmp	r1, #43	@ 0x2b
 8009548:	d04a      	beq.n	80095e0 <_strtod_l+0xb8>
 800954a:	d838      	bhi.n	80095be <_strtod_l+0x96>
 800954c:	290d      	cmp	r1, #13
 800954e:	d832      	bhi.n	80095b6 <_strtod_l+0x8e>
 8009550:	2908      	cmp	r1, #8
 8009552:	d832      	bhi.n	80095ba <_strtod_l+0x92>
 8009554:	2900      	cmp	r1, #0
 8009556:	d03b      	beq.n	80095d0 <_strtod_l+0xa8>
 8009558:	2200      	movs	r2, #0
 800955a:	920e      	str	r2, [sp, #56]	@ 0x38
 800955c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800955e:	782a      	ldrb	r2, [r5, #0]
 8009560:	2a30      	cmp	r2, #48	@ 0x30
 8009562:	f040 80b2 	bne.w	80096ca <_strtod_l+0x1a2>
 8009566:	786a      	ldrb	r2, [r5, #1]
 8009568:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800956c:	2a58      	cmp	r2, #88	@ 0x58
 800956e:	d16e      	bne.n	800964e <_strtod_l+0x126>
 8009570:	9302      	str	r3, [sp, #8]
 8009572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	ab1a      	add	r3, sp, #104	@ 0x68
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	4a8f      	ldr	r2, [pc, #572]	@ (80097b8 <_strtod_l+0x290>)
 800957c:	9805      	ldr	r0, [sp, #20]
 800957e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009580:	a919      	add	r1, sp, #100	@ 0x64
 8009582:	f001 fa73 	bl	800aa6c <__gethex>
 8009586:	f010 060f 	ands.w	r6, r0, #15
 800958a:	4604      	mov	r4, r0
 800958c:	d005      	beq.n	800959a <_strtod_l+0x72>
 800958e:	2e06      	cmp	r6, #6
 8009590:	d128      	bne.n	80095e4 <_strtod_l+0xbc>
 8009592:	3501      	adds	r5, #1
 8009594:	2300      	movs	r3, #0
 8009596:	9519      	str	r5, [sp, #100]	@ 0x64
 8009598:	930e      	str	r3, [sp, #56]	@ 0x38
 800959a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 858e 	bne.w	800a0be <_strtod_l+0xb96>
 80095a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095a4:	b1cb      	cbz	r3, 80095da <_strtod_l+0xb2>
 80095a6:	4652      	mov	r2, sl
 80095a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80095ac:	ec43 2b10 	vmov	d0, r2, r3
 80095b0:	b01f      	add	sp, #124	@ 0x7c
 80095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b6:	2920      	cmp	r1, #32
 80095b8:	d1ce      	bne.n	8009558 <_strtod_l+0x30>
 80095ba:	3201      	adds	r2, #1
 80095bc:	e7c1      	b.n	8009542 <_strtod_l+0x1a>
 80095be:	292d      	cmp	r1, #45	@ 0x2d
 80095c0:	d1ca      	bne.n	8009558 <_strtod_l+0x30>
 80095c2:	2101      	movs	r1, #1
 80095c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80095c6:	1c51      	adds	r1, r2, #1
 80095c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80095ca:	7852      	ldrb	r2, [r2, #1]
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	d1c5      	bne.n	800955c <_strtod_l+0x34>
 80095d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 8570 	bne.w	800a0ba <_strtod_l+0xb92>
 80095da:	4652      	mov	r2, sl
 80095dc:	465b      	mov	r3, fp
 80095de:	e7e5      	b.n	80095ac <_strtod_l+0x84>
 80095e0:	2100      	movs	r1, #0
 80095e2:	e7ef      	b.n	80095c4 <_strtod_l+0x9c>
 80095e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095e6:	b13a      	cbz	r2, 80095f8 <_strtod_l+0xd0>
 80095e8:	2135      	movs	r1, #53	@ 0x35
 80095ea:	a81c      	add	r0, sp, #112	@ 0x70
 80095ec:	f7ff ff3a 	bl	8009464 <__copybits>
 80095f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095f2:	9805      	ldr	r0, [sp, #20]
 80095f4:	f7ff fb10 	bl	8008c18 <_Bfree>
 80095f8:	3e01      	subs	r6, #1
 80095fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80095fc:	2e04      	cmp	r6, #4
 80095fe:	d806      	bhi.n	800960e <_strtod_l+0xe6>
 8009600:	e8df f006 	tbb	[pc, r6]
 8009604:	201d0314 	.word	0x201d0314
 8009608:	14          	.byte	0x14
 8009609:	00          	.byte	0x00
 800960a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800960e:	05e1      	lsls	r1, r4, #23
 8009610:	bf48      	it	mi
 8009612:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009616:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800961a:	0d1b      	lsrs	r3, r3, #20
 800961c:	051b      	lsls	r3, r3, #20
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1bb      	bne.n	800959a <_strtod_l+0x72>
 8009622:	f7fe fb2d 	bl	8007c80 <__errno>
 8009626:	2322      	movs	r3, #34	@ 0x22
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	e7b6      	b.n	800959a <_strtod_l+0x72>
 800962c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009630:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009634:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009638:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800963c:	e7e7      	b.n	800960e <_strtod_l+0xe6>
 800963e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80097c0 <_strtod_l+0x298>
 8009642:	e7e4      	b.n	800960e <_strtod_l+0xe6>
 8009644:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009648:	f04f 3aff 	mov.w	sl, #4294967295
 800964c:	e7df      	b.n	800960e <_strtod_l+0xe6>
 800964e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	9219      	str	r2, [sp, #100]	@ 0x64
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	2b30      	cmp	r3, #48	@ 0x30
 8009658:	d0f9      	beq.n	800964e <_strtod_l+0x126>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d09d      	beq.n	800959a <_strtod_l+0x72>
 800965e:	2301      	movs	r3, #1
 8009660:	2700      	movs	r7, #0
 8009662:	9308      	str	r3, [sp, #32]
 8009664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009666:	930c      	str	r3, [sp, #48]	@ 0x30
 8009668:	970b      	str	r7, [sp, #44]	@ 0x2c
 800966a:	46b9      	mov	r9, r7
 800966c:	220a      	movs	r2, #10
 800966e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009670:	7805      	ldrb	r5, [r0, #0]
 8009672:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009676:	b2d9      	uxtb	r1, r3
 8009678:	2909      	cmp	r1, #9
 800967a:	d928      	bls.n	80096ce <_strtod_l+0x1a6>
 800967c:	494f      	ldr	r1, [pc, #316]	@ (80097bc <_strtod_l+0x294>)
 800967e:	2201      	movs	r2, #1
 8009680:	f001 f8fe 	bl	800a880 <strncmp>
 8009684:	2800      	cmp	r0, #0
 8009686:	d032      	beq.n	80096ee <_strtod_l+0x1c6>
 8009688:	2000      	movs	r0, #0
 800968a:	462a      	mov	r2, r5
 800968c:	900a      	str	r0, [sp, #40]	@ 0x28
 800968e:	464d      	mov	r5, r9
 8009690:	4603      	mov	r3, r0
 8009692:	2a65      	cmp	r2, #101	@ 0x65
 8009694:	d001      	beq.n	800969a <_strtod_l+0x172>
 8009696:	2a45      	cmp	r2, #69	@ 0x45
 8009698:	d114      	bne.n	80096c4 <_strtod_l+0x19c>
 800969a:	b91d      	cbnz	r5, 80096a4 <_strtod_l+0x17c>
 800969c:	9a08      	ldr	r2, [sp, #32]
 800969e:	4302      	orrs	r2, r0
 80096a0:	d096      	beq.n	80095d0 <_strtod_l+0xa8>
 80096a2:	2500      	movs	r5, #0
 80096a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096a6:	1c62      	adds	r2, r4, #1
 80096a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80096aa:	7862      	ldrb	r2, [r4, #1]
 80096ac:	2a2b      	cmp	r2, #43	@ 0x2b
 80096ae:	d07a      	beq.n	80097a6 <_strtod_l+0x27e>
 80096b0:	2a2d      	cmp	r2, #45	@ 0x2d
 80096b2:	d07e      	beq.n	80097b2 <_strtod_l+0x28a>
 80096b4:	f04f 0c00 	mov.w	ip, #0
 80096b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80096bc:	2909      	cmp	r1, #9
 80096be:	f240 8085 	bls.w	80097cc <_strtod_l+0x2a4>
 80096c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80096c4:	f04f 0800 	mov.w	r8, #0
 80096c8:	e0a5      	b.n	8009816 <_strtod_l+0x2ee>
 80096ca:	2300      	movs	r3, #0
 80096cc:	e7c8      	b.n	8009660 <_strtod_l+0x138>
 80096ce:	f1b9 0f08 	cmp.w	r9, #8
 80096d2:	bfd8      	it	le
 80096d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80096d6:	f100 0001 	add.w	r0, r0, #1
 80096da:	bfda      	itte	le
 80096dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80096e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80096e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80096e6:	f109 0901 	add.w	r9, r9, #1
 80096ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80096ec:	e7bf      	b.n	800966e <_strtod_l+0x146>
 80096ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80096f4:	785a      	ldrb	r2, [r3, #1]
 80096f6:	f1b9 0f00 	cmp.w	r9, #0
 80096fa:	d03b      	beq.n	8009774 <_strtod_l+0x24c>
 80096fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80096fe:	464d      	mov	r5, r9
 8009700:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009704:	2b09      	cmp	r3, #9
 8009706:	d912      	bls.n	800972e <_strtod_l+0x206>
 8009708:	2301      	movs	r3, #1
 800970a:	e7c2      	b.n	8009692 <_strtod_l+0x16a>
 800970c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	9219      	str	r2, [sp, #100]	@ 0x64
 8009712:	785a      	ldrb	r2, [r3, #1]
 8009714:	3001      	adds	r0, #1
 8009716:	2a30      	cmp	r2, #48	@ 0x30
 8009718:	d0f8      	beq.n	800970c <_strtod_l+0x1e4>
 800971a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800971e:	2b08      	cmp	r3, #8
 8009720:	f200 84d2 	bhi.w	800a0c8 <_strtod_l+0xba0>
 8009724:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009726:	900a      	str	r0, [sp, #40]	@ 0x28
 8009728:	2000      	movs	r0, #0
 800972a:	930c      	str	r3, [sp, #48]	@ 0x30
 800972c:	4605      	mov	r5, r0
 800972e:	3a30      	subs	r2, #48	@ 0x30
 8009730:	f100 0301 	add.w	r3, r0, #1
 8009734:	d018      	beq.n	8009768 <_strtod_l+0x240>
 8009736:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009738:	4419      	add	r1, r3
 800973a:	910a      	str	r1, [sp, #40]	@ 0x28
 800973c:	462e      	mov	r6, r5
 800973e:	f04f 0e0a 	mov.w	lr, #10
 8009742:	1c71      	adds	r1, r6, #1
 8009744:	eba1 0c05 	sub.w	ip, r1, r5
 8009748:	4563      	cmp	r3, ip
 800974a:	dc15      	bgt.n	8009778 <_strtod_l+0x250>
 800974c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009750:	182b      	adds	r3, r5, r0
 8009752:	2b08      	cmp	r3, #8
 8009754:	f105 0501 	add.w	r5, r5, #1
 8009758:	4405      	add	r5, r0
 800975a:	dc1a      	bgt.n	8009792 <_strtod_l+0x26a>
 800975c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800975e:	230a      	movs	r3, #10
 8009760:	fb03 2301 	mla	r3, r3, r1, r2
 8009764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009766:	2300      	movs	r3, #0
 8009768:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800976a:	1c51      	adds	r1, r2, #1
 800976c:	9119      	str	r1, [sp, #100]	@ 0x64
 800976e:	7852      	ldrb	r2, [r2, #1]
 8009770:	4618      	mov	r0, r3
 8009772:	e7c5      	b.n	8009700 <_strtod_l+0x1d8>
 8009774:	4648      	mov	r0, r9
 8009776:	e7ce      	b.n	8009716 <_strtod_l+0x1ee>
 8009778:	2e08      	cmp	r6, #8
 800977a:	dc05      	bgt.n	8009788 <_strtod_l+0x260>
 800977c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800977e:	fb0e f606 	mul.w	r6, lr, r6
 8009782:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009784:	460e      	mov	r6, r1
 8009786:	e7dc      	b.n	8009742 <_strtod_l+0x21a>
 8009788:	2910      	cmp	r1, #16
 800978a:	bfd8      	it	le
 800978c:	fb0e f707 	mulle.w	r7, lr, r7
 8009790:	e7f8      	b.n	8009784 <_strtod_l+0x25c>
 8009792:	2b0f      	cmp	r3, #15
 8009794:	bfdc      	itt	le
 8009796:	230a      	movle	r3, #10
 8009798:	fb03 2707 	mlale	r7, r3, r7, r2
 800979c:	e7e3      	b.n	8009766 <_strtod_l+0x23e>
 800979e:	2300      	movs	r3, #0
 80097a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097a2:	2301      	movs	r3, #1
 80097a4:	e77a      	b.n	800969c <_strtod_l+0x174>
 80097a6:	f04f 0c00 	mov.w	ip, #0
 80097aa:	1ca2      	adds	r2, r4, #2
 80097ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80097ae:	78a2      	ldrb	r2, [r4, #2]
 80097b0:	e782      	b.n	80096b8 <_strtod_l+0x190>
 80097b2:	f04f 0c01 	mov.w	ip, #1
 80097b6:	e7f8      	b.n	80097aa <_strtod_l+0x282>
 80097b8:	0800b6a4 	.word	0x0800b6a4
 80097bc:	0800b4dc 	.word	0x0800b4dc
 80097c0:	7ff00000 	.word	0x7ff00000
 80097c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097c6:	1c51      	adds	r1, r2, #1
 80097c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80097ca:	7852      	ldrb	r2, [r2, #1]
 80097cc:	2a30      	cmp	r2, #48	@ 0x30
 80097ce:	d0f9      	beq.n	80097c4 <_strtod_l+0x29c>
 80097d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80097d4:	2908      	cmp	r1, #8
 80097d6:	f63f af75 	bhi.w	80096c4 <_strtod_l+0x19c>
 80097da:	3a30      	subs	r2, #48	@ 0x30
 80097dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80097de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80097e2:	f04f 080a 	mov.w	r8, #10
 80097e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097e8:	1c56      	adds	r6, r2, #1
 80097ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80097ec:	7852      	ldrb	r2, [r2, #1]
 80097ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80097f2:	f1be 0f09 	cmp.w	lr, #9
 80097f6:	d939      	bls.n	800986c <_strtod_l+0x344>
 80097f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80097fa:	1a76      	subs	r6, r6, r1
 80097fc:	2e08      	cmp	r6, #8
 80097fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009802:	dc03      	bgt.n	800980c <_strtod_l+0x2e4>
 8009804:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009806:	4588      	cmp	r8, r1
 8009808:	bfa8      	it	ge
 800980a:	4688      	movge	r8, r1
 800980c:	f1bc 0f00 	cmp.w	ip, #0
 8009810:	d001      	beq.n	8009816 <_strtod_l+0x2ee>
 8009812:	f1c8 0800 	rsb	r8, r8, #0
 8009816:	2d00      	cmp	r5, #0
 8009818:	d14e      	bne.n	80098b8 <_strtod_l+0x390>
 800981a:	9908      	ldr	r1, [sp, #32]
 800981c:	4308      	orrs	r0, r1
 800981e:	f47f aebc 	bne.w	800959a <_strtod_l+0x72>
 8009822:	2b00      	cmp	r3, #0
 8009824:	f47f aed4 	bne.w	80095d0 <_strtod_l+0xa8>
 8009828:	2a69      	cmp	r2, #105	@ 0x69
 800982a:	d028      	beq.n	800987e <_strtod_l+0x356>
 800982c:	dc25      	bgt.n	800987a <_strtod_l+0x352>
 800982e:	2a49      	cmp	r2, #73	@ 0x49
 8009830:	d025      	beq.n	800987e <_strtod_l+0x356>
 8009832:	2a4e      	cmp	r2, #78	@ 0x4e
 8009834:	f47f aecc 	bne.w	80095d0 <_strtod_l+0xa8>
 8009838:	499a      	ldr	r1, [pc, #616]	@ (8009aa4 <_strtod_l+0x57c>)
 800983a:	a819      	add	r0, sp, #100	@ 0x64
 800983c:	f001 fb38 	bl	800aeb0 <__match>
 8009840:	2800      	cmp	r0, #0
 8009842:	f43f aec5 	beq.w	80095d0 <_strtod_l+0xa8>
 8009846:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b28      	cmp	r3, #40	@ 0x28
 800984c:	d12e      	bne.n	80098ac <_strtod_l+0x384>
 800984e:	4996      	ldr	r1, [pc, #600]	@ (8009aa8 <_strtod_l+0x580>)
 8009850:	aa1c      	add	r2, sp, #112	@ 0x70
 8009852:	a819      	add	r0, sp, #100	@ 0x64
 8009854:	f001 fb40 	bl	800aed8 <__hexnan>
 8009858:	2805      	cmp	r0, #5
 800985a:	d127      	bne.n	80098ac <_strtod_l+0x384>
 800985c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800985e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009862:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009866:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800986a:	e696      	b.n	800959a <_strtod_l+0x72>
 800986c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800986e:	fb08 2101 	mla	r1, r8, r1, r2
 8009872:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009876:	9209      	str	r2, [sp, #36]	@ 0x24
 8009878:	e7b5      	b.n	80097e6 <_strtod_l+0x2be>
 800987a:	2a6e      	cmp	r2, #110	@ 0x6e
 800987c:	e7da      	b.n	8009834 <_strtod_l+0x30c>
 800987e:	498b      	ldr	r1, [pc, #556]	@ (8009aac <_strtod_l+0x584>)
 8009880:	a819      	add	r0, sp, #100	@ 0x64
 8009882:	f001 fb15 	bl	800aeb0 <__match>
 8009886:	2800      	cmp	r0, #0
 8009888:	f43f aea2 	beq.w	80095d0 <_strtod_l+0xa8>
 800988c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800988e:	4988      	ldr	r1, [pc, #544]	@ (8009ab0 <_strtod_l+0x588>)
 8009890:	3b01      	subs	r3, #1
 8009892:	a819      	add	r0, sp, #100	@ 0x64
 8009894:	9319      	str	r3, [sp, #100]	@ 0x64
 8009896:	f001 fb0b 	bl	800aeb0 <__match>
 800989a:	b910      	cbnz	r0, 80098a2 <_strtod_l+0x37a>
 800989c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800989e:	3301      	adds	r3, #1
 80098a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80098a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009ac0 <_strtod_l+0x598>
 80098a6:	f04f 0a00 	mov.w	sl, #0
 80098aa:	e676      	b.n	800959a <_strtod_l+0x72>
 80098ac:	4881      	ldr	r0, [pc, #516]	@ (8009ab4 <_strtod_l+0x58c>)
 80098ae:	f001 f83b 	bl	800a928 <nan>
 80098b2:	ec5b ab10 	vmov	sl, fp, d0
 80098b6:	e670      	b.n	800959a <_strtod_l+0x72>
 80098b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80098bc:	eba8 0303 	sub.w	r3, r8, r3
 80098c0:	f1b9 0f00 	cmp.w	r9, #0
 80098c4:	bf08      	it	eq
 80098c6:	46a9      	moveq	r9, r5
 80098c8:	2d10      	cmp	r5, #16
 80098ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80098cc:	462c      	mov	r4, r5
 80098ce:	bfa8      	it	ge
 80098d0:	2410      	movge	r4, #16
 80098d2:	f7f6 fe1f 	bl	8000514 <__aeabi_ui2d>
 80098d6:	2d09      	cmp	r5, #9
 80098d8:	4682      	mov	sl, r0
 80098da:	468b      	mov	fp, r1
 80098dc:	dc13      	bgt.n	8009906 <_strtod_l+0x3de>
 80098de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f43f ae5a 	beq.w	800959a <_strtod_l+0x72>
 80098e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e8:	dd78      	ble.n	80099dc <_strtod_l+0x4b4>
 80098ea:	2b16      	cmp	r3, #22
 80098ec:	dc5f      	bgt.n	80099ae <_strtod_l+0x486>
 80098ee:	4972      	ldr	r1, [pc, #456]	@ (8009ab8 <_strtod_l+0x590>)
 80098f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f8:	4652      	mov	r2, sl
 80098fa:	465b      	mov	r3, fp
 80098fc:	f7f6 fe84 	bl	8000608 <__aeabi_dmul>
 8009900:	4682      	mov	sl, r0
 8009902:	468b      	mov	fp, r1
 8009904:	e649      	b.n	800959a <_strtod_l+0x72>
 8009906:	4b6c      	ldr	r3, [pc, #432]	@ (8009ab8 <_strtod_l+0x590>)
 8009908:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800990c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009910:	f7f6 fe7a 	bl	8000608 <__aeabi_dmul>
 8009914:	4682      	mov	sl, r0
 8009916:	4638      	mov	r0, r7
 8009918:	468b      	mov	fp, r1
 800991a:	f7f6 fdfb 	bl	8000514 <__aeabi_ui2d>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4650      	mov	r0, sl
 8009924:	4659      	mov	r1, fp
 8009926:	f7f6 fcb9 	bl	800029c <__adddf3>
 800992a:	2d0f      	cmp	r5, #15
 800992c:	4682      	mov	sl, r0
 800992e:	468b      	mov	fp, r1
 8009930:	ddd5      	ble.n	80098de <_strtod_l+0x3b6>
 8009932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009934:	1b2c      	subs	r4, r5, r4
 8009936:	441c      	add	r4, r3
 8009938:	2c00      	cmp	r4, #0
 800993a:	f340 8093 	ble.w	8009a64 <_strtod_l+0x53c>
 800993e:	f014 030f 	ands.w	r3, r4, #15
 8009942:	d00a      	beq.n	800995a <_strtod_l+0x432>
 8009944:	495c      	ldr	r1, [pc, #368]	@ (8009ab8 <_strtod_l+0x590>)
 8009946:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800994a:	4652      	mov	r2, sl
 800994c:	465b      	mov	r3, fp
 800994e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009952:	f7f6 fe59 	bl	8000608 <__aeabi_dmul>
 8009956:	4682      	mov	sl, r0
 8009958:	468b      	mov	fp, r1
 800995a:	f034 040f 	bics.w	r4, r4, #15
 800995e:	d073      	beq.n	8009a48 <_strtod_l+0x520>
 8009960:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009964:	dd49      	ble.n	80099fa <_strtod_l+0x4d2>
 8009966:	2400      	movs	r4, #0
 8009968:	46a0      	mov	r8, r4
 800996a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800996c:	46a1      	mov	r9, r4
 800996e:	9a05      	ldr	r2, [sp, #20]
 8009970:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009ac0 <_strtod_l+0x598>
 8009974:	2322      	movs	r3, #34	@ 0x22
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	f04f 0a00 	mov.w	sl, #0
 800997c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800997e:	2b00      	cmp	r3, #0
 8009980:	f43f ae0b 	beq.w	800959a <_strtod_l+0x72>
 8009984:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009986:	9805      	ldr	r0, [sp, #20]
 8009988:	f7ff f946 	bl	8008c18 <_Bfree>
 800998c:	9805      	ldr	r0, [sp, #20]
 800998e:	4649      	mov	r1, r9
 8009990:	f7ff f942 	bl	8008c18 <_Bfree>
 8009994:	9805      	ldr	r0, [sp, #20]
 8009996:	4641      	mov	r1, r8
 8009998:	f7ff f93e 	bl	8008c18 <_Bfree>
 800999c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800999e:	9805      	ldr	r0, [sp, #20]
 80099a0:	f7ff f93a 	bl	8008c18 <_Bfree>
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	4621      	mov	r1, r4
 80099a8:	f7ff f936 	bl	8008c18 <_Bfree>
 80099ac:	e5f5      	b.n	800959a <_strtod_l+0x72>
 80099ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80099b4:	4293      	cmp	r3, r2
 80099b6:	dbbc      	blt.n	8009932 <_strtod_l+0x40a>
 80099b8:	4c3f      	ldr	r4, [pc, #252]	@ (8009ab8 <_strtod_l+0x590>)
 80099ba:	f1c5 050f 	rsb	r5, r5, #15
 80099be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099c2:	4652      	mov	r2, sl
 80099c4:	465b      	mov	r3, fp
 80099c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ca:	f7f6 fe1d 	bl	8000608 <__aeabi_dmul>
 80099ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d0:	1b5d      	subs	r5, r3, r5
 80099d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099da:	e78f      	b.n	80098fc <_strtod_l+0x3d4>
 80099dc:	3316      	adds	r3, #22
 80099de:	dba8      	blt.n	8009932 <_strtod_l+0x40a>
 80099e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099e2:	eba3 0808 	sub.w	r8, r3, r8
 80099e6:	4b34      	ldr	r3, [pc, #208]	@ (8009ab8 <_strtod_l+0x590>)
 80099e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80099ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80099f0:	4650      	mov	r0, sl
 80099f2:	4659      	mov	r1, fp
 80099f4:	f7f6 ff32 	bl	800085c <__aeabi_ddiv>
 80099f8:	e782      	b.n	8009900 <_strtod_l+0x3d8>
 80099fa:	2300      	movs	r3, #0
 80099fc:	4f2f      	ldr	r7, [pc, #188]	@ (8009abc <_strtod_l+0x594>)
 80099fe:	1124      	asrs	r4, r4, #4
 8009a00:	4650      	mov	r0, sl
 8009a02:	4659      	mov	r1, fp
 8009a04:	461e      	mov	r6, r3
 8009a06:	2c01      	cmp	r4, #1
 8009a08:	dc21      	bgt.n	8009a4e <_strtod_l+0x526>
 8009a0a:	b10b      	cbz	r3, 8009a10 <_strtod_l+0x4e8>
 8009a0c:	4682      	mov	sl, r0
 8009a0e:	468b      	mov	fp, r1
 8009a10:	492a      	ldr	r1, [pc, #168]	@ (8009abc <_strtod_l+0x594>)
 8009a12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a1a:	4652      	mov	r2, sl
 8009a1c:	465b      	mov	r3, fp
 8009a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a22:	f7f6 fdf1 	bl	8000608 <__aeabi_dmul>
 8009a26:	4b26      	ldr	r3, [pc, #152]	@ (8009ac0 <_strtod_l+0x598>)
 8009a28:	460a      	mov	r2, r1
 8009a2a:	400b      	ands	r3, r1
 8009a2c:	4925      	ldr	r1, [pc, #148]	@ (8009ac4 <_strtod_l+0x59c>)
 8009a2e:	428b      	cmp	r3, r1
 8009a30:	4682      	mov	sl, r0
 8009a32:	d898      	bhi.n	8009966 <_strtod_l+0x43e>
 8009a34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf86      	itte	hi
 8009a3c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009ac8 <_strtod_l+0x5a0>
 8009a40:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a48:	2300      	movs	r3, #0
 8009a4a:	9308      	str	r3, [sp, #32]
 8009a4c:	e076      	b.n	8009b3c <_strtod_l+0x614>
 8009a4e:	07e2      	lsls	r2, r4, #31
 8009a50:	d504      	bpl.n	8009a5c <_strtod_l+0x534>
 8009a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a56:	f7f6 fdd7 	bl	8000608 <__aeabi_dmul>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	1064      	asrs	r4, r4, #1
 8009a60:	3708      	adds	r7, #8
 8009a62:	e7d0      	b.n	8009a06 <_strtod_l+0x4de>
 8009a64:	d0f0      	beq.n	8009a48 <_strtod_l+0x520>
 8009a66:	4264      	negs	r4, r4
 8009a68:	f014 020f 	ands.w	r2, r4, #15
 8009a6c:	d00a      	beq.n	8009a84 <_strtod_l+0x55c>
 8009a6e:	4b12      	ldr	r3, [pc, #72]	@ (8009ab8 <_strtod_l+0x590>)
 8009a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a74:	4650      	mov	r0, sl
 8009a76:	4659      	mov	r1, fp
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 feee 	bl	800085c <__aeabi_ddiv>
 8009a80:	4682      	mov	sl, r0
 8009a82:	468b      	mov	fp, r1
 8009a84:	1124      	asrs	r4, r4, #4
 8009a86:	d0df      	beq.n	8009a48 <_strtod_l+0x520>
 8009a88:	2c1f      	cmp	r4, #31
 8009a8a:	dd1f      	ble.n	8009acc <_strtod_l+0x5a4>
 8009a8c:	2400      	movs	r4, #0
 8009a8e:	46a0      	mov	r8, r4
 8009a90:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a92:	46a1      	mov	r9, r4
 8009a94:	9a05      	ldr	r2, [sp, #20]
 8009a96:	2322      	movs	r3, #34	@ 0x22
 8009a98:	f04f 0a00 	mov.w	sl, #0
 8009a9c:	f04f 0b00 	mov.w	fp, #0
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	e76b      	b.n	800997c <_strtod_l+0x454>
 8009aa4:	0800b3ca 	.word	0x0800b3ca
 8009aa8:	0800b690 	.word	0x0800b690
 8009aac:	0800b3c2 	.word	0x0800b3c2
 8009ab0:	0800b3f9 	.word	0x0800b3f9
 8009ab4:	0800b532 	.word	0x0800b532
 8009ab8:	0800b5c8 	.word	0x0800b5c8
 8009abc:	0800b5a0 	.word	0x0800b5a0
 8009ac0:	7ff00000 	.word	0x7ff00000
 8009ac4:	7ca00000 	.word	0x7ca00000
 8009ac8:	7fefffff 	.word	0x7fefffff
 8009acc:	f014 0310 	ands.w	r3, r4, #16
 8009ad0:	bf18      	it	ne
 8009ad2:	236a      	movne	r3, #106	@ 0x6a
 8009ad4:	4ea9      	ldr	r6, [pc, #676]	@ (8009d7c <_strtod_l+0x854>)
 8009ad6:	9308      	str	r3, [sp, #32]
 8009ad8:	4650      	mov	r0, sl
 8009ada:	4659      	mov	r1, fp
 8009adc:	2300      	movs	r3, #0
 8009ade:	07e7      	lsls	r7, r4, #31
 8009ae0:	d504      	bpl.n	8009aec <_strtod_l+0x5c4>
 8009ae2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ae6:	f7f6 fd8f 	bl	8000608 <__aeabi_dmul>
 8009aea:	2301      	movs	r3, #1
 8009aec:	1064      	asrs	r4, r4, #1
 8009aee:	f106 0608 	add.w	r6, r6, #8
 8009af2:	d1f4      	bne.n	8009ade <_strtod_l+0x5b6>
 8009af4:	b10b      	cbz	r3, 8009afa <_strtod_l+0x5d2>
 8009af6:	4682      	mov	sl, r0
 8009af8:	468b      	mov	fp, r1
 8009afa:	9b08      	ldr	r3, [sp, #32]
 8009afc:	b1b3      	cbz	r3, 8009b2c <_strtod_l+0x604>
 8009afe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	4659      	mov	r1, fp
 8009b0a:	dd0f      	ble.n	8009b2c <_strtod_l+0x604>
 8009b0c:	2b1f      	cmp	r3, #31
 8009b0e:	dd56      	ble.n	8009bbe <_strtod_l+0x696>
 8009b10:	2b34      	cmp	r3, #52	@ 0x34
 8009b12:	bfde      	ittt	le
 8009b14:	f04f 33ff 	movle.w	r3, #4294967295
 8009b18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b1c:	4093      	lslle	r3, r2
 8009b1e:	f04f 0a00 	mov.w	sl, #0
 8009b22:	bfcc      	ite	gt
 8009b24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b28:	ea03 0b01 	andle.w	fp, r3, r1
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4650      	mov	r0, sl
 8009b32:	4659      	mov	r1, fp
 8009b34:	f7f6 ffd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1a7      	bne.n	8009a8c <_strtod_l+0x564>
 8009b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b42:	9805      	ldr	r0, [sp, #20]
 8009b44:	462b      	mov	r3, r5
 8009b46:	464a      	mov	r2, r9
 8009b48:	f7ff f8ce 	bl	8008ce8 <__s2b>
 8009b4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	f43f af09 	beq.w	8009966 <_strtod_l+0x43e>
 8009b54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	eba3 0308 	sub.w	r3, r3, r8
 8009b5e:	bfa8      	it	ge
 8009b60:	2300      	movge	r3, #0
 8009b62:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b64:	2400      	movs	r4, #0
 8009b66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b6c:	46a0      	mov	r8, r4
 8009b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b70:	9805      	ldr	r0, [sp, #20]
 8009b72:	6859      	ldr	r1, [r3, #4]
 8009b74:	f7ff f810 	bl	8008b98 <_Balloc>
 8009b78:	4681      	mov	r9, r0
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	f43f aef7 	beq.w	800996e <_strtod_l+0x446>
 8009b80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b82:	691a      	ldr	r2, [r3, #16]
 8009b84:	3202      	adds	r2, #2
 8009b86:	f103 010c 	add.w	r1, r3, #12
 8009b8a:	0092      	lsls	r2, r2, #2
 8009b8c:	300c      	adds	r0, #12
 8009b8e:	f000 febb 	bl	800a908 <memcpy>
 8009b92:	ec4b ab10 	vmov	d0, sl, fp
 8009b96:	9805      	ldr	r0, [sp, #20]
 8009b98:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b9a:	a91b      	add	r1, sp, #108	@ 0x6c
 8009b9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009ba0:	f7ff fbd6 	bl	8009350 <__d2b>
 8009ba4:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f43f aee1 	beq.w	800996e <_strtod_l+0x446>
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	2101      	movs	r1, #1
 8009bb0:	f7ff f930 	bl	8008e14 <__i2b>
 8009bb4:	4680      	mov	r8, r0
 8009bb6:	b948      	cbnz	r0, 8009bcc <_strtod_l+0x6a4>
 8009bb8:	f04f 0800 	mov.w	r8, #0
 8009bbc:	e6d7      	b.n	800996e <_strtod_l+0x446>
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	ea03 0a0a 	and.w	sl, r3, sl
 8009bca:	e7af      	b.n	8009b2c <_strtod_l+0x604>
 8009bcc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009bce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	bfab      	itete	ge
 8009bd4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009bd6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009bd8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009bda:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009bdc:	bfac      	ite	ge
 8009bde:	18ef      	addge	r7, r5, r3
 8009be0:	1b5e      	sublt	r6, r3, r5
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	1aed      	subs	r5, r5, r3
 8009be6:	4415      	add	r5, r2
 8009be8:	4b65      	ldr	r3, [pc, #404]	@ (8009d80 <_strtod_l+0x858>)
 8009bea:	3d01      	subs	r5, #1
 8009bec:	429d      	cmp	r5, r3
 8009bee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009bf2:	da50      	bge.n	8009c96 <_strtod_l+0x76e>
 8009bf4:	1b5b      	subs	r3, r3, r5
 8009bf6:	2b1f      	cmp	r3, #31
 8009bf8:	eba2 0203 	sub.w	r2, r2, r3
 8009bfc:	f04f 0101 	mov.w	r1, #1
 8009c00:	dc3d      	bgt.n	8009c7e <_strtod_l+0x756>
 8009c02:	fa01 f303 	lsl.w	r3, r1, r3
 8009c06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c08:	2300      	movs	r3, #0
 8009c0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c0c:	18bd      	adds	r5, r7, r2
 8009c0e:	9b08      	ldr	r3, [sp, #32]
 8009c10:	42af      	cmp	r7, r5
 8009c12:	4416      	add	r6, r2
 8009c14:	441e      	add	r6, r3
 8009c16:	463b      	mov	r3, r7
 8009c18:	bfa8      	it	ge
 8009c1a:	462b      	movge	r3, r5
 8009c1c:	42b3      	cmp	r3, r6
 8009c1e:	bfa8      	it	ge
 8009c20:	4633      	movge	r3, r6
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bfc2      	ittt	gt
 8009c26:	1aed      	subgt	r5, r5, r3
 8009c28:	1af6      	subgt	r6, r6, r3
 8009c2a:	1aff      	subgt	r7, r7, r3
 8009c2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	dd16      	ble.n	8009c60 <_strtod_l+0x738>
 8009c32:	4641      	mov	r1, r8
 8009c34:	9805      	ldr	r0, [sp, #20]
 8009c36:	461a      	mov	r2, r3
 8009c38:	f7ff f9a4 	bl	8008f84 <__pow5mult>
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d0ba      	beq.n	8009bb8 <_strtod_l+0x690>
 8009c42:	4601      	mov	r1, r0
 8009c44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c46:	9805      	ldr	r0, [sp, #20]
 8009c48:	f7ff f8fa 	bl	8008e40 <__multiply>
 8009c4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f43f ae8d 	beq.w	800996e <_strtod_l+0x446>
 8009c54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c56:	9805      	ldr	r0, [sp, #20]
 8009c58:	f7fe ffde 	bl	8008c18 <_Bfree>
 8009c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c60:	2d00      	cmp	r5, #0
 8009c62:	dc1d      	bgt.n	8009ca0 <_strtod_l+0x778>
 8009c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dd23      	ble.n	8009cb2 <_strtod_l+0x78a>
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c6e:	9805      	ldr	r0, [sp, #20]
 8009c70:	f7ff f988 	bl	8008f84 <__pow5mult>
 8009c74:	4681      	mov	r9, r0
 8009c76:	b9e0      	cbnz	r0, 8009cb2 <_strtod_l+0x78a>
 8009c78:	f04f 0900 	mov.w	r9, #0
 8009c7c:	e677      	b.n	800996e <_strtod_l+0x446>
 8009c7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009c82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009c86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009c8a:	35e2      	adds	r5, #226	@ 0xe2
 8009c8c:	fa01 f305 	lsl.w	r3, r1, r5
 8009c90:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009c94:	e7ba      	b.n	8009c0c <_strtod_l+0x6e4>
 8009c96:	2300      	movs	r3, #0
 8009c98:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c9e:	e7b5      	b.n	8009c0c <_strtod_l+0x6e4>
 8009ca0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ca2:	9805      	ldr	r0, [sp, #20]
 8009ca4:	462a      	mov	r2, r5
 8009ca6:	f7ff f9c7 	bl	8009038 <__lshift>
 8009caa:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d1d9      	bne.n	8009c64 <_strtod_l+0x73c>
 8009cb0:	e65d      	b.n	800996e <_strtod_l+0x446>
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	dd07      	ble.n	8009cc6 <_strtod_l+0x79e>
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	9805      	ldr	r0, [sp, #20]
 8009cba:	4632      	mov	r2, r6
 8009cbc:	f7ff f9bc 	bl	8009038 <__lshift>
 8009cc0:	4681      	mov	r9, r0
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0d8      	beq.n	8009c78 <_strtod_l+0x750>
 8009cc6:	2f00      	cmp	r7, #0
 8009cc8:	dd08      	ble.n	8009cdc <_strtod_l+0x7b4>
 8009cca:	4641      	mov	r1, r8
 8009ccc:	9805      	ldr	r0, [sp, #20]
 8009cce:	463a      	mov	r2, r7
 8009cd0:	f7ff f9b2 	bl	8009038 <__lshift>
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f43f ae49 	beq.w	800996e <_strtod_l+0x446>
 8009cdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cde:	9805      	ldr	r0, [sp, #20]
 8009ce0:	464a      	mov	r2, r9
 8009ce2:	f7ff fa31 	bl	8009148 <__mdiff>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f43f ae40 	beq.w	800996e <_strtod_l+0x446>
 8009cee:	68c3      	ldr	r3, [r0, #12]
 8009cf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60c3      	str	r3, [r0, #12]
 8009cf6:	4641      	mov	r1, r8
 8009cf8:	f7ff fa0a 	bl	8009110 <__mcmp>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	da45      	bge.n	8009d8c <_strtod_l+0x864>
 8009d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d02:	ea53 030a 	orrs.w	r3, r3, sl
 8009d06:	d16b      	bne.n	8009de0 <_strtod_l+0x8b8>
 8009d08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d167      	bne.n	8009de0 <_strtod_l+0x8b8>
 8009d10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d14:	0d1b      	lsrs	r3, r3, #20
 8009d16:	051b      	lsls	r3, r3, #20
 8009d18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d1c:	d960      	bls.n	8009de0 <_strtod_l+0x8b8>
 8009d1e:	6963      	ldr	r3, [r4, #20]
 8009d20:	b913      	cbnz	r3, 8009d28 <_strtod_l+0x800>
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	dd5b      	ble.n	8009de0 <_strtod_l+0x8b8>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	9805      	ldr	r0, [sp, #20]
 8009d2e:	f7ff f983 	bl	8009038 <__lshift>
 8009d32:	4641      	mov	r1, r8
 8009d34:	4604      	mov	r4, r0
 8009d36:	f7ff f9eb 	bl	8009110 <__mcmp>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	dd50      	ble.n	8009de0 <_strtod_l+0x8b8>
 8009d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d42:	9a08      	ldr	r2, [sp, #32]
 8009d44:	0d1b      	lsrs	r3, r3, #20
 8009d46:	051b      	lsls	r3, r3, #20
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	d06a      	beq.n	8009e22 <_strtod_l+0x8fa>
 8009d4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d50:	d867      	bhi.n	8009e22 <_strtod_l+0x8fa>
 8009d52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d56:	f67f ae9d 	bls.w	8009a94 <_strtod_l+0x56c>
 8009d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d84 <_strtod_l+0x85c>)
 8009d5c:	4650      	mov	r0, sl
 8009d5e:	4659      	mov	r1, fp
 8009d60:	2200      	movs	r2, #0
 8009d62:	f7f6 fc51 	bl	8000608 <__aeabi_dmul>
 8009d66:	4b08      	ldr	r3, [pc, #32]	@ (8009d88 <_strtod_l+0x860>)
 8009d68:	400b      	ands	r3, r1
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	468b      	mov	fp, r1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f47f ae08 	bne.w	8009984 <_strtod_l+0x45c>
 8009d74:	9a05      	ldr	r2, [sp, #20]
 8009d76:	2322      	movs	r3, #34	@ 0x22
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	e603      	b.n	8009984 <_strtod_l+0x45c>
 8009d7c:	0800b6b8 	.word	0x0800b6b8
 8009d80:	fffffc02 	.word	0xfffffc02
 8009d84:	39500000 	.word	0x39500000
 8009d88:	7ff00000 	.word	0x7ff00000
 8009d8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009d90:	d165      	bne.n	8009e5e <_strtod_l+0x936>
 8009d92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d98:	b35a      	cbz	r2, 8009df2 <_strtod_l+0x8ca>
 8009d9a:	4a9f      	ldr	r2, [pc, #636]	@ (800a018 <_strtod_l+0xaf0>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d12b      	bne.n	8009df8 <_strtod_l+0x8d0>
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	4651      	mov	r1, sl
 8009da4:	b303      	cbz	r3, 8009de8 <_strtod_l+0x8c0>
 8009da6:	4b9d      	ldr	r3, [pc, #628]	@ (800a01c <_strtod_l+0xaf4>)
 8009da8:	465a      	mov	r2, fp
 8009daa:	4013      	ands	r3, r2
 8009dac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009db0:	f04f 32ff 	mov.w	r2, #4294967295
 8009db4:	d81b      	bhi.n	8009dee <_strtod_l+0x8c6>
 8009db6:	0d1b      	lsrs	r3, r3, #20
 8009db8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	d119      	bne.n	8009df8 <_strtod_l+0x8d0>
 8009dc4:	4b96      	ldr	r3, [pc, #600]	@ (800a020 <_strtod_l+0xaf8>)
 8009dc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d102      	bne.n	8009dd2 <_strtod_l+0x8aa>
 8009dcc:	3101      	adds	r1, #1
 8009dce:	f43f adce 	beq.w	800996e <_strtod_l+0x446>
 8009dd2:	4b92      	ldr	r3, [pc, #584]	@ (800a01c <_strtod_l+0xaf4>)
 8009dd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dd6:	401a      	ands	r2, r3
 8009dd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009ddc:	f04f 0a00 	mov.w	sl, #0
 8009de0:	9b08      	ldr	r3, [sp, #32]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1b9      	bne.n	8009d5a <_strtod_l+0x832>
 8009de6:	e5cd      	b.n	8009984 <_strtod_l+0x45c>
 8009de8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dec:	e7e8      	b.n	8009dc0 <_strtod_l+0x898>
 8009dee:	4613      	mov	r3, r2
 8009df0:	e7e6      	b.n	8009dc0 <_strtod_l+0x898>
 8009df2:	ea53 030a 	orrs.w	r3, r3, sl
 8009df6:	d0a2      	beq.n	8009d3e <_strtod_l+0x816>
 8009df8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dfa:	b1db      	cbz	r3, 8009e34 <_strtod_l+0x90c>
 8009dfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dfe:	4213      	tst	r3, r2
 8009e00:	d0ee      	beq.n	8009de0 <_strtod_l+0x8b8>
 8009e02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e04:	9a08      	ldr	r2, [sp, #32]
 8009e06:	4650      	mov	r0, sl
 8009e08:	4659      	mov	r1, fp
 8009e0a:	b1bb      	cbz	r3, 8009e3c <_strtod_l+0x914>
 8009e0c:	f7ff fb6e 	bl	80094ec <sulp>
 8009e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e14:	ec53 2b10 	vmov	r2, r3, d0
 8009e18:	f7f6 fa40 	bl	800029c <__adddf3>
 8009e1c:	4682      	mov	sl, r0
 8009e1e:	468b      	mov	fp, r1
 8009e20:	e7de      	b.n	8009de0 <_strtod_l+0x8b8>
 8009e22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e2e:	f04f 3aff 	mov.w	sl, #4294967295
 8009e32:	e7d5      	b.n	8009de0 <_strtod_l+0x8b8>
 8009e34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e36:	ea13 0f0a 	tst.w	r3, sl
 8009e3a:	e7e1      	b.n	8009e00 <_strtod_l+0x8d8>
 8009e3c:	f7ff fb56 	bl	80094ec <sulp>
 8009e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e44:	ec53 2b10 	vmov	r2, r3, d0
 8009e48:	f7f6 fa26 	bl	8000298 <__aeabi_dsub>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4682      	mov	sl, r0
 8009e52:	468b      	mov	fp, r1
 8009e54:	f7f6 fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d0c1      	beq.n	8009de0 <_strtod_l+0x8b8>
 8009e5c:	e61a      	b.n	8009a94 <_strtod_l+0x56c>
 8009e5e:	4641      	mov	r1, r8
 8009e60:	4620      	mov	r0, r4
 8009e62:	f7ff facd 	bl	8009400 <__ratio>
 8009e66:	ec57 6b10 	vmov	r6, r7, d0
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e70:	4630      	mov	r0, r6
 8009e72:	4639      	mov	r1, r7
 8009e74:	f7f6 fe44 	bl	8000b00 <__aeabi_dcmple>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d06f      	beq.n	8009f5c <_strtod_l+0xa34>
 8009e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d17a      	bne.n	8009f78 <_strtod_l+0xa50>
 8009e82:	f1ba 0f00 	cmp.w	sl, #0
 8009e86:	d158      	bne.n	8009f3a <_strtod_l+0xa12>
 8009e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d15a      	bne.n	8009f48 <_strtod_l+0xa20>
 8009e92:	4b64      	ldr	r3, [pc, #400]	@ (800a024 <_strtod_l+0xafc>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	4630      	mov	r0, r6
 8009e98:	4639      	mov	r1, r7
 8009e9a:	f7f6 fe27 	bl	8000aec <__aeabi_dcmplt>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d159      	bne.n	8009f56 <_strtod_l+0xa2e>
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4b60      	ldr	r3, [pc, #384]	@ (800a028 <_strtod_l+0xb00>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f7f6 fbad 	bl	8000608 <__aeabi_dmul>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460f      	mov	r7, r1
 8009eb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009eb6:	9606      	str	r6, [sp, #24]
 8009eb8:	9307      	str	r3, [sp, #28]
 8009eba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ebe:	4d57      	ldr	r5, [pc, #348]	@ (800a01c <_strtod_l+0xaf4>)
 8009ec0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ec6:	401d      	ands	r5, r3
 8009ec8:	4b58      	ldr	r3, [pc, #352]	@ (800a02c <_strtod_l+0xb04>)
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	f040 80b2 	bne.w	800a034 <_strtod_l+0xb0c>
 8009ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009ed6:	ec4b ab10 	vmov	d0, sl, fp
 8009eda:	f7ff f9c9 	bl	8009270 <__ulp>
 8009ede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ee2:	ec51 0b10 	vmov	r0, r1, d0
 8009ee6:	f7f6 fb8f 	bl	8000608 <__aeabi_dmul>
 8009eea:	4652      	mov	r2, sl
 8009eec:	465b      	mov	r3, fp
 8009eee:	f7f6 f9d5 	bl	800029c <__adddf3>
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4949      	ldr	r1, [pc, #292]	@ (800a01c <_strtod_l+0xaf4>)
 8009ef6:	4a4e      	ldr	r2, [pc, #312]	@ (800a030 <_strtod_l+0xb08>)
 8009ef8:	4019      	ands	r1, r3
 8009efa:	4291      	cmp	r1, r2
 8009efc:	4682      	mov	sl, r0
 8009efe:	d942      	bls.n	8009f86 <_strtod_l+0xa5e>
 8009f00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f02:	4b47      	ldr	r3, [pc, #284]	@ (800a020 <_strtod_l+0xaf8>)
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d103      	bne.n	8009f10 <_strtod_l+0x9e8>
 8009f08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	f43f ad2f 	beq.w	800996e <_strtod_l+0x446>
 8009f10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a020 <_strtod_l+0xaf8>
 8009f14:	f04f 3aff 	mov.w	sl, #4294967295
 8009f18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f1a:	9805      	ldr	r0, [sp, #20]
 8009f1c:	f7fe fe7c 	bl	8008c18 <_Bfree>
 8009f20:	9805      	ldr	r0, [sp, #20]
 8009f22:	4649      	mov	r1, r9
 8009f24:	f7fe fe78 	bl	8008c18 <_Bfree>
 8009f28:	9805      	ldr	r0, [sp, #20]
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	f7fe fe74 	bl	8008c18 <_Bfree>
 8009f30:	9805      	ldr	r0, [sp, #20]
 8009f32:	4621      	mov	r1, r4
 8009f34:	f7fe fe70 	bl	8008c18 <_Bfree>
 8009f38:	e619      	b.n	8009b6e <_strtod_l+0x646>
 8009f3a:	f1ba 0f01 	cmp.w	sl, #1
 8009f3e:	d103      	bne.n	8009f48 <_strtod_l+0xa20>
 8009f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f43f ada6 	beq.w	8009a94 <_strtod_l+0x56c>
 8009f48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ff8 <_strtod_l+0xad0>
 8009f4c:	4f35      	ldr	r7, [pc, #212]	@ (800a024 <_strtod_l+0xafc>)
 8009f4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f52:	2600      	movs	r6, #0
 8009f54:	e7b1      	b.n	8009eba <_strtod_l+0x992>
 8009f56:	4f34      	ldr	r7, [pc, #208]	@ (800a028 <_strtod_l+0xb00>)
 8009f58:	2600      	movs	r6, #0
 8009f5a:	e7aa      	b.n	8009eb2 <_strtod_l+0x98a>
 8009f5c:	4b32      	ldr	r3, [pc, #200]	@ (800a028 <_strtod_l+0xb00>)
 8009f5e:	4630      	mov	r0, r6
 8009f60:	4639      	mov	r1, r7
 8009f62:	2200      	movs	r2, #0
 8009f64:	f7f6 fb50 	bl	8000608 <__aeabi_dmul>
 8009f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d09f      	beq.n	8009eb2 <_strtod_l+0x98a>
 8009f72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f76:	e7a0      	b.n	8009eba <_strtod_l+0x992>
 8009f78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a000 <_strtod_l+0xad8>
 8009f7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f80:	ec57 6b17 	vmov	r6, r7, d7
 8009f84:	e799      	b.n	8009eba <_strtod_l+0x992>
 8009f86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1c1      	bne.n	8009f18 <_strtod_l+0x9f0>
 8009f94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f98:	0d1b      	lsrs	r3, r3, #20
 8009f9a:	051b      	lsls	r3, r3, #20
 8009f9c:	429d      	cmp	r5, r3
 8009f9e:	d1bb      	bne.n	8009f18 <_strtod_l+0x9f0>
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	f7f6 fee0 	bl	8000d68 <__aeabi_d2lz>
 8009fa8:	f7f6 fb00 	bl	80005ac <__aeabi_l2d>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	f7f6 f970 	bl	8000298 <__aeabi_dsub>
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4602      	mov	r2, r0
 8009fbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009fc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fc6:	ea46 060a 	orr.w	r6, r6, sl
 8009fca:	431e      	orrs	r6, r3
 8009fcc:	d06f      	beq.n	800a0ae <_strtod_l+0xb86>
 8009fce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a008 <_strtod_l+0xae0>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 fd8a 	bl	8000aec <__aeabi_dcmplt>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f47f acd3 	bne.w	8009984 <_strtod_l+0x45c>
 8009fde:	a30c      	add	r3, pc, #48	@ (adr r3, 800a010 <_strtod_l+0xae8>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fe8:	f7f6 fd9e 	bl	8000b28 <__aeabi_dcmpgt>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d093      	beq.n	8009f18 <_strtod_l+0x9f0>
 8009ff0:	e4c8      	b.n	8009984 <_strtod_l+0x45c>
 8009ff2:	bf00      	nop
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	00000000 	.word	0x00000000
 8009ffc:	bff00000 	.word	0xbff00000
 800a000:	00000000 	.word	0x00000000
 800a004:	3ff00000 	.word	0x3ff00000
 800a008:	94a03595 	.word	0x94a03595
 800a00c:	3fdfffff 	.word	0x3fdfffff
 800a010:	35afe535 	.word	0x35afe535
 800a014:	3fe00000 	.word	0x3fe00000
 800a018:	000fffff 	.word	0x000fffff
 800a01c:	7ff00000 	.word	0x7ff00000
 800a020:	7fefffff 	.word	0x7fefffff
 800a024:	3ff00000 	.word	0x3ff00000
 800a028:	3fe00000 	.word	0x3fe00000
 800a02c:	7fe00000 	.word	0x7fe00000
 800a030:	7c9fffff 	.word	0x7c9fffff
 800a034:	9b08      	ldr	r3, [sp, #32]
 800a036:	b323      	cbz	r3, 800a082 <_strtod_l+0xb5a>
 800a038:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a03c:	d821      	bhi.n	800a082 <_strtod_l+0xb5a>
 800a03e:	a328      	add	r3, pc, #160	@ (adr r3, 800a0e0 <_strtod_l+0xbb8>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 fd5a 	bl	8000b00 <__aeabi_dcmple>
 800a04c:	b1a0      	cbz	r0, 800a078 <_strtod_l+0xb50>
 800a04e:	4639      	mov	r1, r7
 800a050:	4630      	mov	r0, r6
 800a052:	f7f6 fdb1 	bl	8000bb8 <__aeabi_d2uiz>
 800a056:	2801      	cmp	r0, #1
 800a058:	bf38      	it	cc
 800a05a:	2001      	movcc	r0, #1
 800a05c:	f7f6 fa5a 	bl	8000514 <__aeabi_ui2d>
 800a060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a062:	4606      	mov	r6, r0
 800a064:	460f      	mov	r7, r1
 800a066:	b9fb      	cbnz	r3, 800a0a8 <_strtod_l+0xb80>
 800a068:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a06c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a06e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a070:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a074:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a078:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a07a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a07e:	1b5b      	subs	r3, r3, r5
 800a080:	9311      	str	r3, [sp, #68]	@ 0x44
 800a082:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a086:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a08a:	f7ff f8f1 	bl	8009270 <__ulp>
 800a08e:	4650      	mov	r0, sl
 800a090:	ec53 2b10 	vmov	r2, r3, d0
 800a094:	4659      	mov	r1, fp
 800a096:	f7f6 fab7 	bl	8000608 <__aeabi_dmul>
 800a09a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a09e:	f7f6 f8fd 	bl	800029c <__adddf3>
 800a0a2:	4682      	mov	sl, r0
 800a0a4:	468b      	mov	fp, r1
 800a0a6:	e770      	b.n	8009f8a <_strtod_l+0xa62>
 800a0a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0ac:	e7e0      	b.n	800a070 <_strtod_l+0xb48>
 800a0ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800a0e8 <_strtod_l+0xbc0>)
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	f7f6 fd1a 	bl	8000aec <__aeabi_dcmplt>
 800a0b8:	e798      	b.n	8009fec <_strtod_l+0xac4>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a0c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	f7ff ba6d 	b.w	80095a2 <_strtod_l+0x7a>
 800a0c8:	2a65      	cmp	r2, #101	@ 0x65
 800a0ca:	f43f ab68 	beq.w	800979e <_strtod_l+0x276>
 800a0ce:	2a45      	cmp	r2, #69	@ 0x45
 800a0d0:	f43f ab65 	beq.w	800979e <_strtod_l+0x276>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f7ff bba0 	b.w	800981a <_strtod_l+0x2f2>
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	ffc00000 	.word	0xffc00000
 800a0e4:	41dfffff 	.word	0x41dfffff
 800a0e8:	94a03595 	.word	0x94a03595
 800a0ec:	3fcfffff 	.word	0x3fcfffff

0800a0f0 <_strtod_r>:
 800a0f0:	4b01      	ldr	r3, [pc, #4]	@ (800a0f8 <_strtod_r+0x8>)
 800a0f2:	f7ff ba19 	b.w	8009528 <_strtod_l>
 800a0f6:	bf00      	nop
 800a0f8:	20000068 	.word	0x20000068

0800a0fc <__ssputs_r>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	688e      	ldr	r6, [r1, #8]
 800a102:	461f      	mov	r7, r3
 800a104:	42be      	cmp	r6, r7
 800a106:	680b      	ldr	r3, [r1, #0]
 800a108:	4682      	mov	sl, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	4690      	mov	r8, r2
 800a10e:	d82d      	bhi.n	800a16c <__ssputs_r+0x70>
 800a110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a114:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a118:	d026      	beq.n	800a168 <__ssputs_r+0x6c>
 800a11a:	6965      	ldr	r5, [r4, #20]
 800a11c:	6909      	ldr	r1, [r1, #16]
 800a11e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a122:	eba3 0901 	sub.w	r9, r3, r1
 800a126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a12a:	1c7b      	adds	r3, r7, #1
 800a12c:	444b      	add	r3, r9
 800a12e:	106d      	asrs	r5, r5, #1
 800a130:	429d      	cmp	r5, r3
 800a132:	bf38      	it	cc
 800a134:	461d      	movcc	r5, r3
 800a136:	0553      	lsls	r3, r2, #21
 800a138:	d527      	bpl.n	800a18a <__ssputs_r+0x8e>
 800a13a:	4629      	mov	r1, r5
 800a13c:	f7fe fca0 	bl	8008a80 <_malloc_r>
 800a140:	4606      	mov	r6, r0
 800a142:	b360      	cbz	r0, 800a19e <__ssputs_r+0xa2>
 800a144:	6921      	ldr	r1, [r4, #16]
 800a146:	464a      	mov	r2, r9
 800a148:	f000 fbde 	bl	800a908 <memcpy>
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a156:	81a3      	strh	r3, [r4, #12]
 800a158:	6126      	str	r6, [r4, #16]
 800a15a:	6165      	str	r5, [r4, #20]
 800a15c:	444e      	add	r6, r9
 800a15e:	eba5 0509 	sub.w	r5, r5, r9
 800a162:	6026      	str	r6, [r4, #0]
 800a164:	60a5      	str	r5, [r4, #8]
 800a166:	463e      	mov	r6, r7
 800a168:	42be      	cmp	r6, r7
 800a16a:	d900      	bls.n	800a16e <__ssputs_r+0x72>
 800a16c:	463e      	mov	r6, r7
 800a16e:	6820      	ldr	r0, [r4, #0]
 800a170:	4632      	mov	r2, r6
 800a172:	4641      	mov	r1, r8
 800a174:	f000 fb6a 	bl	800a84c <memmove>
 800a178:	68a3      	ldr	r3, [r4, #8]
 800a17a:	1b9b      	subs	r3, r3, r6
 800a17c:	60a3      	str	r3, [r4, #8]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	4433      	add	r3, r6
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	2000      	movs	r0, #0
 800a186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18a:	462a      	mov	r2, r5
 800a18c:	f000 ff51 	bl	800b032 <_realloc_r>
 800a190:	4606      	mov	r6, r0
 800a192:	2800      	cmp	r0, #0
 800a194:	d1e0      	bne.n	800a158 <__ssputs_r+0x5c>
 800a196:	6921      	ldr	r1, [r4, #16]
 800a198:	4650      	mov	r0, sl
 800a19a:	f7fe fbfd 	bl	8008998 <_free_r>
 800a19e:	230c      	movs	r3, #12
 800a1a0:	f8ca 3000 	str.w	r3, [sl]
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	e7e9      	b.n	800a186 <__ssputs_r+0x8a>
	...

0800a1b4 <_svfiprintf_r>:
 800a1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	4698      	mov	r8, r3
 800a1ba:	898b      	ldrh	r3, [r1, #12]
 800a1bc:	061b      	lsls	r3, r3, #24
 800a1be:	b09d      	sub	sp, #116	@ 0x74
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	460d      	mov	r5, r1
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	d510      	bpl.n	800a1ea <_svfiprintf_r+0x36>
 800a1c8:	690b      	ldr	r3, [r1, #16]
 800a1ca:	b973      	cbnz	r3, 800a1ea <_svfiprintf_r+0x36>
 800a1cc:	2140      	movs	r1, #64	@ 0x40
 800a1ce:	f7fe fc57 	bl	8008a80 <_malloc_r>
 800a1d2:	6028      	str	r0, [r5, #0]
 800a1d4:	6128      	str	r0, [r5, #16]
 800a1d6:	b930      	cbnz	r0, 800a1e6 <_svfiprintf_r+0x32>
 800a1d8:	230c      	movs	r3, #12
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e0:	b01d      	add	sp, #116	@ 0x74
 800a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e6:	2340      	movs	r3, #64	@ 0x40
 800a1e8:	616b      	str	r3, [r5, #20]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ee:	2320      	movs	r3, #32
 800a1f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f8:	2330      	movs	r3, #48	@ 0x30
 800a1fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a398 <_svfiprintf_r+0x1e4>
 800a1fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a202:	f04f 0901 	mov.w	r9, #1
 800a206:	4623      	mov	r3, r4
 800a208:	469a      	mov	sl, r3
 800a20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20e:	b10a      	cbz	r2, 800a214 <_svfiprintf_r+0x60>
 800a210:	2a25      	cmp	r2, #37	@ 0x25
 800a212:	d1f9      	bne.n	800a208 <_svfiprintf_r+0x54>
 800a214:	ebba 0b04 	subs.w	fp, sl, r4
 800a218:	d00b      	beq.n	800a232 <_svfiprintf_r+0x7e>
 800a21a:	465b      	mov	r3, fp
 800a21c:	4622      	mov	r2, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	4638      	mov	r0, r7
 800a222:	f7ff ff6b 	bl	800a0fc <__ssputs_r>
 800a226:	3001      	adds	r0, #1
 800a228:	f000 80a7 	beq.w	800a37a <_svfiprintf_r+0x1c6>
 800a22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a22e:	445a      	add	r2, fp
 800a230:	9209      	str	r2, [sp, #36]	@ 0x24
 800a232:	f89a 3000 	ldrb.w	r3, [sl]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 809f 	beq.w	800a37a <_svfiprintf_r+0x1c6>
 800a23c:	2300      	movs	r3, #0
 800a23e:	f04f 32ff 	mov.w	r2, #4294967295
 800a242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a246:	f10a 0a01 	add.w	sl, sl, #1
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	9307      	str	r3, [sp, #28]
 800a24e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a252:	931a      	str	r3, [sp, #104]	@ 0x68
 800a254:	4654      	mov	r4, sl
 800a256:	2205      	movs	r2, #5
 800a258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25c:	484e      	ldr	r0, [pc, #312]	@ (800a398 <_svfiprintf_r+0x1e4>)
 800a25e:	f7f5 ffbf 	bl	80001e0 <memchr>
 800a262:	9a04      	ldr	r2, [sp, #16]
 800a264:	b9d8      	cbnz	r0, 800a29e <_svfiprintf_r+0xea>
 800a266:	06d0      	lsls	r0, r2, #27
 800a268:	bf44      	itt	mi
 800a26a:	2320      	movmi	r3, #32
 800a26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a270:	0711      	lsls	r1, r2, #28
 800a272:	bf44      	itt	mi
 800a274:	232b      	movmi	r3, #43	@ 0x2b
 800a276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a27a:	f89a 3000 	ldrb.w	r3, [sl]
 800a27e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a280:	d015      	beq.n	800a2ae <_svfiprintf_r+0xfa>
 800a282:	9a07      	ldr	r2, [sp, #28]
 800a284:	4654      	mov	r4, sl
 800a286:	2000      	movs	r0, #0
 800a288:	f04f 0c0a 	mov.w	ip, #10
 800a28c:	4621      	mov	r1, r4
 800a28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a292:	3b30      	subs	r3, #48	@ 0x30
 800a294:	2b09      	cmp	r3, #9
 800a296:	d94b      	bls.n	800a330 <_svfiprintf_r+0x17c>
 800a298:	b1b0      	cbz	r0, 800a2c8 <_svfiprintf_r+0x114>
 800a29a:	9207      	str	r2, [sp, #28]
 800a29c:	e014      	b.n	800a2c8 <_svfiprintf_r+0x114>
 800a29e:	eba0 0308 	sub.w	r3, r0, r8
 800a2a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	46a2      	mov	sl, r4
 800a2ac:	e7d2      	b.n	800a254 <_svfiprintf_r+0xa0>
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	1d19      	adds	r1, r3, #4
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	9103      	str	r1, [sp, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfbb      	ittet	lt
 800a2ba:	425b      	neglt	r3, r3
 800a2bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c0:	9307      	strge	r3, [sp, #28]
 800a2c2:	9307      	strlt	r3, [sp, #28]
 800a2c4:	bfb8      	it	lt
 800a2c6:	9204      	strlt	r2, [sp, #16]
 800a2c8:	7823      	ldrb	r3, [r4, #0]
 800a2ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2cc:	d10a      	bne.n	800a2e4 <_svfiprintf_r+0x130>
 800a2ce:	7863      	ldrb	r3, [r4, #1]
 800a2d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2d2:	d132      	bne.n	800a33a <_svfiprintf_r+0x186>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	1d1a      	adds	r2, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	9203      	str	r2, [sp, #12]
 800a2dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2e0:	3402      	adds	r4, #2
 800a2e2:	9305      	str	r3, [sp, #20]
 800a2e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3a8 <_svfiprintf_r+0x1f4>
 800a2e8:	7821      	ldrb	r1, [r4, #0]
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	f7f5 ff77 	bl	80001e0 <memchr>
 800a2f2:	b138      	cbz	r0, 800a304 <_svfiprintf_r+0x150>
 800a2f4:	9b04      	ldr	r3, [sp, #16]
 800a2f6:	eba0 000a 	sub.w	r0, r0, sl
 800a2fa:	2240      	movs	r2, #64	@ 0x40
 800a2fc:	4082      	lsls	r2, r0
 800a2fe:	4313      	orrs	r3, r2
 800a300:	3401      	adds	r4, #1
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a308:	4824      	ldr	r0, [pc, #144]	@ (800a39c <_svfiprintf_r+0x1e8>)
 800a30a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a30e:	2206      	movs	r2, #6
 800a310:	f7f5 ff66 	bl	80001e0 <memchr>
 800a314:	2800      	cmp	r0, #0
 800a316:	d036      	beq.n	800a386 <_svfiprintf_r+0x1d2>
 800a318:	4b21      	ldr	r3, [pc, #132]	@ (800a3a0 <_svfiprintf_r+0x1ec>)
 800a31a:	bb1b      	cbnz	r3, 800a364 <_svfiprintf_r+0x1b0>
 800a31c:	9b03      	ldr	r3, [sp, #12]
 800a31e:	3307      	adds	r3, #7
 800a320:	f023 0307 	bic.w	r3, r3, #7
 800a324:	3308      	adds	r3, #8
 800a326:	9303      	str	r3, [sp, #12]
 800a328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32a:	4433      	add	r3, r6
 800a32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a32e:	e76a      	b.n	800a206 <_svfiprintf_r+0x52>
 800a330:	fb0c 3202 	mla	r2, ip, r2, r3
 800a334:	460c      	mov	r4, r1
 800a336:	2001      	movs	r0, #1
 800a338:	e7a8      	b.n	800a28c <_svfiprintf_r+0xd8>
 800a33a:	2300      	movs	r3, #0
 800a33c:	3401      	adds	r4, #1
 800a33e:	9305      	str	r3, [sp, #20]
 800a340:	4619      	mov	r1, r3
 800a342:	f04f 0c0a 	mov.w	ip, #10
 800a346:	4620      	mov	r0, r4
 800a348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34c:	3a30      	subs	r2, #48	@ 0x30
 800a34e:	2a09      	cmp	r2, #9
 800a350:	d903      	bls.n	800a35a <_svfiprintf_r+0x1a6>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0c6      	beq.n	800a2e4 <_svfiprintf_r+0x130>
 800a356:	9105      	str	r1, [sp, #20]
 800a358:	e7c4      	b.n	800a2e4 <_svfiprintf_r+0x130>
 800a35a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a35e:	4604      	mov	r4, r0
 800a360:	2301      	movs	r3, #1
 800a362:	e7f0      	b.n	800a346 <_svfiprintf_r+0x192>
 800a364:	ab03      	add	r3, sp, #12
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	462a      	mov	r2, r5
 800a36a:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a4 <_svfiprintf_r+0x1f0>)
 800a36c:	a904      	add	r1, sp, #16
 800a36e:	4638      	mov	r0, r7
 800a370:	f7fc fc08 	bl	8006b84 <_printf_float>
 800a374:	1c42      	adds	r2, r0, #1
 800a376:	4606      	mov	r6, r0
 800a378:	d1d6      	bne.n	800a328 <_svfiprintf_r+0x174>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	065b      	lsls	r3, r3, #25
 800a37e:	f53f af2d 	bmi.w	800a1dc <_svfiprintf_r+0x28>
 800a382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a384:	e72c      	b.n	800a1e0 <_svfiprintf_r+0x2c>
 800a386:	ab03      	add	r3, sp, #12
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	462a      	mov	r2, r5
 800a38c:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <_svfiprintf_r+0x1f0>)
 800a38e:	a904      	add	r1, sp, #16
 800a390:	4638      	mov	r0, r7
 800a392:	f7fc fe8f 	bl	80070b4 <_printf_i>
 800a396:	e7ed      	b.n	800a374 <_svfiprintf_r+0x1c0>
 800a398:	0800b4de 	.word	0x0800b4de
 800a39c:	0800b4e8 	.word	0x0800b4e8
 800a3a0:	08006b85 	.word	0x08006b85
 800a3a4:	0800a0fd 	.word	0x0800a0fd
 800a3a8:	0800b4e4 	.word	0x0800b4e4

0800a3ac <__sfputc_r>:
 800a3ac:	6893      	ldr	r3, [r2, #8]
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	b410      	push	{r4}
 800a3b4:	6093      	str	r3, [r2, #8]
 800a3b6:	da08      	bge.n	800a3ca <__sfputc_r+0x1e>
 800a3b8:	6994      	ldr	r4, [r2, #24]
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	db01      	blt.n	800a3c2 <__sfputc_r+0x16>
 800a3be:	290a      	cmp	r1, #10
 800a3c0:	d103      	bne.n	800a3ca <__sfputc_r+0x1e>
 800a3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3c6:	f7fd bb75 	b.w	8007ab4 <__swbuf_r>
 800a3ca:	6813      	ldr	r3, [r2, #0]
 800a3cc:	1c58      	adds	r0, r3, #1
 800a3ce:	6010      	str	r0, [r2, #0]
 800a3d0:	7019      	strb	r1, [r3, #0]
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <__sfputs_r>:
 800a3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3dc:	4606      	mov	r6, r0
 800a3de:	460f      	mov	r7, r1
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	18d5      	adds	r5, r2, r3
 800a3e4:	42ac      	cmp	r4, r5
 800a3e6:	d101      	bne.n	800a3ec <__sfputs_r+0x12>
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	e007      	b.n	800a3fc <__sfputs_r+0x22>
 800a3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f0:	463a      	mov	r2, r7
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7ff ffda 	bl	800a3ac <__sfputc_r>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d1f3      	bne.n	800a3e4 <__sfputs_r+0xa>
 800a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a400 <_vfiprintf_r>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	460d      	mov	r5, r1
 800a406:	b09d      	sub	sp, #116	@ 0x74
 800a408:	4614      	mov	r4, r2
 800a40a:	4698      	mov	r8, r3
 800a40c:	4606      	mov	r6, r0
 800a40e:	b118      	cbz	r0, 800a418 <_vfiprintf_r+0x18>
 800a410:	6a03      	ldr	r3, [r0, #32]
 800a412:	b90b      	cbnz	r3, 800a418 <_vfiprintf_r+0x18>
 800a414:	f7fd fa06 	bl	8007824 <__sinit>
 800a418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a41a:	07d9      	lsls	r1, r3, #31
 800a41c:	d405      	bmi.n	800a42a <_vfiprintf_r+0x2a>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	059a      	lsls	r2, r3, #22
 800a422:	d402      	bmi.n	800a42a <_vfiprintf_r+0x2a>
 800a424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a426:	f7fd fc56 	bl	8007cd6 <__retarget_lock_acquire_recursive>
 800a42a:	89ab      	ldrh	r3, [r5, #12]
 800a42c:	071b      	lsls	r3, r3, #28
 800a42e:	d501      	bpl.n	800a434 <_vfiprintf_r+0x34>
 800a430:	692b      	ldr	r3, [r5, #16]
 800a432:	b99b      	cbnz	r3, 800a45c <_vfiprintf_r+0x5c>
 800a434:	4629      	mov	r1, r5
 800a436:	4630      	mov	r0, r6
 800a438:	f7fd fb7a 	bl	8007b30 <__swsetup_r>
 800a43c:	b170      	cbz	r0, 800a45c <_vfiprintf_r+0x5c>
 800a43e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a440:	07dc      	lsls	r4, r3, #31
 800a442:	d504      	bpl.n	800a44e <_vfiprintf_r+0x4e>
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	b01d      	add	sp, #116	@ 0x74
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	89ab      	ldrh	r3, [r5, #12]
 800a450:	0598      	lsls	r0, r3, #22
 800a452:	d4f7      	bmi.n	800a444 <_vfiprintf_r+0x44>
 800a454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a456:	f7fd fc3f 	bl	8007cd8 <__retarget_lock_release_recursive>
 800a45a:	e7f3      	b.n	800a444 <_vfiprintf_r+0x44>
 800a45c:	2300      	movs	r3, #0
 800a45e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a460:	2320      	movs	r3, #32
 800a462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a466:	f8cd 800c 	str.w	r8, [sp, #12]
 800a46a:	2330      	movs	r3, #48	@ 0x30
 800a46c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a61c <_vfiprintf_r+0x21c>
 800a470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a474:	f04f 0901 	mov.w	r9, #1
 800a478:	4623      	mov	r3, r4
 800a47a:	469a      	mov	sl, r3
 800a47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a480:	b10a      	cbz	r2, 800a486 <_vfiprintf_r+0x86>
 800a482:	2a25      	cmp	r2, #37	@ 0x25
 800a484:	d1f9      	bne.n	800a47a <_vfiprintf_r+0x7a>
 800a486:	ebba 0b04 	subs.w	fp, sl, r4
 800a48a:	d00b      	beq.n	800a4a4 <_vfiprintf_r+0xa4>
 800a48c:	465b      	mov	r3, fp
 800a48e:	4622      	mov	r2, r4
 800a490:	4629      	mov	r1, r5
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff ffa1 	bl	800a3da <__sfputs_r>
 800a498:	3001      	adds	r0, #1
 800a49a:	f000 80a7 	beq.w	800a5ec <_vfiprintf_r+0x1ec>
 800a49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4a0:	445a      	add	r2, fp
 800a4a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 809f 	beq.w	800a5ec <_vfiprintf_r+0x1ec>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b8:	f10a 0a01 	add.w	sl, sl, #1
 800a4bc:	9304      	str	r3, [sp, #16]
 800a4be:	9307      	str	r3, [sp, #28]
 800a4c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4c6:	4654      	mov	r4, sl
 800a4c8:	2205      	movs	r2, #5
 800a4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ce:	4853      	ldr	r0, [pc, #332]	@ (800a61c <_vfiprintf_r+0x21c>)
 800a4d0:	f7f5 fe86 	bl	80001e0 <memchr>
 800a4d4:	9a04      	ldr	r2, [sp, #16]
 800a4d6:	b9d8      	cbnz	r0, 800a510 <_vfiprintf_r+0x110>
 800a4d8:	06d1      	lsls	r1, r2, #27
 800a4da:	bf44      	itt	mi
 800a4dc:	2320      	movmi	r3, #32
 800a4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4e2:	0713      	lsls	r3, r2, #28
 800a4e4:	bf44      	itt	mi
 800a4e6:	232b      	movmi	r3, #43	@ 0x2b
 800a4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4f2:	d015      	beq.n	800a520 <_vfiprintf_r+0x120>
 800a4f4:	9a07      	ldr	r2, [sp, #28]
 800a4f6:	4654      	mov	r4, sl
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	f04f 0c0a 	mov.w	ip, #10
 800a4fe:	4621      	mov	r1, r4
 800a500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a504:	3b30      	subs	r3, #48	@ 0x30
 800a506:	2b09      	cmp	r3, #9
 800a508:	d94b      	bls.n	800a5a2 <_vfiprintf_r+0x1a2>
 800a50a:	b1b0      	cbz	r0, 800a53a <_vfiprintf_r+0x13a>
 800a50c:	9207      	str	r2, [sp, #28]
 800a50e:	e014      	b.n	800a53a <_vfiprintf_r+0x13a>
 800a510:	eba0 0308 	sub.w	r3, r0, r8
 800a514:	fa09 f303 	lsl.w	r3, r9, r3
 800a518:	4313      	orrs	r3, r2
 800a51a:	9304      	str	r3, [sp, #16]
 800a51c:	46a2      	mov	sl, r4
 800a51e:	e7d2      	b.n	800a4c6 <_vfiprintf_r+0xc6>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	1d19      	adds	r1, r3, #4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	9103      	str	r1, [sp, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bfbb      	ittet	lt
 800a52c:	425b      	neglt	r3, r3
 800a52e:	f042 0202 	orrlt.w	r2, r2, #2
 800a532:	9307      	strge	r3, [sp, #28]
 800a534:	9307      	strlt	r3, [sp, #28]
 800a536:	bfb8      	it	lt
 800a538:	9204      	strlt	r2, [sp, #16]
 800a53a:	7823      	ldrb	r3, [r4, #0]
 800a53c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a53e:	d10a      	bne.n	800a556 <_vfiprintf_r+0x156>
 800a540:	7863      	ldrb	r3, [r4, #1]
 800a542:	2b2a      	cmp	r3, #42	@ 0x2a
 800a544:	d132      	bne.n	800a5ac <_vfiprintf_r+0x1ac>
 800a546:	9b03      	ldr	r3, [sp, #12]
 800a548:	1d1a      	adds	r2, r3, #4
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	9203      	str	r2, [sp, #12]
 800a54e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a552:	3402      	adds	r4, #2
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a62c <_vfiprintf_r+0x22c>
 800a55a:	7821      	ldrb	r1, [r4, #0]
 800a55c:	2203      	movs	r2, #3
 800a55e:	4650      	mov	r0, sl
 800a560:	f7f5 fe3e 	bl	80001e0 <memchr>
 800a564:	b138      	cbz	r0, 800a576 <_vfiprintf_r+0x176>
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	eba0 000a 	sub.w	r0, r0, sl
 800a56c:	2240      	movs	r2, #64	@ 0x40
 800a56e:	4082      	lsls	r2, r0
 800a570:	4313      	orrs	r3, r2
 800a572:	3401      	adds	r4, #1
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a57a:	4829      	ldr	r0, [pc, #164]	@ (800a620 <_vfiprintf_r+0x220>)
 800a57c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a580:	2206      	movs	r2, #6
 800a582:	f7f5 fe2d 	bl	80001e0 <memchr>
 800a586:	2800      	cmp	r0, #0
 800a588:	d03f      	beq.n	800a60a <_vfiprintf_r+0x20a>
 800a58a:	4b26      	ldr	r3, [pc, #152]	@ (800a624 <_vfiprintf_r+0x224>)
 800a58c:	bb1b      	cbnz	r3, 800a5d6 <_vfiprintf_r+0x1d6>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	3307      	adds	r3, #7
 800a592:	f023 0307 	bic.w	r3, r3, #7
 800a596:	3308      	adds	r3, #8
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a59c:	443b      	add	r3, r7
 800a59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5a0:	e76a      	b.n	800a478 <_vfiprintf_r+0x78>
 800a5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	e7a8      	b.n	800a4fe <_vfiprintf_r+0xfe>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	3401      	adds	r4, #1
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f04f 0c0a 	mov.w	ip, #10
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5be:	3a30      	subs	r2, #48	@ 0x30
 800a5c0:	2a09      	cmp	r2, #9
 800a5c2:	d903      	bls.n	800a5cc <_vfiprintf_r+0x1cc>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0c6      	beq.n	800a556 <_vfiprintf_r+0x156>
 800a5c8:	9105      	str	r1, [sp, #20]
 800a5ca:	e7c4      	b.n	800a556 <_vfiprintf_r+0x156>
 800a5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e7f0      	b.n	800a5b8 <_vfiprintf_r+0x1b8>
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	462a      	mov	r2, r5
 800a5dc:	4b12      	ldr	r3, [pc, #72]	@ (800a628 <_vfiprintf_r+0x228>)
 800a5de:	a904      	add	r1, sp, #16
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7fc facf 	bl	8006b84 <_printf_float>
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	1c78      	adds	r0, r7, #1
 800a5ea:	d1d6      	bne.n	800a59a <_vfiprintf_r+0x19a>
 800a5ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5ee:	07d9      	lsls	r1, r3, #31
 800a5f0:	d405      	bmi.n	800a5fe <_vfiprintf_r+0x1fe>
 800a5f2:	89ab      	ldrh	r3, [r5, #12]
 800a5f4:	059a      	lsls	r2, r3, #22
 800a5f6:	d402      	bmi.n	800a5fe <_vfiprintf_r+0x1fe>
 800a5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5fa:	f7fd fb6d 	bl	8007cd8 <__retarget_lock_release_recursive>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	065b      	lsls	r3, r3, #25
 800a602:	f53f af1f 	bmi.w	800a444 <_vfiprintf_r+0x44>
 800a606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a608:	e71e      	b.n	800a448 <_vfiprintf_r+0x48>
 800a60a:	ab03      	add	r3, sp, #12
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	462a      	mov	r2, r5
 800a610:	4b05      	ldr	r3, [pc, #20]	@ (800a628 <_vfiprintf_r+0x228>)
 800a612:	a904      	add	r1, sp, #16
 800a614:	4630      	mov	r0, r6
 800a616:	f7fc fd4d 	bl	80070b4 <_printf_i>
 800a61a:	e7e4      	b.n	800a5e6 <_vfiprintf_r+0x1e6>
 800a61c:	0800b4de 	.word	0x0800b4de
 800a620:	0800b4e8 	.word	0x0800b4e8
 800a624:	08006b85 	.word	0x08006b85
 800a628:	0800a3db 	.word	0x0800a3db
 800a62c:	0800b4e4 	.word	0x0800b4e4

0800a630 <__sflush_r>:
 800a630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a638:	0716      	lsls	r6, r2, #28
 800a63a:	4605      	mov	r5, r0
 800a63c:	460c      	mov	r4, r1
 800a63e:	d454      	bmi.n	800a6ea <__sflush_r+0xba>
 800a640:	684b      	ldr	r3, [r1, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	dc02      	bgt.n	800a64c <__sflush_r+0x1c>
 800a646:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dd48      	ble.n	800a6de <__sflush_r+0xae>
 800a64c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a64e:	2e00      	cmp	r6, #0
 800a650:	d045      	beq.n	800a6de <__sflush_r+0xae>
 800a652:	2300      	movs	r3, #0
 800a654:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a658:	682f      	ldr	r7, [r5, #0]
 800a65a:	6a21      	ldr	r1, [r4, #32]
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	d030      	beq.n	800a6c2 <__sflush_r+0x92>
 800a660:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	0759      	lsls	r1, r3, #29
 800a666:	d505      	bpl.n	800a674 <__sflush_r+0x44>
 800a668:	6863      	ldr	r3, [r4, #4]
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a66e:	b10b      	cbz	r3, 800a674 <__sflush_r+0x44>
 800a670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a672:	1ad2      	subs	r2, r2, r3
 800a674:	2300      	movs	r3, #0
 800a676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a678:	6a21      	ldr	r1, [r4, #32]
 800a67a:	4628      	mov	r0, r5
 800a67c:	47b0      	blx	r6
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	d106      	bne.n	800a692 <__sflush_r+0x62>
 800a684:	6829      	ldr	r1, [r5, #0]
 800a686:	291d      	cmp	r1, #29
 800a688:	d82b      	bhi.n	800a6e2 <__sflush_r+0xb2>
 800a68a:	4a2a      	ldr	r2, [pc, #168]	@ (800a734 <__sflush_r+0x104>)
 800a68c:	40ca      	lsrs	r2, r1
 800a68e:	07d6      	lsls	r6, r2, #31
 800a690:	d527      	bpl.n	800a6e2 <__sflush_r+0xb2>
 800a692:	2200      	movs	r2, #0
 800a694:	6062      	str	r2, [r4, #4]
 800a696:	04d9      	lsls	r1, r3, #19
 800a698:	6922      	ldr	r2, [r4, #16]
 800a69a:	6022      	str	r2, [r4, #0]
 800a69c:	d504      	bpl.n	800a6a8 <__sflush_r+0x78>
 800a69e:	1c42      	adds	r2, r0, #1
 800a6a0:	d101      	bne.n	800a6a6 <__sflush_r+0x76>
 800a6a2:	682b      	ldr	r3, [r5, #0]
 800a6a4:	b903      	cbnz	r3, 800a6a8 <__sflush_r+0x78>
 800a6a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6aa:	602f      	str	r7, [r5, #0]
 800a6ac:	b1b9      	cbz	r1, 800a6de <__sflush_r+0xae>
 800a6ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	d002      	beq.n	800a6bc <__sflush_r+0x8c>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7fe f96e 	bl	8008998 <_free_r>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6c0:	e00d      	b.n	800a6de <__sflush_r+0xae>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b0      	blx	r6
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	1c50      	adds	r0, r2, #1
 800a6cc:	d1c9      	bne.n	800a662 <__sflush_r+0x32>
 800a6ce:	682b      	ldr	r3, [r5, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0c6      	beq.n	800a662 <__sflush_r+0x32>
 800a6d4:	2b1d      	cmp	r3, #29
 800a6d6:	d001      	beq.n	800a6dc <__sflush_r+0xac>
 800a6d8:	2b16      	cmp	r3, #22
 800a6da:	d11e      	bne.n	800a71a <__sflush_r+0xea>
 800a6dc:	602f      	str	r7, [r5, #0]
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e022      	b.n	800a728 <__sflush_r+0xf8>
 800a6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6e6:	b21b      	sxth	r3, r3
 800a6e8:	e01b      	b.n	800a722 <__sflush_r+0xf2>
 800a6ea:	690f      	ldr	r7, [r1, #16]
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	d0f6      	beq.n	800a6de <__sflush_r+0xae>
 800a6f0:	0793      	lsls	r3, r2, #30
 800a6f2:	680e      	ldr	r6, [r1, #0]
 800a6f4:	bf08      	it	eq
 800a6f6:	694b      	ldreq	r3, [r1, #20]
 800a6f8:	600f      	str	r7, [r1, #0]
 800a6fa:	bf18      	it	ne
 800a6fc:	2300      	movne	r3, #0
 800a6fe:	eba6 0807 	sub.w	r8, r6, r7
 800a702:	608b      	str	r3, [r1, #8]
 800a704:	f1b8 0f00 	cmp.w	r8, #0
 800a708:	dde9      	ble.n	800a6de <__sflush_r+0xae>
 800a70a:	6a21      	ldr	r1, [r4, #32]
 800a70c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a70e:	4643      	mov	r3, r8
 800a710:	463a      	mov	r2, r7
 800a712:	4628      	mov	r0, r5
 800a714:	47b0      	blx	r6
 800a716:	2800      	cmp	r0, #0
 800a718:	dc08      	bgt.n	800a72c <__sflush_r+0xfc>
 800a71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a722:	81a3      	strh	r3, [r4, #12]
 800a724:	f04f 30ff 	mov.w	r0, #4294967295
 800a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a72c:	4407      	add	r7, r0
 800a72e:	eba8 0800 	sub.w	r8, r8, r0
 800a732:	e7e7      	b.n	800a704 <__sflush_r+0xd4>
 800a734:	20400001 	.word	0x20400001

0800a738 <_fflush_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	690b      	ldr	r3, [r1, #16]
 800a73c:	4605      	mov	r5, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	b913      	cbnz	r3, 800a748 <_fflush_r+0x10>
 800a742:	2500      	movs	r5, #0
 800a744:	4628      	mov	r0, r5
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	b118      	cbz	r0, 800a752 <_fflush_r+0x1a>
 800a74a:	6a03      	ldr	r3, [r0, #32]
 800a74c:	b90b      	cbnz	r3, 800a752 <_fflush_r+0x1a>
 800a74e:	f7fd f869 	bl	8007824 <__sinit>
 800a752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d0f3      	beq.n	800a742 <_fflush_r+0xa>
 800a75a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a75c:	07d0      	lsls	r0, r2, #31
 800a75e:	d404      	bmi.n	800a76a <_fflush_r+0x32>
 800a760:	0599      	lsls	r1, r3, #22
 800a762:	d402      	bmi.n	800a76a <_fflush_r+0x32>
 800a764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a766:	f7fd fab6 	bl	8007cd6 <__retarget_lock_acquire_recursive>
 800a76a:	4628      	mov	r0, r5
 800a76c:	4621      	mov	r1, r4
 800a76e:	f7ff ff5f 	bl	800a630 <__sflush_r>
 800a772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a774:	07da      	lsls	r2, r3, #31
 800a776:	4605      	mov	r5, r0
 800a778:	d4e4      	bmi.n	800a744 <_fflush_r+0xc>
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	059b      	lsls	r3, r3, #22
 800a77e:	d4e1      	bmi.n	800a744 <_fflush_r+0xc>
 800a780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a782:	f7fd faa9 	bl	8007cd8 <__retarget_lock_release_recursive>
 800a786:	e7dd      	b.n	800a744 <_fflush_r+0xc>

0800a788 <__swhatbuf_r>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	460c      	mov	r4, r1
 800a78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a790:	2900      	cmp	r1, #0
 800a792:	b096      	sub	sp, #88	@ 0x58
 800a794:	4615      	mov	r5, r2
 800a796:	461e      	mov	r6, r3
 800a798:	da0d      	bge.n	800a7b6 <__swhatbuf_r+0x2e>
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7a0:	f04f 0100 	mov.w	r1, #0
 800a7a4:	bf14      	ite	ne
 800a7a6:	2340      	movne	r3, #64	@ 0x40
 800a7a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	6031      	str	r1, [r6, #0]
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	b016      	add	sp, #88	@ 0x58
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	466a      	mov	r2, sp
 800a7b8:	f000 f874 	bl	800a8a4 <_fstat_r>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	dbec      	blt.n	800a79a <__swhatbuf_r+0x12>
 800a7c0:	9901      	ldr	r1, [sp, #4]
 800a7c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7ca:	4259      	negs	r1, r3
 800a7cc:	4159      	adcs	r1, r3
 800a7ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7d2:	e7eb      	b.n	800a7ac <__swhatbuf_r+0x24>

0800a7d4 <__smakebuf_r>:
 800a7d4:	898b      	ldrh	r3, [r1, #12]
 800a7d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7d8:	079d      	lsls	r5, r3, #30
 800a7da:	4606      	mov	r6, r0
 800a7dc:	460c      	mov	r4, r1
 800a7de:	d507      	bpl.n	800a7f0 <__smakebuf_r+0x1c>
 800a7e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	6123      	str	r3, [r4, #16]
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	6163      	str	r3, [r4, #20]
 800a7ec:	b003      	add	sp, #12
 800a7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f0:	ab01      	add	r3, sp, #4
 800a7f2:	466a      	mov	r2, sp
 800a7f4:	f7ff ffc8 	bl	800a788 <__swhatbuf_r>
 800a7f8:	9f00      	ldr	r7, [sp, #0]
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7fe f93e 	bl	8008a80 <_malloc_r>
 800a804:	b948      	cbnz	r0, 800a81a <__smakebuf_r+0x46>
 800a806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a80a:	059a      	lsls	r2, r3, #22
 800a80c:	d4ee      	bmi.n	800a7ec <__smakebuf_r+0x18>
 800a80e:	f023 0303 	bic.w	r3, r3, #3
 800a812:	f043 0302 	orr.w	r3, r3, #2
 800a816:	81a3      	strh	r3, [r4, #12]
 800a818:	e7e2      	b.n	800a7e0 <__smakebuf_r+0xc>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	6020      	str	r0, [r4, #0]
 800a81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a822:	81a3      	strh	r3, [r4, #12]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a82a:	b15b      	cbz	r3, 800a844 <__smakebuf_r+0x70>
 800a82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a830:	4630      	mov	r0, r6
 800a832:	f000 f849 	bl	800a8c8 <_isatty_r>
 800a836:	b128      	cbz	r0, 800a844 <__smakebuf_r+0x70>
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	f023 0303 	bic.w	r3, r3, #3
 800a83e:	f043 0301 	orr.w	r3, r3, #1
 800a842:	81a3      	strh	r3, [r4, #12]
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	431d      	orrs	r5, r3
 800a848:	81a5      	strh	r5, [r4, #12]
 800a84a:	e7cf      	b.n	800a7ec <__smakebuf_r+0x18>

0800a84c <memmove>:
 800a84c:	4288      	cmp	r0, r1
 800a84e:	b510      	push	{r4, lr}
 800a850:	eb01 0402 	add.w	r4, r1, r2
 800a854:	d902      	bls.n	800a85c <memmove+0x10>
 800a856:	4284      	cmp	r4, r0
 800a858:	4623      	mov	r3, r4
 800a85a:	d807      	bhi.n	800a86c <memmove+0x20>
 800a85c:	1e43      	subs	r3, r0, #1
 800a85e:	42a1      	cmp	r1, r4
 800a860:	d008      	beq.n	800a874 <memmove+0x28>
 800a862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a86a:	e7f8      	b.n	800a85e <memmove+0x12>
 800a86c:	4402      	add	r2, r0
 800a86e:	4601      	mov	r1, r0
 800a870:	428a      	cmp	r2, r1
 800a872:	d100      	bne.n	800a876 <memmove+0x2a>
 800a874:	bd10      	pop	{r4, pc}
 800a876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a87e:	e7f7      	b.n	800a870 <memmove+0x24>

0800a880 <strncmp>:
 800a880:	b510      	push	{r4, lr}
 800a882:	b16a      	cbz	r2, 800a8a0 <strncmp+0x20>
 800a884:	3901      	subs	r1, #1
 800a886:	1884      	adds	r4, r0, r2
 800a888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a88c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a890:	429a      	cmp	r2, r3
 800a892:	d103      	bne.n	800a89c <strncmp+0x1c>
 800a894:	42a0      	cmp	r0, r4
 800a896:	d001      	beq.n	800a89c <strncmp+0x1c>
 800a898:	2a00      	cmp	r2, #0
 800a89a:	d1f5      	bne.n	800a888 <strncmp+0x8>
 800a89c:	1ad0      	subs	r0, r2, r3
 800a89e:	bd10      	pop	{r4, pc}
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	e7fc      	b.n	800a89e <strncmp+0x1e>

0800a8a4 <_fstat_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d07      	ldr	r5, [pc, #28]	@ (800a8c4 <_fstat_r+0x20>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	602b      	str	r3, [r5, #0]
 800a8b2:	f7f8 f885 	bl	80029c0 <_fstat>
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	d102      	bne.n	800a8c0 <_fstat_r+0x1c>
 800a8ba:	682b      	ldr	r3, [r5, #0]
 800a8bc:	b103      	cbz	r3, 800a8c0 <_fstat_r+0x1c>
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
 800a8c2:	bf00      	nop
 800a8c4:	2000047c 	.word	0x2000047c

0800a8c8 <_isatty_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4d06      	ldr	r5, [pc, #24]	@ (800a8e4 <_isatty_r+0x1c>)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	602b      	str	r3, [r5, #0]
 800a8d4:	f7f8 f884 	bl	80029e0 <_isatty>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_isatty_r+0x1a>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_isatty_r+0x1a>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	2000047c 	.word	0x2000047c

0800a8e8 <_sbrk_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4d06      	ldr	r5, [pc, #24]	@ (800a904 <_sbrk_r+0x1c>)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	f7f8 f88c 	bl	8002a10 <_sbrk>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_sbrk_r+0x1a>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_sbrk_r+0x1a>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	2000047c 	.word	0x2000047c

0800a908 <memcpy>:
 800a908:	440a      	add	r2, r1
 800a90a:	4291      	cmp	r1, r2
 800a90c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a910:	d100      	bne.n	800a914 <memcpy+0xc>
 800a912:	4770      	bx	lr
 800a914:	b510      	push	{r4, lr}
 800a916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a91a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a91e:	4291      	cmp	r1, r2
 800a920:	d1f9      	bne.n	800a916 <memcpy+0xe>
 800a922:	bd10      	pop	{r4, pc}
 800a924:	0000      	movs	r0, r0
	...

0800a928 <nan>:
 800a928:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a930 <nan+0x8>
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	00000000 	.word	0x00000000
 800a934:	7ff80000 	.word	0x7ff80000

0800a938 <__assert_func>:
 800a938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a93a:	4614      	mov	r4, r2
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b09      	ldr	r3, [pc, #36]	@ (800a964 <__assert_func+0x2c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4605      	mov	r5, r0
 800a944:	68d8      	ldr	r0, [r3, #12]
 800a946:	b14c      	cbz	r4, 800a95c <__assert_func+0x24>
 800a948:	4b07      	ldr	r3, [pc, #28]	@ (800a968 <__assert_func+0x30>)
 800a94a:	9100      	str	r1, [sp, #0]
 800a94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a950:	4906      	ldr	r1, [pc, #24]	@ (800a96c <__assert_func+0x34>)
 800a952:	462b      	mov	r3, r5
 800a954:	f000 fba8 	bl	800b0a8 <fiprintf>
 800a958:	f000 fbb8 	bl	800b0cc <abort>
 800a95c:	4b04      	ldr	r3, [pc, #16]	@ (800a970 <__assert_func+0x38>)
 800a95e:	461c      	mov	r4, r3
 800a960:	e7f3      	b.n	800a94a <__assert_func+0x12>
 800a962:	bf00      	nop
 800a964:	20000018 	.word	0x20000018
 800a968:	0800b4f7 	.word	0x0800b4f7
 800a96c:	0800b504 	.word	0x0800b504
 800a970:	0800b532 	.word	0x0800b532

0800a974 <_calloc_r>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	fba1 5402 	umull	r5, r4, r1, r2
 800a97a:	b934      	cbnz	r4, 800a98a <_calloc_r+0x16>
 800a97c:	4629      	mov	r1, r5
 800a97e:	f7fe f87f 	bl	8008a80 <_malloc_r>
 800a982:	4606      	mov	r6, r0
 800a984:	b928      	cbnz	r0, 800a992 <_calloc_r+0x1e>
 800a986:	4630      	mov	r0, r6
 800a988:	bd70      	pop	{r4, r5, r6, pc}
 800a98a:	220c      	movs	r2, #12
 800a98c:	6002      	str	r2, [r0, #0]
 800a98e:	2600      	movs	r6, #0
 800a990:	e7f9      	b.n	800a986 <_calloc_r+0x12>
 800a992:	462a      	mov	r2, r5
 800a994:	4621      	mov	r1, r4
 800a996:	f7fd f921 	bl	8007bdc <memset>
 800a99a:	e7f4      	b.n	800a986 <_calloc_r+0x12>

0800a99c <rshift>:
 800a99c:	6903      	ldr	r3, [r0, #16]
 800a99e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9aa:	f100 0414 	add.w	r4, r0, #20
 800a9ae:	dd45      	ble.n	800aa3c <rshift+0xa0>
 800a9b0:	f011 011f 	ands.w	r1, r1, #31
 800a9b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9bc:	d10c      	bne.n	800a9d8 <rshift+0x3c>
 800a9be:	f100 0710 	add.w	r7, r0, #16
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	42b1      	cmp	r1, r6
 800a9c6:	d334      	bcc.n	800aa32 <rshift+0x96>
 800a9c8:	1a9b      	subs	r3, r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	1eea      	subs	r2, r5, #3
 800a9ce:	4296      	cmp	r6, r2
 800a9d0:	bf38      	it	cc
 800a9d2:	2300      	movcc	r3, #0
 800a9d4:	4423      	add	r3, r4
 800a9d6:	e015      	b.n	800aa04 <rshift+0x68>
 800a9d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9dc:	f1c1 0820 	rsb	r8, r1, #32
 800a9e0:	40cf      	lsrs	r7, r1
 800a9e2:	f105 0e04 	add.w	lr, r5, #4
 800a9e6:	46a1      	mov	r9, r4
 800a9e8:	4576      	cmp	r6, lr
 800a9ea:	46f4      	mov	ip, lr
 800a9ec:	d815      	bhi.n	800aa1a <rshift+0x7e>
 800a9ee:	1a9a      	subs	r2, r3, r2
 800a9f0:	0092      	lsls	r2, r2, #2
 800a9f2:	3a04      	subs	r2, #4
 800a9f4:	3501      	adds	r5, #1
 800a9f6:	42ae      	cmp	r6, r5
 800a9f8:	bf38      	it	cc
 800a9fa:	2200      	movcc	r2, #0
 800a9fc:	18a3      	adds	r3, r4, r2
 800a9fe:	50a7      	str	r7, [r4, r2]
 800aa00:	b107      	cbz	r7, 800aa04 <rshift+0x68>
 800aa02:	3304      	adds	r3, #4
 800aa04:	1b1a      	subs	r2, r3, r4
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa0c:	bf08      	it	eq
 800aa0e:	2300      	moveq	r3, #0
 800aa10:	6102      	str	r2, [r0, #16]
 800aa12:	bf08      	it	eq
 800aa14:	6143      	streq	r3, [r0, #20]
 800aa16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa1a:	f8dc c000 	ldr.w	ip, [ip]
 800aa1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa22:	ea4c 0707 	orr.w	r7, ip, r7
 800aa26:	f849 7b04 	str.w	r7, [r9], #4
 800aa2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa2e:	40cf      	lsrs	r7, r1
 800aa30:	e7da      	b.n	800a9e8 <rshift+0x4c>
 800aa32:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa36:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa3a:	e7c3      	b.n	800a9c4 <rshift+0x28>
 800aa3c:	4623      	mov	r3, r4
 800aa3e:	e7e1      	b.n	800aa04 <rshift+0x68>

0800aa40 <__hexdig_fun>:
 800aa40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa44:	2b09      	cmp	r3, #9
 800aa46:	d802      	bhi.n	800aa4e <__hexdig_fun+0xe>
 800aa48:	3820      	subs	r0, #32
 800aa4a:	b2c0      	uxtb	r0, r0
 800aa4c:	4770      	bx	lr
 800aa4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa52:	2b05      	cmp	r3, #5
 800aa54:	d801      	bhi.n	800aa5a <__hexdig_fun+0x1a>
 800aa56:	3847      	subs	r0, #71	@ 0x47
 800aa58:	e7f7      	b.n	800aa4a <__hexdig_fun+0xa>
 800aa5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	d801      	bhi.n	800aa66 <__hexdig_fun+0x26>
 800aa62:	3827      	subs	r0, #39	@ 0x27
 800aa64:	e7f1      	b.n	800aa4a <__hexdig_fun+0xa>
 800aa66:	2000      	movs	r0, #0
 800aa68:	4770      	bx	lr
	...

0800aa6c <__gethex>:
 800aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	b085      	sub	sp, #20
 800aa72:	468a      	mov	sl, r1
 800aa74:	9302      	str	r3, [sp, #8]
 800aa76:	680b      	ldr	r3, [r1, #0]
 800aa78:	9001      	str	r0, [sp, #4]
 800aa7a:	4690      	mov	r8, r2
 800aa7c:	1c9c      	adds	r4, r3, #2
 800aa7e:	46a1      	mov	r9, r4
 800aa80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa84:	2830      	cmp	r0, #48	@ 0x30
 800aa86:	d0fa      	beq.n	800aa7e <__gethex+0x12>
 800aa88:	eba9 0303 	sub.w	r3, r9, r3
 800aa8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa90:	f7ff ffd6 	bl	800aa40 <__hexdig_fun>
 800aa94:	4605      	mov	r5, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d168      	bne.n	800ab6c <__gethex+0x100>
 800aa9a:	49a0      	ldr	r1, [pc, #640]	@ (800ad1c <__gethex+0x2b0>)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	4648      	mov	r0, r9
 800aaa0:	f7ff feee 	bl	800a880 <strncmp>
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d167      	bne.n	800ab7a <__gethex+0x10e>
 800aaaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aaae:	4626      	mov	r6, r4
 800aab0:	f7ff ffc6 	bl	800aa40 <__hexdig_fun>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d062      	beq.n	800ab7e <__gethex+0x112>
 800aab8:	4623      	mov	r3, r4
 800aaba:	7818      	ldrb	r0, [r3, #0]
 800aabc:	2830      	cmp	r0, #48	@ 0x30
 800aabe:	4699      	mov	r9, r3
 800aac0:	f103 0301 	add.w	r3, r3, #1
 800aac4:	d0f9      	beq.n	800aaba <__gethex+0x4e>
 800aac6:	f7ff ffbb 	bl	800aa40 <__hexdig_fun>
 800aaca:	fab0 f580 	clz	r5, r0
 800aace:	096d      	lsrs	r5, r5, #5
 800aad0:	f04f 0b01 	mov.w	fp, #1
 800aad4:	464a      	mov	r2, r9
 800aad6:	4616      	mov	r6, r2
 800aad8:	3201      	adds	r2, #1
 800aada:	7830      	ldrb	r0, [r6, #0]
 800aadc:	f7ff ffb0 	bl	800aa40 <__hexdig_fun>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d1f8      	bne.n	800aad6 <__gethex+0x6a>
 800aae4:	498d      	ldr	r1, [pc, #564]	@ (800ad1c <__gethex+0x2b0>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff fec9 	bl	800a880 <strncmp>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d13f      	bne.n	800ab72 <__gethex+0x106>
 800aaf2:	b944      	cbnz	r4, 800ab06 <__gethex+0x9a>
 800aaf4:	1c74      	adds	r4, r6, #1
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	4616      	mov	r6, r2
 800aafa:	3201      	adds	r2, #1
 800aafc:	7830      	ldrb	r0, [r6, #0]
 800aafe:	f7ff ff9f 	bl	800aa40 <__hexdig_fun>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d1f8      	bne.n	800aaf8 <__gethex+0x8c>
 800ab06:	1ba4      	subs	r4, r4, r6
 800ab08:	00a7      	lsls	r7, r4, #2
 800ab0a:	7833      	ldrb	r3, [r6, #0]
 800ab0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab10:	2b50      	cmp	r3, #80	@ 0x50
 800ab12:	d13e      	bne.n	800ab92 <__gethex+0x126>
 800ab14:	7873      	ldrb	r3, [r6, #1]
 800ab16:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab18:	d033      	beq.n	800ab82 <__gethex+0x116>
 800ab1a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab1c:	d034      	beq.n	800ab88 <__gethex+0x11c>
 800ab1e:	1c71      	adds	r1, r6, #1
 800ab20:	2400      	movs	r4, #0
 800ab22:	7808      	ldrb	r0, [r1, #0]
 800ab24:	f7ff ff8c 	bl	800aa40 <__hexdig_fun>
 800ab28:	1e43      	subs	r3, r0, #1
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b18      	cmp	r3, #24
 800ab2e:	d830      	bhi.n	800ab92 <__gethex+0x126>
 800ab30:	f1a0 0210 	sub.w	r2, r0, #16
 800ab34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab38:	f7ff ff82 	bl	800aa40 <__hexdig_fun>
 800ab3c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab40:	fa5f fc8c 	uxtb.w	ip, ip
 800ab44:	f1bc 0f18 	cmp.w	ip, #24
 800ab48:	f04f 030a 	mov.w	r3, #10
 800ab4c:	d91e      	bls.n	800ab8c <__gethex+0x120>
 800ab4e:	b104      	cbz	r4, 800ab52 <__gethex+0xe6>
 800ab50:	4252      	negs	r2, r2
 800ab52:	4417      	add	r7, r2
 800ab54:	f8ca 1000 	str.w	r1, [sl]
 800ab58:	b1ed      	cbz	r5, 800ab96 <__gethex+0x12a>
 800ab5a:	f1bb 0f00 	cmp.w	fp, #0
 800ab5e:	bf0c      	ite	eq
 800ab60:	2506      	moveq	r5, #6
 800ab62:	2500      	movne	r5, #0
 800ab64:	4628      	mov	r0, r5
 800ab66:	b005      	add	sp, #20
 800ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6c:	2500      	movs	r5, #0
 800ab6e:	462c      	mov	r4, r5
 800ab70:	e7b0      	b.n	800aad4 <__gethex+0x68>
 800ab72:	2c00      	cmp	r4, #0
 800ab74:	d1c7      	bne.n	800ab06 <__gethex+0x9a>
 800ab76:	4627      	mov	r7, r4
 800ab78:	e7c7      	b.n	800ab0a <__gethex+0x9e>
 800ab7a:	464e      	mov	r6, r9
 800ab7c:	462f      	mov	r7, r5
 800ab7e:	2501      	movs	r5, #1
 800ab80:	e7c3      	b.n	800ab0a <__gethex+0x9e>
 800ab82:	2400      	movs	r4, #0
 800ab84:	1cb1      	adds	r1, r6, #2
 800ab86:	e7cc      	b.n	800ab22 <__gethex+0xb6>
 800ab88:	2401      	movs	r4, #1
 800ab8a:	e7fb      	b.n	800ab84 <__gethex+0x118>
 800ab8c:	fb03 0002 	mla	r0, r3, r2, r0
 800ab90:	e7ce      	b.n	800ab30 <__gethex+0xc4>
 800ab92:	4631      	mov	r1, r6
 800ab94:	e7de      	b.n	800ab54 <__gethex+0xe8>
 800ab96:	eba6 0309 	sub.w	r3, r6, r9
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	2b07      	cmp	r3, #7
 800aba0:	dc0a      	bgt.n	800abb8 <__gethex+0x14c>
 800aba2:	9801      	ldr	r0, [sp, #4]
 800aba4:	f7fd fff8 	bl	8008b98 <_Balloc>
 800aba8:	4604      	mov	r4, r0
 800abaa:	b940      	cbnz	r0, 800abbe <__gethex+0x152>
 800abac:	4b5c      	ldr	r3, [pc, #368]	@ (800ad20 <__gethex+0x2b4>)
 800abae:	4602      	mov	r2, r0
 800abb0:	21e4      	movs	r1, #228	@ 0xe4
 800abb2:	485c      	ldr	r0, [pc, #368]	@ (800ad24 <__gethex+0x2b8>)
 800abb4:	f7ff fec0 	bl	800a938 <__assert_func>
 800abb8:	3101      	adds	r1, #1
 800abba:	105b      	asrs	r3, r3, #1
 800abbc:	e7ef      	b.n	800ab9e <__gethex+0x132>
 800abbe:	f100 0a14 	add.w	sl, r0, #20
 800abc2:	2300      	movs	r3, #0
 800abc4:	4655      	mov	r5, sl
 800abc6:	469b      	mov	fp, r3
 800abc8:	45b1      	cmp	r9, r6
 800abca:	d337      	bcc.n	800ac3c <__gethex+0x1d0>
 800abcc:	f845 bb04 	str.w	fp, [r5], #4
 800abd0:	eba5 050a 	sub.w	r5, r5, sl
 800abd4:	10ad      	asrs	r5, r5, #2
 800abd6:	6125      	str	r5, [r4, #16]
 800abd8:	4658      	mov	r0, fp
 800abda:	f7fe f8cf 	bl	8008d7c <__hi0bits>
 800abde:	016d      	lsls	r5, r5, #5
 800abe0:	f8d8 6000 	ldr.w	r6, [r8]
 800abe4:	1a2d      	subs	r5, r5, r0
 800abe6:	42b5      	cmp	r5, r6
 800abe8:	dd54      	ble.n	800ac94 <__gethex+0x228>
 800abea:	1bad      	subs	r5, r5, r6
 800abec:	4629      	mov	r1, r5
 800abee:	4620      	mov	r0, r4
 800abf0:	f7fe fc5b 	bl	80094aa <__any_on>
 800abf4:	4681      	mov	r9, r0
 800abf6:	b178      	cbz	r0, 800ac18 <__gethex+0x1ac>
 800abf8:	1e6b      	subs	r3, r5, #1
 800abfa:	1159      	asrs	r1, r3, #5
 800abfc:	f003 021f 	and.w	r2, r3, #31
 800ac00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac04:	f04f 0901 	mov.w	r9, #1
 800ac08:	fa09 f202 	lsl.w	r2, r9, r2
 800ac0c:	420a      	tst	r2, r1
 800ac0e:	d003      	beq.n	800ac18 <__gethex+0x1ac>
 800ac10:	454b      	cmp	r3, r9
 800ac12:	dc36      	bgt.n	800ac82 <__gethex+0x216>
 800ac14:	f04f 0902 	mov.w	r9, #2
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f7ff febe 	bl	800a99c <rshift>
 800ac20:	442f      	add	r7, r5
 800ac22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac26:	42bb      	cmp	r3, r7
 800ac28:	da42      	bge.n	800acb0 <__gethex+0x244>
 800ac2a:	9801      	ldr	r0, [sp, #4]
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	f7fd fff3 	bl	8008c18 <_Bfree>
 800ac32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac34:	2300      	movs	r3, #0
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	25a3      	movs	r5, #163	@ 0xa3
 800ac3a:	e793      	b.n	800ab64 <__gethex+0xf8>
 800ac3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac40:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac42:	d012      	beq.n	800ac6a <__gethex+0x1fe>
 800ac44:	2b20      	cmp	r3, #32
 800ac46:	d104      	bne.n	800ac52 <__gethex+0x1e6>
 800ac48:	f845 bb04 	str.w	fp, [r5], #4
 800ac4c:	f04f 0b00 	mov.w	fp, #0
 800ac50:	465b      	mov	r3, fp
 800ac52:	7830      	ldrb	r0, [r6, #0]
 800ac54:	9303      	str	r3, [sp, #12]
 800ac56:	f7ff fef3 	bl	800aa40 <__hexdig_fun>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	f000 000f 	and.w	r0, r0, #15
 800ac60:	4098      	lsls	r0, r3
 800ac62:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac66:	3304      	adds	r3, #4
 800ac68:	e7ae      	b.n	800abc8 <__gethex+0x15c>
 800ac6a:	45b1      	cmp	r9, r6
 800ac6c:	d8ea      	bhi.n	800ac44 <__gethex+0x1d8>
 800ac6e:	492b      	ldr	r1, [pc, #172]	@ (800ad1c <__gethex+0x2b0>)
 800ac70:	9303      	str	r3, [sp, #12]
 800ac72:	2201      	movs	r2, #1
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7ff fe03 	bl	800a880 <strncmp>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d1e1      	bne.n	800ac44 <__gethex+0x1d8>
 800ac80:	e7a2      	b.n	800abc8 <__gethex+0x15c>
 800ac82:	1ea9      	subs	r1, r5, #2
 800ac84:	4620      	mov	r0, r4
 800ac86:	f7fe fc10 	bl	80094aa <__any_on>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d0c2      	beq.n	800ac14 <__gethex+0x1a8>
 800ac8e:	f04f 0903 	mov.w	r9, #3
 800ac92:	e7c1      	b.n	800ac18 <__gethex+0x1ac>
 800ac94:	da09      	bge.n	800acaa <__gethex+0x23e>
 800ac96:	1b75      	subs	r5, r6, r5
 800ac98:	4621      	mov	r1, r4
 800ac9a:	9801      	ldr	r0, [sp, #4]
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	f7fe f9cb 	bl	8009038 <__lshift>
 800aca2:	1b7f      	subs	r7, r7, r5
 800aca4:	4604      	mov	r4, r0
 800aca6:	f100 0a14 	add.w	sl, r0, #20
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	e7b8      	b.n	800ac22 <__gethex+0x1b6>
 800acb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acb4:	42bd      	cmp	r5, r7
 800acb6:	dd6f      	ble.n	800ad98 <__gethex+0x32c>
 800acb8:	1bed      	subs	r5, r5, r7
 800acba:	42ae      	cmp	r6, r5
 800acbc:	dc34      	bgt.n	800ad28 <__gethex+0x2bc>
 800acbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d022      	beq.n	800ad0c <__gethex+0x2a0>
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d024      	beq.n	800ad14 <__gethex+0x2a8>
 800acca:	2b01      	cmp	r3, #1
 800accc:	d115      	bne.n	800acfa <__gethex+0x28e>
 800acce:	42ae      	cmp	r6, r5
 800acd0:	d113      	bne.n	800acfa <__gethex+0x28e>
 800acd2:	2e01      	cmp	r6, #1
 800acd4:	d10b      	bne.n	800acee <__gethex+0x282>
 800acd6:	9a02      	ldr	r2, [sp, #8]
 800acd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acdc:	6013      	str	r3, [r2, #0]
 800acde:	2301      	movs	r3, #1
 800ace0:	6123      	str	r3, [r4, #16]
 800ace2:	f8ca 3000 	str.w	r3, [sl]
 800ace6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ace8:	2562      	movs	r5, #98	@ 0x62
 800acea:	601c      	str	r4, [r3, #0]
 800acec:	e73a      	b.n	800ab64 <__gethex+0xf8>
 800acee:	1e71      	subs	r1, r6, #1
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7fe fbda 	bl	80094aa <__any_on>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d1ed      	bne.n	800acd6 <__gethex+0x26a>
 800acfa:	9801      	ldr	r0, [sp, #4]
 800acfc:	4621      	mov	r1, r4
 800acfe:	f7fd ff8b 	bl	8008c18 <_Bfree>
 800ad02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad04:	2300      	movs	r3, #0
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	2550      	movs	r5, #80	@ 0x50
 800ad0a:	e72b      	b.n	800ab64 <__gethex+0xf8>
 800ad0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1f3      	bne.n	800acfa <__gethex+0x28e>
 800ad12:	e7e0      	b.n	800acd6 <__gethex+0x26a>
 800ad14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1dd      	bne.n	800acd6 <__gethex+0x26a>
 800ad1a:	e7ee      	b.n	800acfa <__gethex+0x28e>
 800ad1c:	0800b4dc 	.word	0x0800b4dc
 800ad20:	0800b472 	.word	0x0800b472
 800ad24:	0800b533 	.word	0x0800b533
 800ad28:	1e6f      	subs	r7, r5, #1
 800ad2a:	f1b9 0f00 	cmp.w	r9, #0
 800ad2e:	d130      	bne.n	800ad92 <__gethex+0x326>
 800ad30:	b127      	cbz	r7, 800ad3c <__gethex+0x2d0>
 800ad32:	4639      	mov	r1, r7
 800ad34:	4620      	mov	r0, r4
 800ad36:	f7fe fbb8 	bl	80094aa <__any_on>
 800ad3a:	4681      	mov	r9, r0
 800ad3c:	117a      	asrs	r2, r7, #5
 800ad3e:	2301      	movs	r3, #1
 800ad40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad44:	f007 071f 	and.w	r7, r7, #31
 800ad48:	40bb      	lsls	r3, r7
 800ad4a:	4213      	tst	r3, r2
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	4620      	mov	r0, r4
 800ad50:	bf18      	it	ne
 800ad52:	f049 0902 	orrne.w	r9, r9, #2
 800ad56:	f7ff fe21 	bl	800a99c <rshift>
 800ad5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad5e:	1b76      	subs	r6, r6, r5
 800ad60:	2502      	movs	r5, #2
 800ad62:	f1b9 0f00 	cmp.w	r9, #0
 800ad66:	d047      	beq.n	800adf8 <__gethex+0x38c>
 800ad68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d015      	beq.n	800ad9c <__gethex+0x330>
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d017      	beq.n	800ada4 <__gethex+0x338>
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d109      	bne.n	800ad8c <__gethex+0x320>
 800ad78:	f019 0f02 	tst.w	r9, #2
 800ad7c:	d006      	beq.n	800ad8c <__gethex+0x320>
 800ad7e:	f8da 3000 	ldr.w	r3, [sl]
 800ad82:	ea49 0903 	orr.w	r9, r9, r3
 800ad86:	f019 0f01 	tst.w	r9, #1
 800ad8a:	d10e      	bne.n	800adaa <__gethex+0x33e>
 800ad8c:	f045 0510 	orr.w	r5, r5, #16
 800ad90:	e032      	b.n	800adf8 <__gethex+0x38c>
 800ad92:	f04f 0901 	mov.w	r9, #1
 800ad96:	e7d1      	b.n	800ad3c <__gethex+0x2d0>
 800ad98:	2501      	movs	r5, #1
 800ad9a:	e7e2      	b.n	800ad62 <__gethex+0x2f6>
 800ad9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9e:	f1c3 0301 	rsb	r3, r3, #1
 800ada2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ada4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0f0      	beq.n	800ad8c <__gethex+0x320>
 800adaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adae:	f104 0314 	add.w	r3, r4, #20
 800adb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adba:	f04f 0c00 	mov.w	ip, #0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adc8:	d01b      	beq.n	800ae02 <__gethex+0x396>
 800adca:	3201      	adds	r2, #1
 800adcc:	6002      	str	r2, [r0, #0]
 800adce:	2d02      	cmp	r5, #2
 800add0:	f104 0314 	add.w	r3, r4, #20
 800add4:	d13c      	bne.n	800ae50 <__gethex+0x3e4>
 800add6:	f8d8 2000 	ldr.w	r2, [r8]
 800adda:	3a01      	subs	r2, #1
 800addc:	42b2      	cmp	r2, r6
 800adde:	d109      	bne.n	800adf4 <__gethex+0x388>
 800ade0:	1171      	asrs	r1, r6, #5
 800ade2:	2201      	movs	r2, #1
 800ade4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ade8:	f006 061f 	and.w	r6, r6, #31
 800adec:	fa02 f606 	lsl.w	r6, r2, r6
 800adf0:	421e      	tst	r6, r3
 800adf2:	d13a      	bne.n	800ae6a <__gethex+0x3fe>
 800adf4:	f045 0520 	orr.w	r5, r5, #32
 800adf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adfa:	601c      	str	r4, [r3, #0]
 800adfc:	9b02      	ldr	r3, [sp, #8]
 800adfe:	601f      	str	r7, [r3, #0]
 800ae00:	e6b0      	b.n	800ab64 <__gethex+0xf8>
 800ae02:	4299      	cmp	r1, r3
 800ae04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae08:	d8d9      	bhi.n	800adbe <__gethex+0x352>
 800ae0a:	68a3      	ldr	r3, [r4, #8]
 800ae0c:	459b      	cmp	fp, r3
 800ae0e:	db17      	blt.n	800ae40 <__gethex+0x3d4>
 800ae10:	6861      	ldr	r1, [r4, #4]
 800ae12:	9801      	ldr	r0, [sp, #4]
 800ae14:	3101      	adds	r1, #1
 800ae16:	f7fd febf 	bl	8008b98 <_Balloc>
 800ae1a:	4681      	mov	r9, r0
 800ae1c:	b918      	cbnz	r0, 800ae26 <__gethex+0x3ba>
 800ae1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae88 <__gethex+0x41c>)
 800ae20:	4602      	mov	r2, r0
 800ae22:	2184      	movs	r1, #132	@ 0x84
 800ae24:	e6c5      	b.n	800abb2 <__gethex+0x146>
 800ae26:	6922      	ldr	r2, [r4, #16]
 800ae28:	3202      	adds	r2, #2
 800ae2a:	f104 010c 	add.w	r1, r4, #12
 800ae2e:	0092      	lsls	r2, r2, #2
 800ae30:	300c      	adds	r0, #12
 800ae32:	f7ff fd69 	bl	800a908 <memcpy>
 800ae36:	4621      	mov	r1, r4
 800ae38:	9801      	ldr	r0, [sp, #4]
 800ae3a:	f7fd feed 	bl	8008c18 <_Bfree>
 800ae3e:	464c      	mov	r4, r9
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae48:	6122      	str	r2, [r4, #16]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	615a      	str	r2, [r3, #20]
 800ae4e:	e7be      	b.n	800adce <__gethex+0x362>
 800ae50:	6922      	ldr	r2, [r4, #16]
 800ae52:	455a      	cmp	r2, fp
 800ae54:	dd0b      	ble.n	800ae6e <__gethex+0x402>
 800ae56:	2101      	movs	r1, #1
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f7ff fd9f 	bl	800a99c <rshift>
 800ae5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae62:	3701      	adds	r7, #1
 800ae64:	42bb      	cmp	r3, r7
 800ae66:	f6ff aee0 	blt.w	800ac2a <__gethex+0x1be>
 800ae6a:	2501      	movs	r5, #1
 800ae6c:	e7c2      	b.n	800adf4 <__gethex+0x388>
 800ae6e:	f016 061f 	ands.w	r6, r6, #31
 800ae72:	d0fa      	beq.n	800ae6a <__gethex+0x3fe>
 800ae74:	4453      	add	r3, sl
 800ae76:	f1c6 0620 	rsb	r6, r6, #32
 800ae7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae7e:	f7fd ff7d 	bl	8008d7c <__hi0bits>
 800ae82:	42b0      	cmp	r0, r6
 800ae84:	dbe7      	blt.n	800ae56 <__gethex+0x3ea>
 800ae86:	e7f0      	b.n	800ae6a <__gethex+0x3fe>
 800ae88:	0800b472 	.word	0x0800b472

0800ae8c <L_shift>:
 800ae8c:	f1c2 0208 	rsb	r2, r2, #8
 800ae90:	0092      	lsls	r2, r2, #2
 800ae92:	b570      	push	{r4, r5, r6, lr}
 800ae94:	f1c2 0620 	rsb	r6, r2, #32
 800ae98:	6843      	ldr	r3, [r0, #4]
 800ae9a:	6804      	ldr	r4, [r0, #0]
 800ae9c:	fa03 f506 	lsl.w	r5, r3, r6
 800aea0:	432c      	orrs	r4, r5
 800aea2:	40d3      	lsrs	r3, r2
 800aea4:	6004      	str	r4, [r0, #0]
 800aea6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aeaa:	4288      	cmp	r0, r1
 800aeac:	d3f4      	bcc.n	800ae98 <L_shift+0xc>
 800aeae:	bd70      	pop	{r4, r5, r6, pc}

0800aeb0 <__match>:
 800aeb0:	b530      	push	{r4, r5, lr}
 800aeb2:	6803      	ldr	r3, [r0, #0]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeba:	b914      	cbnz	r4, 800aec2 <__match+0x12>
 800aebc:	6003      	str	r3, [r0, #0]
 800aebe:	2001      	movs	r0, #1
 800aec0:	bd30      	pop	{r4, r5, pc}
 800aec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aeca:	2d19      	cmp	r5, #25
 800aecc:	bf98      	it	ls
 800aece:	3220      	addls	r2, #32
 800aed0:	42a2      	cmp	r2, r4
 800aed2:	d0f0      	beq.n	800aeb6 <__match+0x6>
 800aed4:	2000      	movs	r0, #0
 800aed6:	e7f3      	b.n	800aec0 <__match+0x10>

0800aed8 <__hexnan>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	680b      	ldr	r3, [r1, #0]
 800aede:	6801      	ldr	r1, [r0, #0]
 800aee0:	115e      	asrs	r6, r3, #5
 800aee2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aee6:	f013 031f 	ands.w	r3, r3, #31
 800aeea:	b087      	sub	sp, #28
 800aeec:	bf18      	it	ne
 800aeee:	3604      	addne	r6, #4
 800aef0:	2500      	movs	r5, #0
 800aef2:	1f37      	subs	r7, r6, #4
 800aef4:	4682      	mov	sl, r0
 800aef6:	4690      	mov	r8, r2
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	f846 5c04 	str.w	r5, [r6, #-4]
 800aefe:	46b9      	mov	r9, r7
 800af00:	463c      	mov	r4, r7
 800af02:	9502      	str	r5, [sp, #8]
 800af04:	46ab      	mov	fp, r5
 800af06:	784a      	ldrb	r2, [r1, #1]
 800af08:	1c4b      	adds	r3, r1, #1
 800af0a:	9303      	str	r3, [sp, #12]
 800af0c:	b342      	cbz	r2, 800af60 <__hexnan+0x88>
 800af0e:	4610      	mov	r0, r2
 800af10:	9105      	str	r1, [sp, #20]
 800af12:	9204      	str	r2, [sp, #16]
 800af14:	f7ff fd94 	bl	800aa40 <__hexdig_fun>
 800af18:	2800      	cmp	r0, #0
 800af1a:	d151      	bne.n	800afc0 <__hexnan+0xe8>
 800af1c:	9a04      	ldr	r2, [sp, #16]
 800af1e:	9905      	ldr	r1, [sp, #20]
 800af20:	2a20      	cmp	r2, #32
 800af22:	d818      	bhi.n	800af56 <__hexnan+0x7e>
 800af24:	9b02      	ldr	r3, [sp, #8]
 800af26:	459b      	cmp	fp, r3
 800af28:	dd13      	ble.n	800af52 <__hexnan+0x7a>
 800af2a:	454c      	cmp	r4, r9
 800af2c:	d206      	bcs.n	800af3c <__hexnan+0x64>
 800af2e:	2d07      	cmp	r5, #7
 800af30:	dc04      	bgt.n	800af3c <__hexnan+0x64>
 800af32:	462a      	mov	r2, r5
 800af34:	4649      	mov	r1, r9
 800af36:	4620      	mov	r0, r4
 800af38:	f7ff ffa8 	bl	800ae8c <L_shift>
 800af3c:	4544      	cmp	r4, r8
 800af3e:	d952      	bls.n	800afe6 <__hexnan+0x10e>
 800af40:	2300      	movs	r3, #0
 800af42:	f1a4 0904 	sub.w	r9, r4, #4
 800af46:	f844 3c04 	str.w	r3, [r4, #-4]
 800af4a:	f8cd b008 	str.w	fp, [sp, #8]
 800af4e:	464c      	mov	r4, r9
 800af50:	461d      	mov	r5, r3
 800af52:	9903      	ldr	r1, [sp, #12]
 800af54:	e7d7      	b.n	800af06 <__hexnan+0x2e>
 800af56:	2a29      	cmp	r2, #41	@ 0x29
 800af58:	d157      	bne.n	800b00a <__hexnan+0x132>
 800af5a:	3102      	adds	r1, #2
 800af5c:	f8ca 1000 	str.w	r1, [sl]
 800af60:	f1bb 0f00 	cmp.w	fp, #0
 800af64:	d051      	beq.n	800b00a <__hexnan+0x132>
 800af66:	454c      	cmp	r4, r9
 800af68:	d206      	bcs.n	800af78 <__hexnan+0xa0>
 800af6a:	2d07      	cmp	r5, #7
 800af6c:	dc04      	bgt.n	800af78 <__hexnan+0xa0>
 800af6e:	462a      	mov	r2, r5
 800af70:	4649      	mov	r1, r9
 800af72:	4620      	mov	r0, r4
 800af74:	f7ff ff8a 	bl	800ae8c <L_shift>
 800af78:	4544      	cmp	r4, r8
 800af7a:	d936      	bls.n	800afea <__hexnan+0x112>
 800af7c:	f1a8 0204 	sub.w	r2, r8, #4
 800af80:	4623      	mov	r3, r4
 800af82:	f853 1b04 	ldr.w	r1, [r3], #4
 800af86:	f842 1f04 	str.w	r1, [r2, #4]!
 800af8a:	429f      	cmp	r7, r3
 800af8c:	d2f9      	bcs.n	800af82 <__hexnan+0xaa>
 800af8e:	1b3b      	subs	r3, r7, r4
 800af90:	f023 0303 	bic.w	r3, r3, #3
 800af94:	3304      	adds	r3, #4
 800af96:	3401      	adds	r4, #1
 800af98:	3e03      	subs	r6, #3
 800af9a:	42b4      	cmp	r4, r6
 800af9c:	bf88      	it	hi
 800af9e:	2304      	movhi	r3, #4
 800afa0:	4443      	add	r3, r8
 800afa2:	2200      	movs	r2, #0
 800afa4:	f843 2b04 	str.w	r2, [r3], #4
 800afa8:	429f      	cmp	r7, r3
 800afaa:	d2fb      	bcs.n	800afa4 <__hexnan+0xcc>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	b91b      	cbnz	r3, 800afb8 <__hexnan+0xe0>
 800afb0:	4547      	cmp	r7, r8
 800afb2:	d128      	bne.n	800b006 <__hexnan+0x12e>
 800afb4:	2301      	movs	r3, #1
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	2005      	movs	r0, #5
 800afba:	b007      	add	sp, #28
 800afbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc0:	3501      	adds	r5, #1
 800afc2:	2d08      	cmp	r5, #8
 800afc4:	f10b 0b01 	add.w	fp, fp, #1
 800afc8:	dd06      	ble.n	800afd8 <__hexnan+0x100>
 800afca:	4544      	cmp	r4, r8
 800afcc:	d9c1      	bls.n	800af52 <__hexnan+0x7a>
 800afce:	2300      	movs	r3, #0
 800afd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800afd4:	2501      	movs	r5, #1
 800afd6:	3c04      	subs	r4, #4
 800afd8:	6822      	ldr	r2, [r4, #0]
 800afda:	f000 000f 	and.w	r0, r0, #15
 800afde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afe2:	6020      	str	r0, [r4, #0]
 800afe4:	e7b5      	b.n	800af52 <__hexnan+0x7a>
 800afe6:	2508      	movs	r5, #8
 800afe8:	e7b3      	b.n	800af52 <__hexnan+0x7a>
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0dd      	beq.n	800afac <__hexnan+0xd4>
 800aff0:	f1c3 0320 	rsb	r3, r3, #32
 800aff4:	f04f 32ff 	mov.w	r2, #4294967295
 800aff8:	40da      	lsrs	r2, r3
 800affa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800affe:	4013      	ands	r3, r2
 800b000:	f846 3c04 	str.w	r3, [r6, #-4]
 800b004:	e7d2      	b.n	800afac <__hexnan+0xd4>
 800b006:	3f04      	subs	r7, #4
 800b008:	e7d0      	b.n	800afac <__hexnan+0xd4>
 800b00a:	2004      	movs	r0, #4
 800b00c:	e7d5      	b.n	800afba <__hexnan+0xe2>

0800b00e <__ascii_mbtowc>:
 800b00e:	b082      	sub	sp, #8
 800b010:	b901      	cbnz	r1, 800b014 <__ascii_mbtowc+0x6>
 800b012:	a901      	add	r1, sp, #4
 800b014:	b142      	cbz	r2, 800b028 <__ascii_mbtowc+0x1a>
 800b016:	b14b      	cbz	r3, 800b02c <__ascii_mbtowc+0x1e>
 800b018:	7813      	ldrb	r3, [r2, #0]
 800b01a:	600b      	str	r3, [r1, #0]
 800b01c:	7812      	ldrb	r2, [r2, #0]
 800b01e:	1e10      	subs	r0, r2, #0
 800b020:	bf18      	it	ne
 800b022:	2001      	movne	r0, #1
 800b024:	b002      	add	sp, #8
 800b026:	4770      	bx	lr
 800b028:	4610      	mov	r0, r2
 800b02a:	e7fb      	b.n	800b024 <__ascii_mbtowc+0x16>
 800b02c:	f06f 0001 	mvn.w	r0, #1
 800b030:	e7f8      	b.n	800b024 <__ascii_mbtowc+0x16>

0800b032 <_realloc_r>:
 800b032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b036:	4607      	mov	r7, r0
 800b038:	4614      	mov	r4, r2
 800b03a:	460d      	mov	r5, r1
 800b03c:	b921      	cbnz	r1, 800b048 <_realloc_r+0x16>
 800b03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b042:	4611      	mov	r1, r2
 800b044:	f7fd bd1c 	b.w	8008a80 <_malloc_r>
 800b048:	b92a      	cbnz	r2, 800b056 <_realloc_r+0x24>
 800b04a:	f7fd fca5 	bl	8008998 <_free_r>
 800b04e:	4625      	mov	r5, r4
 800b050:	4628      	mov	r0, r5
 800b052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b056:	f000 f840 	bl	800b0da <_malloc_usable_size_r>
 800b05a:	4284      	cmp	r4, r0
 800b05c:	4606      	mov	r6, r0
 800b05e:	d802      	bhi.n	800b066 <_realloc_r+0x34>
 800b060:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b064:	d8f4      	bhi.n	800b050 <_realloc_r+0x1e>
 800b066:	4621      	mov	r1, r4
 800b068:	4638      	mov	r0, r7
 800b06a:	f7fd fd09 	bl	8008a80 <_malloc_r>
 800b06e:	4680      	mov	r8, r0
 800b070:	b908      	cbnz	r0, 800b076 <_realloc_r+0x44>
 800b072:	4645      	mov	r5, r8
 800b074:	e7ec      	b.n	800b050 <_realloc_r+0x1e>
 800b076:	42b4      	cmp	r4, r6
 800b078:	4622      	mov	r2, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	bf28      	it	cs
 800b07e:	4632      	movcs	r2, r6
 800b080:	f7ff fc42 	bl	800a908 <memcpy>
 800b084:	4629      	mov	r1, r5
 800b086:	4638      	mov	r0, r7
 800b088:	f7fd fc86 	bl	8008998 <_free_r>
 800b08c:	e7f1      	b.n	800b072 <_realloc_r+0x40>

0800b08e <__ascii_wctomb>:
 800b08e:	4603      	mov	r3, r0
 800b090:	4608      	mov	r0, r1
 800b092:	b141      	cbz	r1, 800b0a6 <__ascii_wctomb+0x18>
 800b094:	2aff      	cmp	r2, #255	@ 0xff
 800b096:	d904      	bls.n	800b0a2 <__ascii_wctomb+0x14>
 800b098:	228a      	movs	r2, #138	@ 0x8a
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	4770      	bx	lr
 800b0a2:	700a      	strb	r2, [r1, #0]
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	4770      	bx	lr

0800b0a8 <fiprintf>:
 800b0a8:	b40e      	push	{r1, r2, r3}
 800b0aa:	b503      	push	{r0, r1, lr}
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	ab03      	add	r3, sp, #12
 800b0b0:	4805      	ldr	r0, [pc, #20]	@ (800b0c8 <fiprintf+0x20>)
 800b0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b6:	6800      	ldr	r0, [r0, #0]
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	f7ff f9a1 	bl	800a400 <_vfiprintf_r>
 800b0be:	b002      	add	sp, #8
 800b0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c4:	b003      	add	sp, #12
 800b0c6:	4770      	bx	lr
 800b0c8:	20000018 	.word	0x20000018

0800b0cc <abort>:
 800b0cc:	b508      	push	{r3, lr}
 800b0ce:	2006      	movs	r0, #6
 800b0d0:	f000 f834 	bl	800b13c <raise>
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f7f7 fc23 	bl	8002920 <_exit>

0800b0da <_malloc_usable_size_r>:
 800b0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0de:	1f18      	subs	r0, r3, #4
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	bfbc      	itt	lt
 800b0e4:	580b      	ldrlt	r3, [r1, r0]
 800b0e6:	18c0      	addlt	r0, r0, r3
 800b0e8:	4770      	bx	lr

0800b0ea <_raise_r>:
 800b0ea:	291f      	cmp	r1, #31
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	d904      	bls.n	800b0fe <_raise_r+0x14>
 800b0f4:	2316      	movs	r3, #22
 800b0f6:	6003      	str	r3, [r0, #0]
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b100:	b112      	cbz	r2, 800b108 <_raise_r+0x1e>
 800b102:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b106:	b94b      	cbnz	r3, 800b11c <_raise_r+0x32>
 800b108:	4628      	mov	r0, r5
 800b10a:	f000 f831 	bl	800b170 <_getpid_r>
 800b10e:	4622      	mov	r2, r4
 800b110:	4601      	mov	r1, r0
 800b112:	4628      	mov	r0, r5
 800b114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b118:	f000 b818 	b.w	800b14c <_kill_r>
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d00a      	beq.n	800b136 <_raise_r+0x4c>
 800b120:	1c59      	adds	r1, r3, #1
 800b122:	d103      	bne.n	800b12c <_raise_r+0x42>
 800b124:	2316      	movs	r3, #22
 800b126:	6003      	str	r3, [r0, #0]
 800b128:	2001      	movs	r0, #1
 800b12a:	e7e7      	b.n	800b0fc <_raise_r+0x12>
 800b12c:	2100      	movs	r1, #0
 800b12e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b132:	4620      	mov	r0, r4
 800b134:	4798      	blx	r3
 800b136:	2000      	movs	r0, #0
 800b138:	e7e0      	b.n	800b0fc <_raise_r+0x12>
	...

0800b13c <raise>:
 800b13c:	4b02      	ldr	r3, [pc, #8]	@ (800b148 <raise+0xc>)
 800b13e:	4601      	mov	r1, r0
 800b140:	6818      	ldr	r0, [r3, #0]
 800b142:	f7ff bfd2 	b.w	800b0ea <_raise_r>
 800b146:	bf00      	nop
 800b148:	20000018 	.word	0x20000018

0800b14c <_kill_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4d07      	ldr	r5, [pc, #28]	@ (800b16c <_kill_r+0x20>)
 800b150:	2300      	movs	r3, #0
 800b152:	4604      	mov	r4, r0
 800b154:	4608      	mov	r0, r1
 800b156:	4611      	mov	r1, r2
 800b158:	602b      	str	r3, [r5, #0]
 800b15a:	f7f7 fbd1 	bl	8002900 <_kill>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	d102      	bne.n	800b168 <_kill_r+0x1c>
 800b162:	682b      	ldr	r3, [r5, #0]
 800b164:	b103      	cbz	r3, 800b168 <_kill_r+0x1c>
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	bd38      	pop	{r3, r4, r5, pc}
 800b16a:	bf00      	nop
 800b16c:	2000047c 	.word	0x2000047c

0800b170 <_getpid_r>:
 800b170:	f7f7 bbbe 	b.w	80028f0 <_getpid>

0800b174 <_init>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr

0800b180 <_fini>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr
